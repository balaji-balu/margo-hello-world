// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/balaji/hello/ent/host"
	"github.com/balaji/hello/ent/site"
	"github.com/google/uuid"
)

// HostCreate is the builder for creating a Host entity.
type HostCreate struct {
	config
	mutation *HostMutation
	hooks    []Hook
}

// SetHostID sets the "host_id" field.
func (_c *HostCreate) SetHostID(v string) *HostCreate {
	_c.mutation.SetHostID(v)
	return _c
}

// SetSiteID sets the "site_id" field.
func (_c *HostCreate) SetSiteID(v uuid.UUID) *HostCreate {
	_c.mutation.SetSiteID(v)
	return _c
}

// SetNillableSiteID sets the "site_id" field if the given value is not nil.
func (_c *HostCreate) SetNillableSiteID(v *uuid.UUID) *HostCreate {
	if v != nil {
		_c.SetSiteID(*v)
	}
	return _c
}

// SetHostname sets the "hostname" field.
func (_c *HostCreate) SetHostname(v string) *HostCreate {
	_c.mutation.SetHostname(v)
	return _c
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (_c *HostCreate) SetNillableHostname(v *string) *HostCreate {
	if v != nil {
		_c.SetHostname(*v)
	}
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *HostCreate) SetIPAddress(v string) *HostCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_c *HostCreate) SetNillableIPAddress(v *string) *HostCreate {
	if v != nil {
		_c.SetIPAddress(*v)
	}
	return _c
}

// SetEdgeURL sets the "edge_url" field.
func (_c *HostCreate) SetEdgeURL(v string) *HostCreate {
	_c.mutation.SetEdgeURL(v)
	return _c
}

// SetNillableEdgeURL sets the "edge_url" field if the given value is not nil.
func (_c *HostCreate) SetNillableEdgeURL(v *string) *HostCreate {
	if v != nil {
		_c.SetEdgeURL(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *HostCreate) SetStatus(v string) *HostCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *HostCreate) SetNillableStatus(v *string) *HostCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (_c *HostCreate) SetLastHeartbeat(v time.Time) *HostCreate {
	_c.mutation.SetLastHeartbeat(v)
	return _c
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (_c *HostCreate) SetNillableLastHeartbeat(v *time.Time) *HostCreate {
	if v != nil {
		_c.SetLastHeartbeat(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *HostCreate) SetMetadata(v struct{}) *HostCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_c *HostCreate) SetNillableMetadata(v *struct{}) *HostCreate {
	if v != nil {
		_c.SetMetadata(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *HostCreate) SetCreatedAt(v time.Time) *HostCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *HostCreate) SetNillableCreatedAt(v *time.Time) *HostCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *HostCreate) SetUpdatedAt(v time.Time) *HostCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *HostCreate) SetNillableUpdatedAt(v *time.Time) *HostCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *HostCreate) SetID(v uuid.UUID) *HostCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetSite sets the "site" edge to the Site entity.
func (_c *HostCreate) SetSite(v *Site) *HostCreate {
	return _c.SetSiteID(v.ID)
}

// Mutation returns the HostMutation object of the builder.
func (_c *HostCreate) Mutation() *HostMutation {
	return _c.mutation
}

// Save creates the Host in the database.
func (_c *HostCreate) Save(ctx context.Context) (*Host, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *HostCreate) SaveX(ctx context.Context) *Host {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HostCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HostCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *HostCreate) check() error {
	if _, ok := _c.mutation.HostID(); !ok {
		return &ValidationError{Name: "host_id", err: errors.New(`ent: missing required field "Host.host_id"`)}
	}
	return nil
}

func (_c *HostCreate) sqlSave(ctx context.Context) (*Host, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *HostCreate) createSpec() (*Host, *sqlgraph.CreateSpec) {
	var (
		_node = &Host{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(host.Table, sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.HostID(); ok {
		_spec.SetField(host.FieldHostID, field.TypeString, value)
		_node.HostID = value
	}
	if value, ok := _c.mutation.Hostname(); ok {
		_spec.SetField(host.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(host.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := _c.mutation.EdgeURL(); ok {
		_spec.SetField(host.FieldEdgeURL, field.TypeString, value)
		_node.EdgeURL = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(host.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.LastHeartbeat(); ok {
		_spec.SetField(host.FieldLastHeartbeat, field.TypeTime, value)
		_node.LastHeartbeat = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(host.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(host.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(host.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.SiteTable,
			Columns: []string{host.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SiteID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostCreateBulk is the builder for creating many Host entities in bulk.
type HostCreateBulk struct {
	config
	err      error
	builders []*HostCreate
}

// Save creates the Host entities in the database.
func (_c *HostCreateBulk) Save(ctx context.Context) ([]*Host, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Host, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *HostCreateBulk) SaveX(ctx context.Context) []*Host {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HostCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HostCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
