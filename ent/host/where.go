// Code generated by ent, DO NOT EDIT.

package host

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/balaji-balu/margo-hello-world/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldID, id))
}

// HostID applies equality check predicate on the "host_id" field. It's identical to HostIDEQ.
func HostID(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldHostID, v))
}

// SiteID applies equality check predicate on the "site_id" field. It's identical to SiteIDEQ.
func SiteID(v uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldSiteID, v))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldHostname, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldIPAddress, v))
}

// EdgeURL applies equality check predicate on the "edge_url" field. It's identical to EdgeURLEQ.
func EdgeURL(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldEdgeURL, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldStatus, v))
}

// LastHeartbeat applies equality check predicate on the "last_heartbeat" field. It's identical to LastHeartbeatEQ.
func LastHeartbeat(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldLastHeartbeat, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldUpdatedAt, v))
}

// HostIDEQ applies the EQ predicate on the "host_id" field.
func HostIDEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldHostID, v))
}

// HostIDNEQ applies the NEQ predicate on the "host_id" field.
func HostIDNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldHostID, v))
}

// HostIDIn applies the In predicate on the "host_id" field.
func HostIDIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldHostID, vs...))
}

// HostIDNotIn applies the NotIn predicate on the "host_id" field.
func HostIDNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldHostID, vs...))
}

// HostIDGT applies the GT predicate on the "host_id" field.
func HostIDGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldHostID, v))
}

// HostIDGTE applies the GTE predicate on the "host_id" field.
func HostIDGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldHostID, v))
}

// HostIDLT applies the LT predicate on the "host_id" field.
func HostIDLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldHostID, v))
}

// HostIDLTE applies the LTE predicate on the "host_id" field.
func HostIDLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldHostID, v))
}

// HostIDContains applies the Contains predicate on the "host_id" field.
func HostIDContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldHostID, v))
}

// HostIDHasPrefix applies the HasPrefix predicate on the "host_id" field.
func HostIDHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldHostID, v))
}

// HostIDHasSuffix applies the HasSuffix predicate on the "host_id" field.
func HostIDHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldHostID, v))
}

// HostIDEqualFold applies the EqualFold predicate on the "host_id" field.
func HostIDEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldHostID, v))
}

// HostIDContainsFold applies the ContainsFold predicate on the "host_id" field.
func HostIDContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldHostID, v))
}

// SiteIDEQ applies the EQ predicate on the "site_id" field.
func SiteIDEQ(v uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldSiteID, v))
}

// SiteIDNEQ applies the NEQ predicate on the "site_id" field.
func SiteIDNEQ(v uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldSiteID, v))
}

// SiteIDIn applies the In predicate on the "site_id" field.
func SiteIDIn(vs ...uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldSiteID, vs...))
}

// SiteIDNotIn applies the NotIn predicate on the "site_id" field.
func SiteIDNotIn(vs ...uuid.UUID) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldSiteID, vs...))
}

// SiteIDIsNil applies the IsNil predicate on the "site_id" field.
func SiteIDIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldSiteID))
}

// SiteIDNotNil applies the NotNil predicate on the "site_id" field.
func SiteIDNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldSiteID))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameIsNil applies the IsNil predicate on the "hostname" field.
func HostnameIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldHostname))
}

// HostnameNotNil applies the NotNil predicate on the "hostname" field.
func HostnameNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldHostname))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldHostname, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldIPAddress, v))
}

// EdgeURLEQ applies the EQ predicate on the "edge_url" field.
func EdgeURLEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldEdgeURL, v))
}

// EdgeURLNEQ applies the NEQ predicate on the "edge_url" field.
func EdgeURLNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldEdgeURL, v))
}

// EdgeURLIn applies the In predicate on the "edge_url" field.
func EdgeURLIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldEdgeURL, vs...))
}

// EdgeURLNotIn applies the NotIn predicate on the "edge_url" field.
func EdgeURLNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldEdgeURL, vs...))
}

// EdgeURLGT applies the GT predicate on the "edge_url" field.
func EdgeURLGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldEdgeURL, v))
}

// EdgeURLGTE applies the GTE predicate on the "edge_url" field.
func EdgeURLGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldEdgeURL, v))
}

// EdgeURLLT applies the LT predicate on the "edge_url" field.
func EdgeURLLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldEdgeURL, v))
}

// EdgeURLLTE applies the LTE predicate on the "edge_url" field.
func EdgeURLLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldEdgeURL, v))
}

// EdgeURLContains applies the Contains predicate on the "edge_url" field.
func EdgeURLContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldEdgeURL, v))
}

// EdgeURLHasPrefix applies the HasPrefix predicate on the "edge_url" field.
func EdgeURLHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldEdgeURL, v))
}

// EdgeURLHasSuffix applies the HasSuffix predicate on the "edge_url" field.
func EdgeURLHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldEdgeURL, v))
}

// EdgeURLIsNil applies the IsNil predicate on the "edge_url" field.
func EdgeURLIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldEdgeURL))
}

// EdgeURLNotNil applies the NotNil predicate on the "edge_url" field.
func EdgeURLNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldEdgeURL))
}

// EdgeURLEqualFold applies the EqualFold predicate on the "edge_url" field.
func EdgeURLEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldEdgeURL, v))
}

// EdgeURLContainsFold applies the ContainsFold predicate on the "edge_url" field.
func EdgeURLContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldEdgeURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldStatus, v))
}

// LastHeartbeatEQ applies the EQ predicate on the "last_heartbeat" field.
func LastHeartbeatEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatNEQ applies the NEQ predicate on the "last_heartbeat" field.
func LastHeartbeatNEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatIn applies the In predicate on the "last_heartbeat" field.
func LastHeartbeatIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatNotIn applies the NotIn predicate on the "last_heartbeat" field.
func LastHeartbeatNotIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatGT applies the GT predicate on the "last_heartbeat" field.
func LastHeartbeatGT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldLastHeartbeat, v))
}

// LastHeartbeatGTE applies the GTE predicate on the "last_heartbeat" field.
func LastHeartbeatGTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldLastHeartbeat, v))
}

// LastHeartbeatLT applies the LT predicate on the "last_heartbeat" field.
func LastHeartbeatLT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldLastHeartbeat, v))
}

// LastHeartbeatLTE applies the LTE predicate on the "last_heartbeat" field.
func LastHeartbeatLTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldLastHeartbeat, v))
}

// LastHeartbeatIsNil applies the IsNil predicate on the "last_heartbeat" field.
func LastHeartbeatIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldLastHeartbeat))
}

// LastHeartbeatNotNil applies the NotNil predicate on the "last_heartbeat" field.
func LastHeartbeatNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldLastHeartbeat))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldUpdatedAt))
}

// HasSite applies the HasEdge predicate on the "site" edge.
func HasSite() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SiteTable, SiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiteWith applies the HasEdge predicate on the "site" edge with a given conditions (other predicates).
func HasSiteWith(preds ...predicate.Site) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := newSiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Host) predicate.Host {
	return predicate.Host(sql.NotPredicates(p))
}
