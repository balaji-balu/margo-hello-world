// Code generated by ent, DO NOT EDIT.

package host

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the host type in the database.
	Label = "host"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHostID holds the string denoting the host_id field in the database.
	FieldHostID = "host_id"
	// FieldSiteID holds the string denoting the site_id field in the database.
	FieldSiteID = "site_id"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldEdgeURL holds the string denoting the edge_url field in the database.
	FieldEdgeURL = "edge_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLastHeartbeat holds the string denoting the last_heartbeat field in the database.
	FieldLastHeartbeat = "last_heartbeat"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// Table holds the table name of the host in the database.
	Table = "host"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "host"
	// SiteInverseTable is the table name for the Site entity.
	// It exists in this package in order to avoid circular dependency with the "site" package.
	SiteInverseTable = "site"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "site_id"
)

// Columns holds all SQL columns for host fields.
var Columns = []string{
	FieldID,
	FieldHostID,
	FieldSiteID,
	FieldHostname,
	FieldIPAddress,
	FieldEdgeURL,
	FieldStatus,
	FieldLastHeartbeat,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Host queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHostID orders the results by the host_id field.
func ByHostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostID, opts...).ToFunc()
}

// BySiteID orders the results by the site_id field.
func BySiteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSiteID, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByEdgeURL orders the results by the edge_url field.
func ByEdgeURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEdgeURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLastHeartbeat orders the results by the last_heartbeat field.
func ByLastHeartbeat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastHeartbeat, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SiteTable, SiteColumn),
	)
}
