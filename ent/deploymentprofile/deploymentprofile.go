// Code generated by ent, DO NOT EDIT.

package deploymentprofile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deploymentprofile type in the database.
	Label = "deployment_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCPUCores holds the string denoting the cpu_cores field in the database.
	FieldCPUCores = "cpu_cores"
	// FieldMemory holds the string denoting the memory field in the database.
	FieldMemory = "memory"
	// FieldStorage holds the string denoting the storage field in the database.
	FieldStorage = "storage"
	// FieldCPUArchitectures holds the string denoting the cpu_architectures field in the database.
	FieldCPUArchitectures = "cpu_architectures"
	// FieldPeripherals holds the string denoting the peripherals field in the database.
	FieldPeripherals = "peripherals"
	// FieldInterfaces holds the string denoting the interfaces field in the database.
	FieldInterfaces = "interfaces"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// EdgeComponents holds the string denoting the components edge name in mutations.
	EdgeComponents = "components"
	// EdgeApplicationDesc holds the string denoting the application_desc edge name in mutations.
	EdgeApplicationDesc = "application_desc"
	// ApplicationDescFieldID holds the string denoting the ID field of the ApplicationDesc.
	ApplicationDescFieldID = "app_id"
	// Table holds the table name of the deploymentprofile in the database.
	Table = "deployment_profile"
	// ComponentsTable is the table that holds the components relation/edge.
	ComponentsTable = "component"
	// ComponentsInverseTable is the table name for the Component entity.
	// It exists in this package in order to avoid circular dependency with the "component" package.
	ComponentsInverseTable = "component"
	// ComponentsColumn is the table column denoting the components relation/edge.
	ComponentsColumn = "deployment_profile_id"
	// ApplicationDescTable is the table that holds the application_desc relation/edge.
	ApplicationDescTable = "deployment_profile"
	// ApplicationDescInverseTable is the table name for the ApplicationDesc entity.
	// It exists in this package in order to avoid circular dependency with the "applicationdesc" package.
	ApplicationDescInverseTable = "application_desc"
	// ApplicationDescColumn is the table column denoting the application_desc relation/edge.
	ApplicationDescColumn = "app_id"
)

// Columns holds all SQL columns for deploymentprofile fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldDescription,
	FieldCPUCores,
	FieldMemory,
	FieldStorage,
	FieldCPUArchitectures,
	FieldPeripherals,
	FieldInterfaces,
	FieldAppID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the DeploymentProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCPUCores orders the results by the cpu_cores field.
func ByCPUCores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUCores, opts...).ToFunc()
}

// ByMemory orders the results by the memory field.
func ByMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemory, opts...).ToFunc()
}

// ByStorage orders the results by the storage field.
func ByStorage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorage, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByComponentsCount orders the results by components count.
func ByComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newComponentsStep(), opts...)
	}
}

// ByComponents orders the results by components terms.
func ByComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApplicationDescField orders the results by application_desc field.
func ByApplicationDescField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationDescStep(), sql.OrderByField(field, opts...))
	}
}
func newComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ComponentsTable, ComponentsColumn),
	)
}
func newApplicationDescStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationDescInverseTable, ApplicationDescFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicationDescTable, ApplicationDescColumn),
	)
}
