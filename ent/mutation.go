// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/balaji/hello/ent/applicationdesc"
	"github.com/balaji/hello/ent/component"
	"github.com/balaji/hello/ent/deploymentprofile"
	"github.com/balaji/hello/ent/host"
	"github.com/balaji/hello/ent/orchestrator"
	"github.com/balaji/hello/ent/predicate"
	"github.com/balaji/hello/ent/site"
	"github.com/balaji/hello/pkg/application"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApplicationDesc   = "ApplicationDesc"
	TypeComponent         = "Component"
	TypeDeploymentProfile = "DeploymentProfile"
	TypeHost              = "Host"
	TypeOrchestrator      = "Orchestrator"
	TypeSite              = "Site"
	TypeUser              = "User"
)

// ApplicationDescMutation represents an operation that mutates the ApplicationDesc nodes in the graph.
type ApplicationDescMutation struct {
	config
	op                         Op
	typ                        string
	id                         *string
	name                       *string
	vendor                     *string
	version                    *string
	category                   *string
	description                *string
	icon                       *string
	artifacturl                *string
	site                       *string
	tag_line                   *string
	tags                       *[]string
	appendtags                 []string
	published                  *string
	clearedFields              map[string]struct{}
	deployment_profiles        map[string]struct{}
	removeddeployment_profiles map[string]struct{}
	cleareddeployment_profiles bool
	done                       bool
	oldValue                   func(context.Context) (*ApplicationDesc, error)
	predicates                 []predicate.ApplicationDesc
}

var _ ent.Mutation = (*ApplicationDescMutation)(nil)

// applicationdescOption allows management of the mutation configuration using functional options.
type applicationdescOption func(*ApplicationDescMutation)

// newApplicationDescMutation creates new mutation for the ApplicationDesc entity.
func newApplicationDescMutation(c config, op Op, opts ...applicationdescOption) *ApplicationDescMutation {
	m := &ApplicationDescMutation{
		config:        c,
		op:            op,
		typ:           TypeApplicationDesc,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationDescID sets the ID field of the mutation.
func withApplicationDescID(id string) applicationdescOption {
	return func(m *ApplicationDescMutation) {
		var (
			err   error
			once  sync.Once
			value *ApplicationDesc
		)
		m.oldValue = func(ctx context.Context) (*ApplicationDesc, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApplicationDesc.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplicationDesc sets the old ApplicationDesc of the mutation.
func withApplicationDesc(node *ApplicationDesc) applicationdescOption {
	return func(m *ApplicationDescMutation) {
		m.oldValue = func(context.Context) (*ApplicationDesc, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationDescMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationDescMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ApplicationDesc entities.
func (m *ApplicationDescMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationDescMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationDescMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApplicationDesc.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ApplicationDescMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ApplicationDescMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ApplicationDescMutation) ClearName() {
	m.name = nil
	m.clearedFields[applicationdesc.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ApplicationDescMutation) NameCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ApplicationDescMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, applicationdesc.FieldName)
}

// SetVendor sets the "vendor" field.
func (m *ApplicationDescMutation) SetVendor(s string) {
	m.vendor = &s
}

// Vendor returns the value of the "vendor" field in the mutation.
func (m *ApplicationDescMutation) Vendor() (r string, exists bool) {
	v := m.vendor
	if v == nil {
		return
	}
	return *v, true
}

// OldVendor returns the old "vendor" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldVendor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVendor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVendor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendor: %w", err)
	}
	return oldValue.Vendor, nil
}

// ClearVendor clears the value of the "vendor" field.
func (m *ApplicationDescMutation) ClearVendor() {
	m.vendor = nil
	m.clearedFields[applicationdesc.FieldVendor] = struct{}{}
}

// VendorCleared returns if the "vendor" field was cleared in this mutation.
func (m *ApplicationDescMutation) VendorCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldVendor]
	return ok
}

// ResetVendor resets all changes to the "vendor" field.
func (m *ApplicationDescMutation) ResetVendor() {
	m.vendor = nil
	delete(m.clearedFields, applicationdesc.FieldVendor)
}

// SetVersion sets the "version" field.
func (m *ApplicationDescMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *ApplicationDescMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ClearVersion clears the value of the "version" field.
func (m *ApplicationDescMutation) ClearVersion() {
	m.version = nil
	m.clearedFields[applicationdesc.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *ApplicationDescMutation) VersionCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *ApplicationDescMutation) ResetVersion() {
	m.version = nil
	delete(m.clearedFields, applicationdesc.FieldVersion)
}

// SetCategory sets the "category" field.
func (m *ApplicationDescMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *ApplicationDescMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ClearCategory clears the value of the "category" field.
func (m *ApplicationDescMutation) ClearCategory() {
	m.category = nil
	m.clearedFields[applicationdesc.FieldCategory] = struct{}{}
}

// CategoryCleared returns if the "category" field was cleared in this mutation.
func (m *ApplicationDescMutation) CategoryCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldCategory]
	return ok
}

// ResetCategory resets all changes to the "category" field.
func (m *ApplicationDescMutation) ResetCategory() {
	m.category = nil
	delete(m.clearedFields, applicationdesc.FieldCategory)
}

// SetDescription sets the "description" field.
func (m *ApplicationDescMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ApplicationDescMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ApplicationDescMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[applicationdesc.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ApplicationDescMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ApplicationDescMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, applicationdesc.FieldDescription)
}

// SetIcon sets the "icon" field.
func (m *ApplicationDescMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *ApplicationDescMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *ApplicationDescMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[applicationdesc.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *ApplicationDescMutation) IconCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *ApplicationDescMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, applicationdesc.FieldIcon)
}

// SetArtifacturl sets the "artifacturl" field.
func (m *ApplicationDescMutation) SetArtifacturl(s string) {
	m.artifacturl = &s
}

// Artifacturl returns the value of the "artifacturl" field in the mutation.
func (m *ApplicationDescMutation) Artifacturl() (r string, exists bool) {
	v := m.artifacturl
	if v == nil {
		return
	}
	return *v, true
}

// OldArtifacturl returns the old "artifacturl" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldArtifacturl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArtifacturl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArtifacturl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArtifacturl: %w", err)
	}
	return oldValue.Artifacturl, nil
}

// ClearArtifacturl clears the value of the "artifacturl" field.
func (m *ApplicationDescMutation) ClearArtifacturl() {
	m.artifacturl = nil
	m.clearedFields[applicationdesc.FieldArtifacturl] = struct{}{}
}

// ArtifacturlCleared returns if the "artifacturl" field was cleared in this mutation.
func (m *ApplicationDescMutation) ArtifacturlCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldArtifacturl]
	return ok
}

// ResetArtifacturl resets all changes to the "artifacturl" field.
func (m *ApplicationDescMutation) ResetArtifacturl() {
	m.artifacturl = nil
	delete(m.clearedFields, applicationdesc.FieldArtifacturl)
}

// SetSite sets the "site" field.
func (m *ApplicationDescMutation) SetSite(s string) {
	m.site = &s
}

// Site returns the value of the "site" field in the mutation.
func (m *ApplicationDescMutation) Site() (r string, exists bool) {
	v := m.site
	if v == nil {
		return
	}
	return *v, true
}

// OldSite returns the old "site" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldSite(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSite: %w", err)
	}
	return oldValue.Site, nil
}

// ClearSite clears the value of the "site" field.
func (m *ApplicationDescMutation) ClearSite() {
	m.site = nil
	m.clearedFields[applicationdesc.FieldSite] = struct{}{}
}

// SiteCleared returns if the "site" field was cleared in this mutation.
func (m *ApplicationDescMutation) SiteCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldSite]
	return ok
}

// ResetSite resets all changes to the "site" field.
func (m *ApplicationDescMutation) ResetSite() {
	m.site = nil
	delete(m.clearedFields, applicationdesc.FieldSite)
}

// SetTagLine sets the "tag_line" field.
func (m *ApplicationDescMutation) SetTagLine(s string) {
	m.tag_line = &s
}

// TagLine returns the value of the "tag_line" field in the mutation.
func (m *ApplicationDescMutation) TagLine() (r string, exists bool) {
	v := m.tag_line
	if v == nil {
		return
	}
	return *v, true
}

// OldTagLine returns the old "tag_line" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldTagLine(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTagLine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTagLine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTagLine: %w", err)
	}
	return oldValue.TagLine, nil
}

// ClearTagLine clears the value of the "tag_line" field.
func (m *ApplicationDescMutation) ClearTagLine() {
	m.tag_line = nil
	m.clearedFields[applicationdesc.FieldTagLine] = struct{}{}
}

// TagLineCleared returns if the "tag_line" field was cleared in this mutation.
func (m *ApplicationDescMutation) TagLineCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldTagLine]
	return ok
}

// ResetTagLine resets all changes to the "tag_line" field.
func (m *ApplicationDescMutation) ResetTagLine() {
	m.tag_line = nil
	delete(m.clearedFields, applicationdesc.FieldTagLine)
}

// SetTags sets the "tags" field.
func (m *ApplicationDescMutation) SetTags(s []string) {
	m.tags = &s
	m.appendtags = nil
}

// Tags returns the value of the "tags" field in the mutation.
func (m *ApplicationDescMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// AppendTags adds s to the "tags" field.
func (m *ApplicationDescMutation) AppendTags(s []string) {
	m.appendtags = append(m.appendtags, s...)
}

// AppendedTags returns the list of values that were appended to the "tags" field in this mutation.
func (m *ApplicationDescMutation) AppendedTags() ([]string, bool) {
	if len(m.appendtags) == 0 {
		return nil, false
	}
	return m.appendtags, true
}

// ClearTags clears the value of the "tags" field.
func (m *ApplicationDescMutation) ClearTags() {
	m.tags = nil
	m.appendtags = nil
	m.clearedFields[applicationdesc.FieldTags] = struct{}{}
}

// TagsCleared returns if the "tags" field was cleared in this mutation.
func (m *ApplicationDescMutation) TagsCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldTags]
	return ok
}

// ResetTags resets all changes to the "tags" field.
func (m *ApplicationDescMutation) ResetTags() {
	m.tags = nil
	m.appendtags = nil
	delete(m.clearedFields, applicationdesc.FieldTags)
}

// SetPublished sets the "published" field.
func (m *ApplicationDescMutation) SetPublished(s string) {
	m.published = &s
}

// Published returns the value of the "published" field in the mutation.
func (m *ApplicationDescMutation) Published() (r string, exists bool) {
	v := m.published
	if v == nil {
		return
	}
	return *v, true
}

// OldPublished returns the old "published" field's value of the ApplicationDesc entity.
// If the ApplicationDesc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationDescMutation) OldPublished(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublished: %w", err)
	}
	return oldValue.Published, nil
}

// ClearPublished clears the value of the "published" field.
func (m *ApplicationDescMutation) ClearPublished() {
	m.published = nil
	m.clearedFields[applicationdesc.FieldPublished] = struct{}{}
}

// PublishedCleared returns if the "published" field was cleared in this mutation.
func (m *ApplicationDescMutation) PublishedCleared() bool {
	_, ok := m.clearedFields[applicationdesc.FieldPublished]
	return ok
}

// ResetPublished resets all changes to the "published" field.
func (m *ApplicationDescMutation) ResetPublished() {
	m.published = nil
	delete(m.clearedFields, applicationdesc.FieldPublished)
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by ids.
func (m *ApplicationDescMutation) AddDeploymentProfileIDs(ids ...string) {
	if m.deployment_profiles == nil {
		m.deployment_profiles = make(map[string]struct{})
	}
	for i := range ids {
		m.deployment_profiles[ids[i]] = struct{}{}
	}
}

// ClearDeploymentProfiles clears the "deployment_profiles" edge to the DeploymentProfile entity.
func (m *ApplicationDescMutation) ClearDeploymentProfiles() {
	m.cleareddeployment_profiles = true
}

// DeploymentProfilesCleared reports if the "deployment_profiles" edge to the DeploymentProfile entity was cleared.
func (m *ApplicationDescMutation) DeploymentProfilesCleared() bool {
	return m.cleareddeployment_profiles
}

// RemoveDeploymentProfileIDs removes the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (m *ApplicationDescMutation) RemoveDeploymentProfileIDs(ids ...string) {
	if m.removeddeployment_profiles == nil {
		m.removeddeployment_profiles = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.deployment_profiles, ids[i])
		m.removeddeployment_profiles[ids[i]] = struct{}{}
	}
}

// RemovedDeploymentProfiles returns the removed IDs of the "deployment_profiles" edge to the DeploymentProfile entity.
func (m *ApplicationDescMutation) RemovedDeploymentProfilesIDs() (ids []string) {
	for id := range m.removeddeployment_profiles {
		ids = append(ids, id)
	}
	return
}

// DeploymentProfilesIDs returns the "deployment_profiles" edge IDs in the mutation.
func (m *ApplicationDescMutation) DeploymentProfilesIDs() (ids []string) {
	for id := range m.deployment_profiles {
		ids = append(ids, id)
	}
	return
}

// ResetDeploymentProfiles resets all changes to the "deployment_profiles" edge.
func (m *ApplicationDescMutation) ResetDeploymentProfiles() {
	m.deployment_profiles = nil
	m.cleareddeployment_profiles = false
	m.removeddeployment_profiles = nil
}

// Where appends a list predicates to the ApplicationDescMutation builder.
func (m *ApplicationDescMutation) Where(ps ...predicate.ApplicationDesc) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApplicationDescMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApplicationDescMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ApplicationDesc, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApplicationDescMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApplicationDescMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ApplicationDesc).
func (m *ApplicationDescMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationDescMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.name != nil {
		fields = append(fields, applicationdesc.FieldName)
	}
	if m.vendor != nil {
		fields = append(fields, applicationdesc.FieldVendor)
	}
	if m.version != nil {
		fields = append(fields, applicationdesc.FieldVersion)
	}
	if m.category != nil {
		fields = append(fields, applicationdesc.FieldCategory)
	}
	if m.description != nil {
		fields = append(fields, applicationdesc.FieldDescription)
	}
	if m.icon != nil {
		fields = append(fields, applicationdesc.FieldIcon)
	}
	if m.artifacturl != nil {
		fields = append(fields, applicationdesc.FieldArtifacturl)
	}
	if m.site != nil {
		fields = append(fields, applicationdesc.FieldSite)
	}
	if m.tag_line != nil {
		fields = append(fields, applicationdesc.FieldTagLine)
	}
	if m.tags != nil {
		fields = append(fields, applicationdesc.FieldTags)
	}
	if m.published != nil {
		fields = append(fields, applicationdesc.FieldPublished)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationDescMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case applicationdesc.FieldName:
		return m.Name()
	case applicationdesc.FieldVendor:
		return m.Vendor()
	case applicationdesc.FieldVersion:
		return m.Version()
	case applicationdesc.FieldCategory:
		return m.Category()
	case applicationdesc.FieldDescription:
		return m.Description()
	case applicationdesc.FieldIcon:
		return m.Icon()
	case applicationdesc.FieldArtifacturl:
		return m.Artifacturl()
	case applicationdesc.FieldSite:
		return m.Site()
	case applicationdesc.FieldTagLine:
		return m.TagLine()
	case applicationdesc.FieldTags:
		return m.Tags()
	case applicationdesc.FieldPublished:
		return m.Published()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationDescMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case applicationdesc.FieldName:
		return m.OldName(ctx)
	case applicationdesc.FieldVendor:
		return m.OldVendor(ctx)
	case applicationdesc.FieldVersion:
		return m.OldVersion(ctx)
	case applicationdesc.FieldCategory:
		return m.OldCategory(ctx)
	case applicationdesc.FieldDescription:
		return m.OldDescription(ctx)
	case applicationdesc.FieldIcon:
		return m.OldIcon(ctx)
	case applicationdesc.FieldArtifacturl:
		return m.OldArtifacturl(ctx)
	case applicationdesc.FieldSite:
		return m.OldSite(ctx)
	case applicationdesc.FieldTagLine:
		return m.OldTagLine(ctx)
	case applicationdesc.FieldTags:
		return m.OldTags(ctx)
	case applicationdesc.FieldPublished:
		return m.OldPublished(ctx)
	}
	return nil, fmt.Errorf("unknown ApplicationDesc field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationDescMutation) SetField(name string, value ent.Value) error {
	switch name {
	case applicationdesc.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case applicationdesc.FieldVendor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendor(v)
		return nil
	case applicationdesc.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case applicationdesc.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case applicationdesc.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case applicationdesc.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case applicationdesc.FieldArtifacturl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArtifacturl(v)
		return nil
	case applicationdesc.FieldSite:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSite(v)
		return nil
	case applicationdesc.FieldTagLine:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTagLine(v)
		return nil
	case applicationdesc.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case applicationdesc.FieldPublished:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublished(v)
		return nil
	}
	return fmt.Errorf("unknown ApplicationDesc field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationDescMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationDescMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationDescMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ApplicationDesc numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationDescMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(applicationdesc.FieldName) {
		fields = append(fields, applicationdesc.FieldName)
	}
	if m.FieldCleared(applicationdesc.FieldVendor) {
		fields = append(fields, applicationdesc.FieldVendor)
	}
	if m.FieldCleared(applicationdesc.FieldVersion) {
		fields = append(fields, applicationdesc.FieldVersion)
	}
	if m.FieldCleared(applicationdesc.FieldCategory) {
		fields = append(fields, applicationdesc.FieldCategory)
	}
	if m.FieldCleared(applicationdesc.FieldDescription) {
		fields = append(fields, applicationdesc.FieldDescription)
	}
	if m.FieldCleared(applicationdesc.FieldIcon) {
		fields = append(fields, applicationdesc.FieldIcon)
	}
	if m.FieldCleared(applicationdesc.FieldArtifacturl) {
		fields = append(fields, applicationdesc.FieldArtifacturl)
	}
	if m.FieldCleared(applicationdesc.FieldSite) {
		fields = append(fields, applicationdesc.FieldSite)
	}
	if m.FieldCleared(applicationdesc.FieldTagLine) {
		fields = append(fields, applicationdesc.FieldTagLine)
	}
	if m.FieldCleared(applicationdesc.FieldTags) {
		fields = append(fields, applicationdesc.FieldTags)
	}
	if m.FieldCleared(applicationdesc.FieldPublished) {
		fields = append(fields, applicationdesc.FieldPublished)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationDescMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationDescMutation) ClearField(name string) error {
	switch name {
	case applicationdesc.FieldName:
		m.ClearName()
		return nil
	case applicationdesc.FieldVendor:
		m.ClearVendor()
		return nil
	case applicationdesc.FieldVersion:
		m.ClearVersion()
		return nil
	case applicationdesc.FieldCategory:
		m.ClearCategory()
		return nil
	case applicationdesc.FieldDescription:
		m.ClearDescription()
		return nil
	case applicationdesc.FieldIcon:
		m.ClearIcon()
		return nil
	case applicationdesc.FieldArtifacturl:
		m.ClearArtifacturl()
		return nil
	case applicationdesc.FieldSite:
		m.ClearSite()
		return nil
	case applicationdesc.FieldTagLine:
		m.ClearTagLine()
		return nil
	case applicationdesc.FieldTags:
		m.ClearTags()
		return nil
	case applicationdesc.FieldPublished:
		m.ClearPublished()
		return nil
	}
	return fmt.Errorf("unknown ApplicationDesc nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationDescMutation) ResetField(name string) error {
	switch name {
	case applicationdesc.FieldName:
		m.ResetName()
		return nil
	case applicationdesc.FieldVendor:
		m.ResetVendor()
		return nil
	case applicationdesc.FieldVersion:
		m.ResetVersion()
		return nil
	case applicationdesc.FieldCategory:
		m.ResetCategory()
		return nil
	case applicationdesc.FieldDescription:
		m.ResetDescription()
		return nil
	case applicationdesc.FieldIcon:
		m.ResetIcon()
		return nil
	case applicationdesc.FieldArtifacturl:
		m.ResetArtifacturl()
		return nil
	case applicationdesc.FieldSite:
		m.ResetSite()
		return nil
	case applicationdesc.FieldTagLine:
		m.ResetTagLine()
		return nil
	case applicationdesc.FieldTags:
		m.ResetTags()
		return nil
	case applicationdesc.FieldPublished:
		m.ResetPublished()
		return nil
	}
	return fmt.Errorf("unknown ApplicationDesc field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationDescMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.deployment_profiles != nil {
		edges = append(edges, applicationdesc.EdgeDeploymentProfiles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationDescMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case applicationdesc.EdgeDeploymentProfiles:
		ids := make([]ent.Value, 0, len(m.deployment_profiles))
		for id := range m.deployment_profiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationDescMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddeployment_profiles != nil {
		edges = append(edges, applicationdesc.EdgeDeploymentProfiles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationDescMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case applicationdesc.EdgeDeploymentProfiles:
		ids := make([]ent.Value, 0, len(m.removeddeployment_profiles))
		for id := range m.removeddeployment_profiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationDescMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddeployment_profiles {
		edges = append(edges, applicationdesc.EdgeDeploymentProfiles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationDescMutation) EdgeCleared(name string) bool {
	switch name {
	case applicationdesc.EdgeDeploymentProfiles:
		return m.cleareddeployment_profiles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationDescMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ApplicationDesc unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationDescMutation) ResetEdge(name string) error {
	switch name {
	case applicationdesc.EdgeDeploymentProfiles:
		m.ResetDeploymentProfiles()
		return nil
	}
	return fmt.Errorf("unknown ApplicationDesc edge %s", name)
}

// ComponentMutation represents an operation that mutates the Component nodes in the graph.
type ComponentMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uint
	name                      *string
	properties                *application.ComponentProperties
	clearedFields             map[string]struct{}
	deployment_profile        *string
	cleareddeployment_profile bool
	done                      bool
	oldValue                  func(context.Context) (*Component, error)
	predicates                []predicate.Component
}

var _ ent.Mutation = (*ComponentMutation)(nil)

// componentOption allows management of the mutation configuration using functional options.
type componentOption func(*ComponentMutation)

// newComponentMutation creates new mutation for the Component entity.
func newComponentMutation(c config, op Op, opts ...componentOption) *ComponentMutation {
	m := &ComponentMutation{
		config:        c,
		op:            op,
		typ:           TypeComponent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComponentID sets the ID field of the mutation.
func withComponentID(id uint) componentOption {
	return func(m *ComponentMutation) {
		var (
			err   error
			once  sync.Once
			value *Component
		)
		m.oldValue = func(ctx context.Context) (*Component, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Component.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComponent sets the old Component of the mutation.
func withComponent(node *Component) componentOption {
	return func(m *ComponentMutation) {
		m.oldValue = func(context.Context) (*Component, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComponentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComponentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Component entities.
func (m *ComponentMutation) SetID(id uint) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComponentMutation) ID() (id uint, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComponentMutation) IDs(ctx context.Context) ([]uint, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Component.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeploymentProfileID sets the "deployment_profile_id" field.
func (m *ComponentMutation) SetDeploymentProfileID(s string) {
	m.deployment_profile = &s
}

// DeploymentProfileID returns the value of the "deployment_profile_id" field in the mutation.
func (m *ComponentMutation) DeploymentProfileID() (r string, exists bool) {
	v := m.deployment_profile
	if v == nil {
		return
	}
	return *v, true
}

// OldDeploymentProfileID returns the old "deployment_profile_id" field's value of the Component entity.
// If the Component object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComponentMutation) OldDeploymentProfileID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeploymentProfileID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeploymentProfileID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeploymentProfileID: %w", err)
	}
	return oldValue.DeploymentProfileID, nil
}

// ClearDeploymentProfileID clears the value of the "deployment_profile_id" field.
func (m *ComponentMutation) ClearDeploymentProfileID() {
	m.deployment_profile = nil
	m.clearedFields[component.FieldDeploymentProfileID] = struct{}{}
}

// DeploymentProfileIDCleared returns if the "deployment_profile_id" field was cleared in this mutation.
func (m *ComponentMutation) DeploymentProfileIDCleared() bool {
	_, ok := m.clearedFields[component.FieldDeploymentProfileID]
	return ok
}

// ResetDeploymentProfileID resets all changes to the "deployment_profile_id" field.
func (m *ComponentMutation) ResetDeploymentProfileID() {
	m.deployment_profile = nil
	delete(m.clearedFields, component.FieldDeploymentProfileID)
}

// SetName sets the "name" field.
func (m *ComponentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ComponentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Component entity.
// If the Component object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComponentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ComponentMutation) ClearName() {
	m.name = nil
	m.clearedFields[component.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ComponentMutation) NameCleared() bool {
	_, ok := m.clearedFields[component.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ComponentMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, component.FieldName)
}

// SetProperties sets the "properties" field.
func (m *ComponentMutation) SetProperties(ap application.ComponentProperties) {
	m.properties = &ap
}

// Properties returns the value of the "properties" field in the mutation.
func (m *ComponentMutation) Properties() (r application.ComponentProperties, exists bool) {
	v := m.properties
	if v == nil {
		return
	}
	return *v, true
}

// OldProperties returns the old "properties" field's value of the Component entity.
// If the Component object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComponentMutation) OldProperties(ctx context.Context) (v application.ComponentProperties, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProperties is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProperties requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProperties: %w", err)
	}
	return oldValue.Properties, nil
}

// ClearProperties clears the value of the "properties" field.
func (m *ComponentMutation) ClearProperties() {
	m.properties = nil
	m.clearedFields[component.FieldProperties] = struct{}{}
}

// PropertiesCleared returns if the "properties" field was cleared in this mutation.
func (m *ComponentMutation) PropertiesCleared() bool {
	_, ok := m.clearedFields[component.FieldProperties]
	return ok
}

// ResetProperties resets all changes to the "properties" field.
func (m *ComponentMutation) ResetProperties() {
	m.properties = nil
	delete(m.clearedFields, component.FieldProperties)
}

// ClearDeploymentProfile clears the "deployment_profile" edge to the DeploymentProfile entity.
func (m *ComponentMutation) ClearDeploymentProfile() {
	m.cleareddeployment_profile = true
	m.clearedFields[component.FieldDeploymentProfileID] = struct{}{}
}

// DeploymentProfileCleared reports if the "deployment_profile" edge to the DeploymentProfile entity was cleared.
func (m *ComponentMutation) DeploymentProfileCleared() bool {
	return m.DeploymentProfileIDCleared() || m.cleareddeployment_profile
}

// DeploymentProfileIDs returns the "deployment_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeploymentProfileID instead. It exists only for internal usage by the builders.
func (m *ComponentMutation) DeploymentProfileIDs() (ids []string) {
	if id := m.deployment_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDeploymentProfile resets all changes to the "deployment_profile" edge.
func (m *ComponentMutation) ResetDeploymentProfile() {
	m.deployment_profile = nil
	m.cleareddeployment_profile = false
}

// Where appends a list predicates to the ComponentMutation builder.
func (m *ComponentMutation) Where(ps ...predicate.Component) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComponentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComponentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Component, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComponentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComponentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Component).
func (m *ComponentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComponentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.deployment_profile != nil {
		fields = append(fields, component.FieldDeploymentProfileID)
	}
	if m.name != nil {
		fields = append(fields, component.FieldName)
	}
	if m.properties != nil {
		fields = append(fields, component.FieldProperties)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComponentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case component.FieldDeploymentProfileID:
		return m.DeploymentProfileID()
	case component.FieldName:
		return m.Name()
	case component.FieldProperties:
		return m.Properties()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComponentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case component.FieldDeploymentProfileID:
		return m.OldDeploymentProfileID(ctx)
	case component.FieldName:
		return m.OldName(ctx)
	case component.FieldProperties:
		return m.OldProperties(ctx)
	}
	return nil, fmt.Errorf("unknown Component field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComponentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case component.FieldDeploymentProfileID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeploymentProfileID(v)
		return nil
	case component.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case component.FieldProperties:
		v, ok := value.(application.ComponentProperties)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProperties(v)
		return nil
	}
	return fmt.Errorf("unknown Component field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComponentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComponentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComponentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Component numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComponentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(component.FieldDeploymentProfileID) {
		fields = append(fields, component.FieldDeploymentProfileID)
	}
	if m.FieldCleared(component.FieldName) {
		fields = append(fields, component.FieldName)
	}
	if m.FieldCleared(component.FieldProperties) {
		fields = append(fields, component.FieldProperties)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComponentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComponentMutation) ClearField(name string) error {
	switch name {
	case component.FieldDeploymentProfileID:
		m.ClearDeploymentProfileID()
		return nil
	case component.FieldName:
		m.ClearName()
		return nil
	case component.FieldProperties:
		m.ClearProperties()
		return nil
	}
	return fmt.Errorf("unknown Component nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComponentMutation) ResetField(name string) error {
	switch name {
	case component.FieldDeploymentProfileID:
		m.ResetDeploymentProfileID()
		return nil
	case component.FieldName:
		m.ResetName()
		return nil
	case component.FieldProperties:
		m.ResetProperties()
		return nil
	}
	return fmt.Errorf("unknown Component field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComponentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.deployment_profile != nil {
		edges = append(edges, component.EdgeDeploymentProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComponentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case component.EdgeDeploymentProfile:
		if id := m.deployment_profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComponentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComponentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComponentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddeployment_profile {
		edges = append(edges, component.EdgeDeploymentProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComponentMutation) EdgeCleared(name string) bool {
	switch name {
	case component.EdgeDeploymentProfile:
		return m.cleareddeployment_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComponentMutation) ClearEdge(name string) error {
	switch name {
	case component.EdgeDeploymentProfile:
		m.ClearDeploymentProfile()
		return nil
	}
	return fmt.Errorf("unknown Component unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComponentMutation) ResetEdge(name string) error {
	switch name {
	case component.EdgeDeploymentProfile:
		m.ResetDeploymentProfile()
		return nil
	}
	return fmt.Errorf("unknown Component edge %s", name)
}

// DeploymentProfileMutation represents an operation that mutates the DeploymentProfile nodes in the graph.
type DeploymentProfileMutation struct {
	config
	op                      Op
	typ                     string
	id                      *string
	_type                   *string
	description             *string
	cpu_cores               *float64
	addcpu_cores            *float64
	memory                  *string
	storage                 *string
	cpu_architectures       *[]string
	appendcpu_architectures []string
	peripherals             *[]map[string]interface{}
	appendperipherals       []map[string]interface{}
	interfaces              *[]map[string]interface{}
	appendinterfaces        []map[string]interface{}
	clearedFields           map[string]struct{}
	components              map[uint]struct{}
	removedcomponents       map[uint]struct{}
	clearedcomponents       bool
	application_desc        *string
	clearedapplication_desc bool
	done                    bool
	oldValue                func(context.Context) (*DeploymentProfile, error)
	predicates              []predicate.DeploymentProfile
}

var _ ent.Mutation = (*DeploymentProfileMutation)(nil)

// deploymentprofileOption allows management of the mutation configuration using functional options.
type deploymentprofileOption func(*DeploymentProfileMutation)

// newDeploymentProfileMutation creates new mutation for the DeploymentProfile entity.
func newDeploymentProfileMutation(c config, op Op, opts ...deploymentprofileOption) *DeploymentProfileMutation {
	m := &DeploymentProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeDeploymentProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeploymentProfileID sets the ID field of the mutation.
func withDeploymentProfileID(id string) deploymentprofileOption {
	return func(m *DeploymentProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *DeploymentProfile
		)
		m.oldValue = func(ctx context.Context) (*DeploymentProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeploymentProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeploymentProfile sets the old DeploymentProfile of the mutation.
func withDeploymentProfile(node *DeploymentProfile) deploymentprofileOption {
	return func(m *DeploymentProfileMutation) {
		m.oldValue = func(context.Context) (*DeploymentProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeploymentProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeploymentProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DeploymentProfile entities.
func (m *DeploymentProfileMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeploymentProfileMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeploymentProfileMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DeploymentProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *DeploymentProfileMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *DeploymentProfileMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the DeploymentProfile entity.
// If the DeploymentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentProfileMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *DeploymentProfileMutation) ClearType() {
	m._type = nil
	m.clearedFields[deploymentprofile.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *DeploymentProfileMutation) TypeCleared() bool {
	_, ok := m.clearedFields[deploymentprofile.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *DeploymentProfileMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, deploymentprofile.FieldType)
}

// SetDescription sets the "description" field.
func (m *DeploymentProfileMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DeploymentProfileMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the DeploymentProfile entity.
// If the DeploymentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentProfileMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *DeploymentProfileMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[deploymentprofile.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *DeploymentProfileMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[deploymentprofile.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *DeploymentProfileMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, deploymentprofile.FieldDescription)
}

// SetCPUCores sets the "cpu_cores" field.
func (m *DeploymentProfileMutation) SetCPUCores(f float64) {
	m.cpu_cores = &f
	m.addcpu_cores = nil
}

// CPUCores returns the value of the "cpu_cores" field in the mutation.
func (m *DeploymentProfileMutation) CPUCores() (r float64, exists bool) {
	v := m.cpu_cores
	if v == nil {
		return
	}
	return *v, true
}

// OldCPUCores returns the old "cpu_cores" field's value of the DeploymentProfile entity.
// If the DeploymentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentProfileMutation) OldCPUCores(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPUCores is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPUCores requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPUCores: %w", err)
	}
	return oldValue.CPUCores, nil
}

// AddCPUCores adds f to the "cpu_cores" field.
func (m *DeploymentProfileMutation) AddCPUCores(f float64) {
	if m.addcpu_cores != nil {
		*m.addcpu_cores += f
	} else {
		m.addcpu_cores = &f
	}
}

// AddedCPUCores returns the value that was added to the "cpu_cores" field in this mutation.
func (m *DeploymentProfileMutation) AddedCPUCores() (r float64, exists bool) {
	v := m.addcpu_cores
	if v == nil {
		return
	}
	return *v, true
}

// ClearCPUCores clears the value of the "cpu_cores" field.
func (m *DeploymentProfileMutation) ClearCPUCores() {
	m.cpu_cores = nil
	m.addcpu_cores = nil
	m.clearedFields[deploymentprofile.FieldCPUCores] = struct{}{}
}

// CPUCoresCleared returns if the "cpu_cores" field was cleared in this mutation.
func (m *DeploymentProfileMutation) CPUCoresCleared() bool {
	_, ok := m.clearedFields[deploymentprofile.FieldCPUCores]
	return ok
}

// ResetCPUCores resets all changes to the "cpu_cores" field.
func (m *DeploymentProfileMutation) ResetCPUCores() {
	m.cpu_cores = nil
	m.addcpu_cores = nil
	delete(m.clearedFields, deploymentprofile.FieldCPUCores)
}

// SetMemory sets the "memory" field.
func (m *DeploymentProfileMutation) SetMemory(s string) {
	m.memory = &s
}

// Memory returns the value of the "memory" field in the mutation.
func (m *DeploymentProfileMutation) Memory() (r string, exists bool) {
	v := m.memory
	if v == nil {
		return
	}
	return *v, true
}

// OldMemory returns the old "memory" field's value of the DeploymentProfile entity.
// If the DeploymentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentProfileMutation) OldMemory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemory: %w", err)
	}
	return oldValue.Memory, nil
}

// ClearMemory clears the value of the "memory" field.
func (m *DeploymentProfileMutation) ClearMemory() {
	m.memory = nil
	m.clearedFields[deploymentprofile.FieldMemory] = struct{}{}
}

// MemoryCleared returns if the "memory" field was cleared in this mutation.
func (m *DeploymentProfileMutation) MemoryCleared() bool {
	_, ok := m.clearedFields[deploymentprofile.FieldMemory]
	return ok
}

// ResetMemory resets all changes to the "memory" field.
func (m *DeploymentProfileMutation) ResetMemory() {
	m.memory = nil
	delete(m.clearedFields, deploymentprofile.FieldMemory)
}

// SetStorage sets the "storage" field.
func (m *DeploymentProfileMutation) SetStorage(s string) {
	m.storage = &s
}

// Storage returns the value of the "storage" field in the mutation.
func (m *DeploymentProfileMutation) Storage() (r string, exists bool) {
	v := m.storage
	if v == nil {
		return
	}
	return *v, true
}

// OldStorage returns the old "storage" field's value of the DeploymentProfile entity.
// If the DeploymentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentProfileMutation) OldStorage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorage: %w", err)
	}
	return oldValue.Storage, nil
}

// ClearStorage clears the value of the "storage" field.
func (m *DeploymentProfileMutation) ClearStorage() {
	m.storage = nil
	m.clearedFields[deploymentprofile.FieldStorage] = struct{}{}
}

// StorageCleared returns if the "storage" field was cleared in this mutation.
func (m *DeploymentProfileMutation) StorageCleared() bool {
	_, ok := m.clearedFields[deploymentprofile.FieldStorage]
	return ok
}

// ResetStorage resets all changes to the "storage" field.
func (m *DeploymentProfileMutation) ResetStorage() {
	m.storage = nil
	delete(m.clearedFields, deploymentprofile.FieldStorage)
}

// SetCPUArchitectures sets the "cpu_architectures" field.
func (m *DeploymentProfileMutation) SetCPUArchitectures(s []string) {
	m.cpu_architectures = &s
	m.appendcpu_architectures = nil
}

// CPUArchitectures returns the value of the "cpu_architectures" field in the mutation.
func (m *DeploymentProfileMutation) CPUArchitectures() (r []string, exists bool) {
	v := m.cpu_architectures
	if v == nil {
		return
	}
	return *v, true
}

// OldCPUArchitectures returns the old "cpu_architectures" field's value of the DeploymentProfile entity.
// If the DeploymentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentProfileMutation) OldCPUArchitectures(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPUArchitectures is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPUArchitectures requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPUArchitectures: %w", err)
	}
	return oldValue.CPUArchitectures, nil
}

// AppendCPUArchitectures adds s to the "cpu_architectures" field.
func (m *DeploymentProfileMutation) AppendCPUArchitectures(s []string) {
	m.appendcpu_architectures = append(m.appendcpu_architectures, s...)
}

// AppendedCPUArchitectures returns the list of values that were appended to the "cpu_architectures" field in this mutation.
func (m *DeploymentProfileMutation) AppendedCPUArchitectures() ([]string, bool) {
	if len(m.appendcpu_architectures) == 0 {
		return nil, false
	}
	return m.appendcpu_architectures, true
}

// ClearCPUArchitectures clears the value of the "cpu_architectures" field.
func (m *DeploymentProfileMutation) ClearCPUArchitectures() {
	m.cpu_architectures = nil
	m.appendcpu_architectures = nil
	m.clearedFields[deploymentprofile.FieldCPUArchitectures] = struct{}{}
}

// CPUArchitecturesCleared returns if the "cpu_architectures" field was cleared in this mutation.
func (m *DeploymentProfileMutation) CPUArchitecturesCleared() bool {
	_, ok := m.clearedFields[deploymentprofile.FieldCPUArchitectures]
	return ok
}

// ResetCPUArchitectures resets all changes to the "cpu_architectures" field.
func (m *DeploymentProfileMutation) ResetCPUArchitectures() {
	m.cpu_architectures = nil
	m.appendcpu_architectures = nil
	delete(m.clearedFields, deploymentprofile.FieldCPUArchitectures)
}

// SetPeripherals sets the "peripherals" field.
func (m *DeploymentProfileMutation) SetPeripherals(value []map[string]interface{}) {
	m.peripherals = &value
	m.appendperipherals = nil
}

// Peripherals returns the value of the "peripherals" field in the mutation.
func (m *DeploymentProfileMutation) Peripherals() (r []map[string]interface{}, exists bool) {
	v := m.peripherals
	if v == nil {
		return
	}
	return *v, true
}

// OldPeripherals returns the old "peripherals" field's value of the DeploymentProfile entity.
// If the DeploymentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentProfileMutation) OldPeripherals(ctx context.Context) (v []map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeripherals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeripherals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeripherals: %w", err)
	}
	return oldValue.Peripherals, nil
}

// AppendPeripherals adds value to the "peripherals" field.
func (m *DeploymentProfileMutation) AppendPeripherals(value []map[string]interface{}) {
	m.appendperipherals = append(m.appendperipherals, value...)
}

// AppendedPeripherals returns the list of values that were appended to the "peripherals" field in this mutation.
func (m *DeploymentProfileMutation) AppendedPeripherals() ([]map[string]interface{}, bool) {
	if len(m.appendperipherals) == 0 {
		return nil, false
	}
	return m.appendperipherals, true
}

// ClearPeripherals clears the value of the "peripherals" field.
func (m *DeploymentProfileMutation) ClearPeripherals() {
	m.peripherals = nil
	m.appendperipherals = nil
	m.clearedFields[deploymentprofile.FieldPeripherals] = struct{}{}
}

// PeripheralsCleared returns if the "peripherals" field was cleared in this mutation.
func (m *DeploymentProfileMutation) PeripheralsCleared() bool {
	_, ok := m.clearedFields[deploymentprofile.FieldPeripherals]
	return ok
}

// ResetPeripherals resets all changes to the "peripherals" field.
func (m *DeploymentProfileMutation) ResetPeripherals() {
	m.peripherals = nil
	m.appendperipherals = nil
	delete(m.clearedFields, deploymentprofile.FieldPeripherals)
}

// SetInterfaces sets the "interfaces" field.
func (m *DeploymentProfileMutation) SetInterfaces(value []map[string]interface{}) {
	m.interfaces = &value
	m.appendinterfaces = nil
}

// Interfaces returns the value of the "interfaces" field in the mutation.
func (m *DeploymentProfileMutation) Interfaces() (r []map[string]interface{}, exists bool) {
	v := m.interfaces
	if v == nil {
		return
	}
	return *v, true
}

// OldInterfaces returns the old "interfaces" field's value of the DeploymentProfile entity.
// If the DeploymentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentProfileMutation) OldInterfaces(ctx context.Context) (v []map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInterfaces is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInterfaces requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInterfaces: %w", err)
	}
	return oldValue.Interfaces, nil
}

// AppendInterfaces adds value to the "interfaces" field.
func (m *DeploymentProfileMutation) AppendInterfaces(value []map[string]interface{}) {
	m.appendinterfaces = append(m.appendinterfaces, value...)
}

// AppendedInterfaces returns the list of values that were appended to the "interfaces" field in this mutation.
func (m *DeploymentProfileMutation) AppendedInterfaces() ([]map[string]interface{}, bool) {
	if len(m.appendinterfaces) == 0 {
		return nil, false
	}
	return m.appendinterfaces, true
}

// ClearInterfaces clears the value of the "interfaces" field.
func (m *DeploymentProfileMutation) ClearInterfaces() {
	m.interfaces = nil
	m.appendinterfaces = nil
	m.clearedFields[deploymentprofile.FieldInterfaces] = struct{}{}
}

// InterfacesCleared returns if the "interfaces" field was cleared in this mutation.
func (m *DeploymentProfileMutation) InterfacesCleared() bool {
	_, ok := m.clearedFields[deploymentprofile.FieldInterfaces]
	return ok
}

// ResetInterfaces resets all changes to the "interfaces" field.
func (m *DeploymentProfileMutation) ResetInterfaces() {
	m.interfaces = nil
	m.appendinterfaces = nil
	delete(m.clearedFields, deploymentprofile.FieldInterfaces)
}

// SetAppID sets the "app_id" field.
func (m *DeploymentProfileMutation) SetAppID(s string) {
	m.application_desc = &s
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *DeploymentProfileMutation) AppID() (r string, exists bool) {
	v := m.application_desc
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the DeploymentProfile entity.
// If the DeploymentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentProfileMutation) OldAppID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *DeploymentProfileMutation) ClearAppID() {
	m.application_desc = nil
	m.clearedFields[deploymentprofile.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *DeploymentProfileMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[deploymentprofile.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *DeploymentProfileMutation) ResetAppID() {
	m.application_desc = nil
	delete(m.clearedFields, deploymentprofile.FieldAppID)
}

// AddComponentIDs adds the "components" edge to the Component entity by ids.
func (m *DeploymentProfileMutation) AddComponentIDs(ids ...uint) {
	if m.components == nil {
		m.components = make(map[uint]struct{})
	}
	for i := range ids {
		m.components[ids[i]] = struct{}{}
	}
}

// ClearComponents clears the "components" edge to the Component entity.
func (m *DeploymentProfileMutation) ClearComponents() {
	m.clearedcomponents = true
}

// ComponentsCleared reports if the "components" edge to the Component entity was cleared.
func (m *DeploymentProfileMutation) ComponentsCleared() bool {
	return m.clearedcomponents
}

// RemoveComponentIDs removes the "components" edge to the Component entity by IDs.
func (m *DeploymentProfileMutation) RemoveComponentIDs(ids ...uint) {
	if m.removedcomponents == nil {
		m.removedcomponents = make(map[uint]struct{})
	}
	for i := range ids {
		delete(m.components, ids[i])
		m.removedcomponents[ids[i]] = struct{}{}
	}
}

// RemovedComponents returns the removed IDs of the "components" edge to the Component entity.
func (m *DeploymentProfileMutation) RemovedComponentsIDs() (ids []uint) {
	for id := range m.removedcomponents {
		ids = append(ids, id)
	}
	return
}

// ComponentsIDs returns the "components" edge IDs in the mutation.
func (m *DeploymentProfileMutation) ComponentsIDs() (ids []uint) {
	for id := range m.components {
		ids = append(ids, id)
	}
	return
}

// ResetComponents resets all changes to the "components" edge.
func (m *DeploymentProfileMutation) ResetComponents() {
	m.components = nil
	m.clearedcomponents = false
	m.removedcomponents = nil
}

// SetApplicationDescID sets the "application_desc" edge to the ApplicationDesc entity by id.
func (m *DeploymentProfileMutation) SetApplicationDescID(id string) {
	m.application_desc = &id
}

// ClearApplicationDesc clears the "application_desc" edge to the ApplicationDesc entity.
func (m *DeploymentProfileMutation) ClearApplicationDesc() {
	m.clearedapplication_desc = true
	m.clearedFields[deploymentprofile.FieldAppID] = struct{}{}
}

// ApplicationDescCleared reports if the "application_desc" edge to the ApplicationDesc entity was cleared.
func (m *DeploymentProfileMutation) ApplicationDescCleared() bool {
	return m.AppIDCleared() || m.clearedapplication_desc
}

// ApplicationDescID returns the "application_desc" edge ID in the mutation.
func (m *DeploymentProfileMutation) ApplicationDescID() (id string, exists bool) {
	if m.application_desc != nil {
		return *m.application_desc, true
	}
	return
}

// ApplicationDescIDs returns the "application_desc" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicationDescID instead. It exists only for internal usage by the builders.
func (m *DeploymentProfileMutation) ApplicationDescIDs() (ids []string) {
	if id := m.application_desc; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplicationDesc resets all changes to the "application_desc" edge.
func (m *DeploymentProfileMutation) ResetApplicationDesc() {
	m.application_desc = nil
	m.clearedapplication_desc = false
}

// Where appends a list predicates to the DeploymentProfileMutation builder.
func (m *DeploymentProfileMutation) Where(ps ...predicate.DeploymentProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeploymentProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeploymentProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DeploymentProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeploymentProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeploymentProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DeploymentProfile).
func (m *DeploymentProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeploymentProfileMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m._type != nil {
		fields = append(fields, deploymentprofile.FieldType)
	}
	if m.description != nil {
		fields = append(fields, deploymentprofile.FieldDescription)
	}
	if m.cpu_cores != nil {
		fields = append(fields, deploymentprofile.FieldCPUCores)
	}
	if m.memory != nil {
		fields = append(fields, deploymentprofile.FieldMemory)
	}
	if m.storage != nil {
		fields = append(fields, deploymentprofile.FieldStorage)
	}
	if m.cpu_architectures != nil {
		fields = append(fields, deploymentprofile.FieldCPUArchitectures)
	}
	if m.peripherals != nil {
		fields = append(fields, deploymentprofile.FieldPeripherals)
	}
	if m.interfaces != nil {
		fields = append(fields, deploymentprofile.FieldInterfaces)
	}
	if m.application_desc != nil {
		fields = append(fields, deploymentprofile.FieldAppID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeploymentProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deploymentprofile.FieldType:
		return m.GetType()
	case deploymentprofile.FieldDescription:
		return m.Description()
	case deploymentprofile.FieldCPUCores:
		return m.CPUCores()
	case deploymentprofile.FieldMemory:
		return m.Memory()
	case deploymentprofile.FieldStorage:
		return m.Storage()
	case deploymentprofile.FieldCPUArchitectures:
		return m.CPUArchitectures()
	case deploymentprofile.FieldPeripherals:
		return m.Peripherals()
	case deploymentprofile.FieldInterfaces:
		return m.Interfaces()
	case deploymentprofile.FieldAppID:
		return m.AppID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeploymentProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deploymentprofile.FieldType:
		return m.OldType(ctx)
	case deploymentprofile.FieldDescription:
		return m.OldDescription(ctx)
	case deploymentprofile.FieldCPUCores:
		return m.OldCPUCores(ctx)
	case deploymentprofile.FieldMemory:
		return m.OldMemory(ctx)
	case deploymentprofile.FieldStorage:
		return m.OldStorage(ctx)
	case deploymentprofile.FieldCPUArchitectures:
		return m.OldCPUArchitectures(ctx)
	case deploymentprofile.FieldPeripherals:
		return m.OldPeripherals(ctx)
	case deploymentprofile.FieldInterfaces:
		return m.OldInterfaces(ctx)
	case deploymentprofile.FieldAppID:
		return m.OldAppID(ctx)
	}
	return nil, fmt.Errorf("unknown DeploymentProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deploymentprofile.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case deploymentprofile.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case deploymentprofile.FieldCPUCores:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPUCores(v)
		return nil
	case deploymentprofile.FieldMemory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemory(v)
		return nil
	case deploymentprofile.FieldStorage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorage(v)
		return nil
	case deploymentprofile.FieldCPUArchitectures:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPUArchitectures(v)
		return nil
	case deploymentprofile.FieldPeripherals:
		v, ok := value.([]map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeripherals(v)
		return nil
	case deploymentprofile.FieldInterfaces:
		v, ok := value.([]map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInterfaces(v)
		return nil
	case deploymentprofile.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	}
	return fmt.Errorf("unknown DeploymentProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeploymentProfileMutation) AddedFields() []string {
	var fields []string
	if m.addcpu_cores != nil {
		fields = append(fields, deploymentprofile.FieldCPUCores)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeploymentProfileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case deploymentprofile.FieldCPUCores:
		return m.AddedCPUCores()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case deploymentprofile.FieldCPUCores:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCPUCores(v)
		return nil
	}
	return fmt.Errorf("unknown DeploymentProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeploymentProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(deploymentprofile.FieldType) {
		fields = append(fields, deploymentprofile.FieldType)
	}
	if m.FieldCleared(deploymentprofile.FieldDescription) {
		fields = append(fields, deploymentprofile.FieldDescription)
	}
	if m.FieldCleared(deploymentprofile.FieldCPUCores) {
		fields = append(fields, deploymentprofile.FieldCPUCores)
	}
	if m.FieldCleared(deploymentprofile.FieldMemory) {
		fields = append(fields, deploymentprofile.FieldMemory)
	}
	if m.FieldCleared(deploymentprofile.FieldStorage) {
		fields = append(fields, deploymentprofile.FieldStorage)
	}
	if m.FieldCleared(deploymentprofile.FieldCPUArchitectures) {
		fields = append(fields, deploymentprofile.FieldCPUArchitectures)
	}
	if m.FieldCleared(deploymentprofile.FieldPeripherals) {
		fields = append(fields, deploymentprofile.FieldPeripherals)
	}
	if m.FieldCleared(deploymentprofile.FieldInterfaces) {
		fields = append(fields, deploymentprofile.FieldInterfaces)
	}
	if m.FieldCleared(deploymentprofile.FieldAppID) {
		fields = append(fields, deploymentprofile.FieldAppID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeploymentProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeploymentProfileMutation) ClearField(name string) error {
	switch name {
	case deploymentprofile.FieldType:
		m.ClearType()
		return nil
	case deploymentprofile.FieldDescription:
		m.ClearDescription()
		return nil
	case deploymentprofile.FieldCPUCores:
		m.ClearCPUCores()
		return nil
	case deploymentprofile.FieldMemory:
		m.ClearMemory()
		return nil
	case deploymentprofile.FieldStorage:
		m.ClearStorage()
		return nil
	case deploymentprofile.FieldCPUArchitectures:
		m.ClearCPUArchitectures()
		return nil
	case deploymentprofile.FieldPeripherals:
		m.ClearPeripherals()
		return nil
	case deploymentprofile.FieldInterfaces:
		m.ClearInterfaces()
		return nil
	case deploymentprofile.FieldAppID:
		m.ClearAppID()
		return nil
	}
	return fmt.Errorf("unknown DeploymentProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeploymentProfileMutation) ResetField(name string) error {
	switch name {
	case deploymentprofile.FieldType:
		m.ResetType()
		return nil
	case deploymentprofile.FieldDescription:
		m.ResetDescription()
		return nil
	case deploymentprofile.FieldCPUCores:
		m.ResetCPUCores()
		return nil
	case deploymentprofile.FieldMemory:
		m.ResetMemory()
		return nil
	case deploymentprofile.FieldStorage:
		m.ResetStorage()
		return nil
	case deploymentprofile.FieldCPUArchitectures:
		m.ResetCPUArchitectures()
		return nil
	case deploymentprofile.FieldPeripherals:
		m.ResetPeripherals()
		return nil
	case deploymentprofile.FieldInterfaces:
		m.ResetInterfaces()
		return nil
	case deploymentprofile.FieldAppID:
		m.ResetAppID()
		return nil
	}
	return fmt.Errorf("unknown DeploymentProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeploymentProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.components != nil {
		edges = append(edges, deploymentprofile.EdgeComponents)
	}
	if m.application_desc != nil {
		edges = append(edges, deploymentprofile.EdgeApplicationDesc)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeploymentProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case deploymentprofile.EdgeComponents:
		ids := make([]ent.Value, 0, len(m.components))
		for id := range m.components {
			ids = append(ids, id)
		}
		return ids
	case deploymentprofile.EdgeApplicationDesc:
		if id := m.application_desc; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeploymentProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcomponents != nil {
		edges = append(edges, deploymentprofile.EdgeComponents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeploymentProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case deploymentprofile.EdgeComponents:
		ids := make([]ent.Value, 0, len(m.removedcomponents))
		for id := range m.removedcomponents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeploymentProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcomponents {
		edges = append(edges, deploymentprofile.EdgeComponents)
	}
	if m.clearedapplication_desc {
		edges = append(edges, deploymentprofile.EdgeApplicationDesc)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeploymentProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case deploymentprofile.EdgeComponents:
		return m.clearedcomponents
	case deploymentprofile.EdgeApplicationDesc:
		return m.clearedapplication_desc
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeploymentProfileMutation) ClearEdge(name string) error {
	switch name {
	case deploymentprofile.EdgeApplicationDesc:
		m.ClearApplicationDesc()
		return nil
	}
	return fmt.Errorf("unknown DeploymentProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeploymentProfileMutation) ResetEdge(name string) error {
	switch name {
	case deploymentprofile.EdgeComponents:
		m.ResetComponents()
		return nil
	case deploymentprofile.EdgeApplicationDesc:
		m.ResetApplicationDesc()
		return nil
	}
	return fmt.Errorf("unknown DeploymentProfile edge %s", name)
}

// HostMutation represents an operation that mutates the Host nodes in the graph.
type HostMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	host_id        *string
	hostname       *string
	ip_address     *string
	edge_url       *string
	status         *string
	last_heartbeat *time.Time
	metadata       *struct{}
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	site           *uuid.UUID
	clearedsite    bool
	done           bool
	oldValue       func(context.Context) (*Host, error)
	predicates     []predicate.Host
}

var _ ent.Mutation = (*HostMutation)(nil)

// hostOption allows management of the mutation configuration using functional options.
type hostOption func(*HostMutation)

// newHostMutation creates new mutation for the Host entity.
func newHostMutation(c config, op Op, opts ...hostOption) *HostMutation {
	m := &HostMutation{
		config:        c,
		op:            op,
		typ:           TypeHost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHostID sets the ID field of the mutation.
func withHostID(id uuid.UUID) hostOption {
	return func(m *HostMutation) {
		var (
			err   error
			once  sync.Once
			value *Host
		)
		m.oldValue = func(ctx context.Context) (*Host, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Host.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHost sets the old Host of the mutation.
func withHost(node *Host) hostOption {
	return func(m *HostMutation) {
		m.oldValue = func(context.Context) (*Host, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Host entities.
func (m *HostMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HostMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HostMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Host.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHostID sets the "host_id" field.
func (m *HostMutation) SetHostID(s string) {
	m.host_id = &s
}

// HostID returns the value of the "host_id" field in the mutation.
func (m *HostMutation) HostID() (r string, exists bool) {
	v := m.host_id
	if v == nil {
		return
	}
	return *v, true
}

// OldHostID returns the old "host_id" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldHostID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostID: %w", err)
	}
	return oldValue.HostID, nil
}

// ResetHostID resets all changes to the "host_id" field.
func (m *HostMutation) ResetHostID() {
	m.host_id = nil
}

// SetSiteID sets the "site_id" field.
func (m *HostMutation) SetSiteID(u uuid.UUID) {
	m.site = &u
}

// SiteID returns the value of the "site_id" field in the mutation.
func (m *HostMutation) SiteID() (r uuid.UUID, exists bool) {
	v := m.site
	if v == nil {
		return
	}
	return *v, true
}

// OldSiteID returns the old "site_id" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldSiteID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSiteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSiteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSiteID: %w", err)
	}
	return oldValue.SiteID, nil
}

// ClearSiteID clears the value of the "site_id" field.
func (m *HostMutation) ClearSiteID() {
	m.site = nil
	m.clearedFields[host.FieldSiteID] = struct{}{}
}

// SiteIDCleared returns if the "site_id" field was cleared in this mutation.
func (m *HostMutation) SiteIDCleared() bool {
	_, ok := m.clearedFields[host.FieldSiteID]
	return ok
}

// ResetSiteID resets all changes to the "site_id" field.
func (m *HostMutation) ResetSiteID() {
	m.site = nil
	delete(m.clearedFields, host.FieldSiteID)
}

// SetHostname sets the "hostname" field.
func (m *HostMutation) SetHostname(s string) {
	m.hostname = &s
}

// Hostname returns the value of the "hostname" field in the mutation.
func (m *HostMutation) Hostname() (r string, exists bool) {
	v := m.hostname
	if v == nil {
		return
	}
	return *v, true
}

// OldHostname returns the old "hostname" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldHostname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostname: %w", err)
	}
	return oldValue.Hostname, nil
}

// ClearHostname clears the value of the "hostname" field.
func (m *HostMutation) ClearHostname() {
	m.hostname = nil
	m.clearedFields[host.FieldHostname] = struct{}{}
}

// HostnameCleared returns if the "hostname" field was cleared in this mutation.
func (m *HostMutation) HostnameCleared() bool {
	_, ok := m.clearedFields[host.FieldHostname]
	return ok
}

// ResetHostname resets all changes to the "hostname" field.
func (m *HostMutation) ResetHostname() {
	m.hostname = nil
	delete(m.clearedFields, host.FieldHostname)
}

// SetIPAddress sets the "ip_address" field.
func (m *HostMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *HostMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ClearIPAddress clears the value of the "ip_address" field.
func (m *HostMutation) ClearIPAddress() {
	m.ip_address = nil
	m.clearedFields[host.FieldIPAddress] = struct{}{}
}

// IPAddressCleared returns if the "ip_address" field was cleared in this mutation.
func (m *HostMutation) IPAddressCleared() bool {
	_, ok := m.clearedFields[host.FieldIPAddress]
	return ok
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *HostMutation) ResetIPAddress() {
	m.ip_address = nil
	delete(m.clearedFields, host.FieldIPAddress)
}

// SetEdgeURL sets the "edge_url" field.
func (m *HostMutation) SetEdgeURL(s string) {
	m.edge_url = &s
}

// EdgeURL returns the value of the "edge_url" field in the mutation.
func (m *HostMutation) EdgeURL() (r string, exists bool) {
	v := m.edge_url
	if v == nil {
		return
	}
	return *v, true
}

// OldEdgeURL returns the old "edge_url" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldEdgeURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEdgeURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEdgeURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEdgeURL: %w", err)
	}
	return oldValue.EdgeURL, nil
}

// ClearEdgeURL clears the value of the "edge_url" field.
func (m *HostMutation) ClearEdgeURL() {
	m.edge_url = nil
	m.clearedFields[host.FieldEdgeURL] = struct{}{}
}

// EdgeURLCleared returns if the "edge_url" field was cleared in this mutation.
func (m *HostMutation) EdgeURLCleared() bool {
	_, ok := m.clearedFields[host.FieldEdgeURL]
	return ok
}

// ResetEdgeURL resets all changes to the "edge_url" field.
func (m *HostMutation) ResetEdgeURL() {
	m.edge_url = nil
	delete(m.clearedFields, host.FieldEdgeURL)
}

// SetStatus sets the "status" field.
func (m *HostMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *HostMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *HostMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[host.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *HostMutation) StatusCleared() bool {
	_, ok := m.clearedFields[host.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *HostMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, host.FieldStatus)
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (m *HostMutation) SetLastHeartbeat(t time.Time) {
	m.last_heartbeat = &t
}

// LastHeartbeat returns the value of the "last_heartbeat" field in the mutation.
func (m *HostMutation) LastHeartbeat() (r time.Time, exists bool) {
	v := m.last_heartbeat
	if v == nil {
		return
	}
	return *v, true
}

// OldLastHeartbeat returns the old "last_heartbeat" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldLastHeartbeat(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastHeartbeat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastHeartbeat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastHeartbeat: %w", err)
	}
	return oldValue.LastHeartbeat, nil
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (m *HostMutation) ClearLastHeartbeat() {
	m.last_heartbeat = nil
	m.clearedFields[host.FieldLastHeartbeat] = struct{}{}
}

// LastHeartbeatCleared returns if the "last_heartbeat" field was cleared in this mutation.
func (m *HostMutation) LastHeartbeatCleared() bool {
	_, ok := m.clearedFields[host.FieldLastHeartbeat]
	return ok
}

// ResetLastHeartbeat resets all changes to the "last_heartbeat" field.
func (m *HostMutation) ResetLastHeartbeat() {
	m.last_heartbeat = nil
	delete(m.clearedFields, host.FieldLastHeartbeat)
}

// SetMetadata sets the "metadata" field.
func (m *HostMutation) SetMetadata(s struct{}) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *HostMutation) Metadata() (r struct{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldMetadata(ctx context.Context) (v struct{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *HostMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[host.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *HostMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[host.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *HostMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, host.FieldMetadata)
}

// SetCreatedAt sets the "created_at" field.
func (m *HostMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HostMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *HostMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[host.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *HostMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[host.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HostMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, host.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *HostMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *HostMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *HostMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[host.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *HostMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[host.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *HostMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, host.FieldUpdatedAt)
}

// ClearSite clears the "site" edge to the Site entity.
func (m *HostMutation) ClearSite() {
	m.clearedsite = true
	m.clearedFields[host.FieldSiteID] = struct{}{}
}

// SiteCleared reports if the "site" edge to the Site entity was cleared.
func (m *HostMutation) SiteCleared() bool {
	return m.SiteIDCleared() || m.clearedsite
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *HostMutation) SiteIDs() (ids []uuid.UUID) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *HostMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// Where appends a list predicates to the HostMutation builder.
func (m *HostMutation) Where(ps ...predicate.Host) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Host, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Host).
func (m *HostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HostMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.host_id != nil {
		fields = append(fields, host.FieldHostID)
	}
	if m.site != nil {
		fields = append(fields, host.FieldSiteID)
	}
	if m.hostname != nil {
		fields = append(fields, host.FieldHostname)
	}
	if m.ip_address != nil {
		fields = append(fields, host.FieldIPAddress)
	}
	if m.edge_url != nil {
		fields = append(fields, host.FieldEdgeURL)
	}
	if m.status != nil {
		fields = append(fields, host.FieldStatus)
	}
	if m.last_heartbeat != nil {
		fields = append(fields, host.FieldLastHeartbeat)
	}
	if m.metadata != nil {
		fields = append(fields, host.FieldMetadata)
	}
	if m.created_at != nil {
		fields = append(fields, host.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, host.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case host.FieldHostID:
		return m.HostID()
	case host.FieldSiteID:
		return m.SiteID()
	case host.FieldHostname:
		return m.Hostname()
	case host.FieldIPAddress:
		return m.IPAddress()
	case host.FieldEdgeURL:
		return m.EdgeURL()
	case host.FieldStatus:
		return m.Status()
	case host.FieldLastHeartbeat:
		return m.LastHeartbeat()
	case host.FieldMetadata:
		return m.Metadata()
	case host.FieldCreatedAt:
		return m.CreatedAt()
	case host.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case host.FieldHostID:
		return m.OldHostID(ctx)
	case host.FieldSiteID:
		return m.OldSiteID(ctx)
	case host.FieldHostname:
		return m.OldHostname(ctx)
	case host.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case host.FieldEdgeURL:
		return m.OldEdgeURL(ctx)
	case host.FieldStatus:
		return m.OldStatus(ctx)
	case host.FieldLastHeartbeat:
		return m.OldLastHeartbeat(ctx)
	case host.FieldMetadata:
		return m.OldMetadata(ctx)
	case host.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case host.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Host field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case host.FieldHostID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostID(v)
		return nil
	case host.FieldSiteID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSiteID(v)
		return nil
	case host.FieldHostname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostname(v)
		return nil
	case host.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case host.FieldEdgeURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEdgeURL(v)
		return nil
	case host.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case host.FieldLastHeartbeat:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastHeartbeat(v)
		return nil
	case host.FieldMetadata:
		v, ok := value.(struct{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case host.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case host.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Host field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Host numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(host.FieldSiteID) {
		fields = append(fields, host.FieldSiteID)
	}
	if m.FieldCleared(host.FieldHostname) {
		fields = append(fields, host.FieldHostname)
	}
	if m.FieldCleared(host.FieldIPAddress) {
		fields = append(fields, host.FieldIPAddress)
	}
	if m.FieldCleared(host.FieldEdgeURL) {
		fields = append(fields, host.FieldEdgeURL)
	}
	if m.FieldCleared(host.FieldStatus) {
		fields = append(fields, host.FieldStatus)
	}
	if m.FieldCleared(host.FieldLastHeartbeat) {
		fields = append(fields, host.FieldLastHeartbeat)
	}
	if m.FieldCleared(host.FieldMetadata) {
		fields = append(fields, host.FieldMetadata)
	}
	if m.FieldCleared(host.FieldCreatedAt) {
		fields = append(fields, host.FieldCreatedAt)
	}
	if m.FieldCleared(host.FieldUpdatedAt) {
		fields = append(fields, host.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HostMutation) ClearField(name string) error {
	switch name {
	case host.FieldSiteID:
		m.ClearSiteID()
		return nil
	case host.FieldHostname:
		m.ClearHostname()
		return nil
	case host.FieldIPAddress:
		m.ClearIPAddress()
		return nil
	case host.FieldEdgeURL:
		m.ClearEdgeURL()
		return nil
	case host.FieldStatus:
		m.ClearStatus()
		return nil
	case host.FieldLastHeartbeat:
		m.ClearLastHeartbeat()
		return nil
	case host.FieldMetadata:
		m.ClearMetadata()
		return nil
	case host.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case host.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Host nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HostMutation) ResetField(name string) error {
	switch name {
	case host.FieldHostID:
		m.ResetHostID()
		return nil
	case host.FieldSiteID:
		m.ResetSiteID()
		return nil
	case host.FieldHostname:
		m.ResetHostname()
		return nil
	case host.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case host.FieldEdgeURL:
		m.ResetEdgeURL()
		return nil
	case host.FieldStatus:
		m.ResetStatus()
		return nil
	case host.FieldLastHeartbeat:
		m.ResetLastHeartbeat()
		return nil
	case host.FieldMetadata:
		m.ResetMetadata()
		return nil
	case host.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case host.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Host field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HostMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.site != nil {
		edges = append(edges, host.EdgeSite)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case host.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HostMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsite {
		edges = append(edges, host.EdgeSite)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HostMutation) EdgeCleared(name string) bool {
	switch name {
	case host.EdgeSite:
		return m.clearedsite
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HostMutation) ClearEdge(name string) error {
	switch name {
	case host.EdgeSite:
		m.ClearSite()
		return nil
	}
	return fmt.Errorf("unknown Host unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HostMutation) ResetEdge(name string) error {
	switch name {
	case host.EdgeSite:
		m.ResetSite()
		return nil
	}
	return fmt.Errorf("unknown Host edge %s", name)
}

// OrchestratorMutation represents an operation that mutates the Orchestrator nodes in the graph.
type OrchestratorMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	_type         *string
	region        *string
	api_endpoint  *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	sites         map[uuid.UUID]struct{}
	removedsites  map[uuid.UUID]struct{}
	clearedsites  bool
	done          bool
	oldValue      func(context.Context) (*Orchestrator, error)
	predicates    []predicate.Orchestrator
}

var _ ent.Mutation = (*OrchestratorMutation)(nil)

// orchestratorOption allows management of the mutation configuration using functional options.
type orchestratorOption func(*OrchestratorMutation)

// newOrchestratorMutation creates new mutation for the Orchestrator entity.
func newOrchestratorMutation(c config, op Op, opts ...orchestratorOption) *OrchestratorMutation {
	m := &OrchestratorMutation{
		config:        c,
		op:            op,
		typ:           TypeOrchestrator,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrchestratorID sets the ID field of the mutation.
func withOrchestratorID(id uuid.UUID) orchestratorOption {
	return func(m *OrchestratorMutation) {
		var (
			err   error
			once  sync.Once
			value *Orchestrator
		)
		m.oldValue = func(ctx context.Context) (*Orchestrator, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Orchestrator.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrchestrator sets the old Orchestrator of the mutation.
func withOrchestrator(node *Orchestrator) orchestratorOption {
	return func(m *OrchestratorMutation) {
		m.oldValue = func(context.Context) (*Orchestrator, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrchestratorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrchestratorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Orchestrator entities.
func (m *OrchestratorMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrchestratorMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrchestratorMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Orchestrator.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *OrchestratorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrchestratorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Orchestrator entity.
// If the Orchestrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrchestratorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *OrchestratorMutation) ClearName() {
	m.name = nil
	m.clearedFields[orchestrator.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *OrchestratorMutation) NameCleared() bool {
	_, ok := m.clearedFields[orchestrator.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *OrchestratorMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, orchestrator.FieldName)
}

// SetType sets the "type" field.
func (m *OrchestratorMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *OrchestratorMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Orchestrator entity.
// If the Orchestrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrchestratorMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *OrchestratorMutation) ClearType() {
	m._type = nil
	m.clearedFields[orchestrator.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *OrchestratorMutation) TypeCleared() bool {
	_, ok := m.clearedFields[orchestrator.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *OrchestratorMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, orchestrator.FieldType)
}

// SetRegion sets the "region" field.
func (m *OrchestratorMutation) SetRegion(s string) {
	m.region = &s
}

// Region returns the value of the "region" field in the mutation.
func (m *OrchestratorMutation) Region() (r string, exists bool) {
	v := m.region
	if v == nil {
		return
	}
	return *v, true
}

// OldRegion returns the old "region" field's value of the Orchestrator entity.
// If the Orchestrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrchestratorMutation) OldRegion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegion: %w", err)
	}
	return oldValue.Region, nil
}

// ClearRegion clears the value of the "region" field.
func (m *OrchestratorMutation) ClearRegion() {
	m.region = nil
	m.clearedFields[orchestrator.FieldRegion] = struct{}{}
}

// RegionCleared returns if the "region" field was cleared in this mutation.
func (m *OrchestratorMutation) RegionCleared() bool {
	_, ok := m.clearedFields[orchestrator.FieldRegion]
	return ok
}

// ResetRegion resets all changes to the "region" field.
func (m *OrchestratorMutation) ResetRegion() {
	m.region = nil
	delete(m.clearedFields, orchestrator.FieldRegion)
}

// SetAPIEndpoint sets the "api_endpoint" field.
func (m *OrchestratorMutation) SetAPIEndpoint(s string) {
	m.api_endpoint = &s
}

// APIEndpoint returns the value of the "api_endpoint" field in the mutation.
func (m *OrchestratorMutation) APIEndpoint() (r string, exists bool) {
	v := m.api_endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIEndpoint returns the old "api_endpoint" field's value of the Orchestrator entity.
// If the Orchestrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrchestratorMutation) OldAPIEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIEndpoint: %w", err)
	}
	return oldValue.APIEndpoint, nil
}

// ClearAPIEndpoint clears the value of the "api_endpoint" field.
func (m *OrchestratorMutation) ClearAPIEndpoint() {
	m.api_endpoint = nil
	m.clearedFields[orchestrator.FieldAPIEndpoint] = struct{}{}
}

// APIEndpointCleared returns if the "api_endpoint" field was cleared in this mutation.
func (m *OrchestratorMutation) APIEndpointCleared() bool {
	_, ok := m.clearedFields[orchestrator.FieldAPIEndpoint]
	return ok
}

// ResetAPIEndpoint resets all changes to the "api_endpoint" field.
func (m *OrchestratorMutation) ResetAPIEndpoint() {
	m.api_endpoint = nil
	delete(m.clearedFields, orchestrator.FieldAPIEndpoint)
}

// SetCreatedAt sets the "created_at" field.
func (m *OrchestratorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrchestratorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Orchestrator entity.
// If the Orchestrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrchestratorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *OrchestratorMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[orchestrator.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *OrchestratorMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[orchestrator.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrchestratorMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, orchestrator.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrchestratorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrchestratorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Orchestrator entity.
// If the Orchestrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrchestratorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *OrchestratorMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[orchestrator.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *OrchestratorMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[orchestrator.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrchestratorMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, orchestrator.FieldUpdatedAt)
}

// AddSiteIDs adds the "sites" edge to the Site entity by ids.
func (m *OrchestratorMutation) AddSiteIDs(ids ...uuid.UUID) {
	if m.sites == nil {
		m.sites = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.sites[ids[i]] = struct{}{}
	}
}

// ClearSites clears the "sites" edge to the Site entity.
func (m *OrchestratorMutation) ClearSites() {
	m.clearedsites = true
}

// SitesCleared reports if the "sites" edge to the Site entity was cleared.
func (m *OrchestratorMutation) SitesCleared() bool {
	return m.clearedsites
}

// RemoveSiteIDs removes the "sites" edge to the Site entity by IDs.
func (m *OrchestratorMutation) RemoveSiteIDs(ids ...uuid.UUID) {
	if m.removedsites == nil {
		m.removedsites = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.sites, ids[i])
		m.removedsites[ids[i]] = struct{}{}
	}
}

// RemovedSites returns the removed IDs of the "sites" edge to the Site entity.
func (m *OrchestratorMutation) RemovedSitesIDs() (ids []uuid.UUID) {
	for id := range m.removedsites {
		ids = append(ids, id)
	}
	return
}

// SitesIDs returns the "sites" edge IDs in the mutation.
func (m *OrchestratorMutation) SitesIDs() (ids []uuid.UUID) {
	for id := range m.sites {
		ids = append(ids, id)
	}
	return
}

// ResetSites resets all changes to the "sites" edge.
func (m *OrchestratorMutation) ResetSites() {
	m.sites = nil
	m.clearedsites = false
	m.removedsites = nil
}

// Where appends a list predicates to the OrchestratorMutation builder.
func (m *OrchestratorMutation) Where(ps ...predicate.Orchestrator) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrchestratorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrchestratorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Orchestrator, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrchestratorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrchestratorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Orchestrator).
func (m *OrchestratorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrchestratorMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, orchestrator.FieldName)
	}
	if m._type != nil {
		fields = append(fields, orchestrator.FieldType)
	}
	if m.region != nil {
		fields = append(fields, orchestrator.FieldRegion)
	}
	if m.api_endpoint != nil {
		fields = append(fields, orchestrator.FieldAPIEndpoint)
	}
	if m.created_at != nil {
		fields = append(fields, orchestrator.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orchestrator.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrchestratorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orchestrator.FieldName:
		return m.Name()
	case orchestrator.FieldType:
		return m.GetType()
	case orchestrator.FieldRegion:
		return m.Region()
	case orchestrator.FieldAPIEndpoint:
		return m.APIEndpoint()
	case orchestrator.FieldCreatedAt:
		return m.CreatedAt()
	case orchestrator.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrchestratorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orchestrator.FieldName:
		return m.OldName(ctx)
	case orchestrator.FieldType:
		return m.OldType(ctx)
	case orchestrator.FieldRegion:
		return m.OldRegion(ctx)
	case orchestrator.FieldAPIEndpoint:
		return m.OldAPIEndpoint(ctx)
	case orchestrator.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orchestrator.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Orchestrator field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrchestratorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orchestrator.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case orchestrator.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case orchestrator.FieldRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegion(v)
		return nil
	case orchestrator.FieldAPIEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIEndpoint(v)
		return nil
	case orchestrator.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orchestrator.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Orchestrator field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrchestratorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrchestratorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrchestratorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Orchestrator numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrchestratorMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orchestrator.FieldName) {
		fields = append(fields, orchestrator.FieldName)
	}
	if m.FieldCleared(orchestrator.FieldType) {
		fields = append(fields, orchestrator.FieldType)
	}
	if m.FieldCleared(orchestrator.FieldRegion) {
		fields = append(fields, orchestrator.FieldRegion)
	}
	if m.FieldCleared(orchestrator.FieldAPIEndpoint) {
		fields = append(fields, orchestrator.FieldAPIEndpoint)
	}
	if m.FieldCleared(orchestrator.FieldCreatedAt) {
		fields = append(fields, orchestrator.FieldCreatedAt)
	}
	if m.FieldCleared(orchestrator.FieldUpdatedAt) {
		fields = append(fields, orchestrator.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrchestratorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrchestratorMutation) ClearField(name string) error {
	switch name {
	case orchestrator.FieldName:
		m.ClearName()
		return nil
	case orchestrator.FieldType:
		m.ClearType()
		return nil
	case orchestrator.FieldRegion:
		m.ClearRegion()
		return nil
	case orchestrator.FieldAPIEndpoint:
		m.ClearAPIEndpoint()
		return nil
	case orchestrator.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case orchestrator.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Orchestrator nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrchestratorMutation) ResetField(name string) error {
	switch name {
	case orchestrator.FieldName:
		m.ResetName()
		return nil
	case orchestrator.FieldType:
		m.ResetType()
		return nil
	case orchestrator.FieldRegion:
		m.ResetRegion()
		return nil
	case orchestrator.FieldAPIEndpoint:
		m.ResetAPIEndpoint()
		return nil
	case orchestrator.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orchestrator.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Orchestrator field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrchestratorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sites != nil {
		edges = append(edges, orchestrator.EdgeSites)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrchestratorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orchestrator.EdgeSites:
		ids := make([]ent.Value, 0, len(m.sites))
		for id := range m.sites {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrchestratorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsites != nil {
		edges = append(edges, orchestrator.EdgeSites)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrchestratorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orchestrator.EdgeSites:
		ids := make([]ent.Value, 0, len(m.removedsites))
		for id := range m.removedsites {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrchestratorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsites {
		edges = append(edges, orchestrator.EdgeSites)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrchestratorMutation) EdgeCleared(name string) bool {
	switch name {
	case orchestrator.EdgeSites:
		return m.clearedsites
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrchestratorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Orchestrator unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrchestratorMutation) ResetEdge(name string) error {
	switch name {
	case orchestrator.EdgeSites:
		m.ResetSites()
		return nil
	}
	return fmt.Errorf("unknown Orchestrator edge %s", name)
}

// SiteMutation represents an operation that mutates the Site nodes in the graph.
type SiteMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	site_id             *string
	name                *string
	description         *string
	location            *string
	metadata            *struct{}
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	hosts               map[uuid.UUID]struct{}
	removedhosts        map[uuid.UUID]struct{}
	clearedhosts        bool
	orchestrator        *uuid.UUID
	clearedorchestrator bool
	done                bool
	oldValue            func(context.Context) (*Site, error)
	predicates          []predicate.Site
}

var _ ent.Mutation = (*SiteMutation)(nil)

// siteOption allows management of the mutation configuration using functional options.
type siteOption func(*SiteMutation)

// newSiteMutation creates new mutation for the Site entity.
func newSiteMutation(c config, op Op, opts ...siteOption) *SiteMutation {
	m := &SiteMutation{
		config:        c,
		op:            op,
		typ:           TypeSite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSiteID sets the ID field of the mutation.
func withSiteID(id uuid.UUID) siteOption {
	return func(m *SiteMutation) {
		var (
			err   error
			once  sync.Once
			value *Site
		)
		m.oldValue = func(ctx context.Context) (*Site, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Site.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSite sets the old Site of the mutation.
func withSite(node *Site) siteOption {
	return func(m *SiteMutation) {
		m.oldValue = func(context.Context) (*Site, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SiteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SiteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Site entities.
func (m *SiteMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SiteMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SiteMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Site.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSiteID sets the "site_id" field.
func (m *SiteMutation) SetSiteID(s string) {
	m.site_id = &s
}

// SiteID returns the value of the "site_id" field in the mutation.
func (m *SiteMutation) SiteID() (r string, exists bool) {
	v := m.site_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSiteID returns the old "site_id" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldSiteID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSiteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSiteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSiteID: %w", err)
	}
	return oldValue.SiteID, nil
}

// ResetSiteID resets all changes to the "site_id" field.
func (m *SiteMutation) ResetSiteID() {
	m.site_id = nil
}

// SetName sets the "name" field.
func (m *SiteMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SiteMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *SiteMutation) ClearName() {
	m.name = nil
	m.clearedFields[site.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *SiteMutation) NameCleared() bool {
	_, ok := m.clearedFields[site.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *SiteMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, site.FieldName)
}

// SetDescription sets the "description" field.
func (m *SiteMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SiteMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SiteMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[site.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SiteMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[site.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SiteMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, site.FieldDescription)
}

// SetLocation sets the "location" field.
func (m *SiteMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *SiteMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *SiteMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[site.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *SiteMutation) LocationCleared() bool {
	_, ok := m.clearedFields[site.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *SiteMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, site.FieldLocation)
}

// SetOrchestratorID sets the "orchestrator_id" field.
func (m *SiteMutation) SetOrchestratorID(u uuid.UUID) {
	m.orchestrator = &u
}

// OrchestratorID returns the value of the "orchestrator_id" field in the mutation.
func (m *SiteMutation) OrchestratorID() (r uuid.UUID, exists bool) {
	v := m.orchestrator
	if v == nil {
		return
	}
	return *v, true
}

// OldOrchestratorID returns the old "orchestrator_id" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldOrchestratorID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrchestratorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrchestratorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrchestratorID: %w", err)
	}
	return oldValue.OrchestratorID, nil
}

// ClearOrchestratorID clears the value of the "orchestrator_id" field.
func (m *SiteMutation) ClearOrchestratorID() {
	m.orchestrator = nil
	m.clearedFields[site.FieldOrchestratorID] = struct{}{}
}

// OrchestratorIDCleared returns if the "orchestrator_id" field was cleared in this mutation.
func (m *SiteMutation) OrchestratorIDCleared() bool {
	_, ok := m.clearedFields[site.FieldOrchestratorID]
	return ok
}

// ResetOrchestratorID resets all changes to the "orchestrator_id" field.
func (m *SiteMutation) ResetOrchestratorID() {
	m.orchestrator = nil
	delete(m.clearedFields, site.FieldOrchestratorID)
}

// SetMetadata sets the "metadata" field.
func (m *SiteMutation) SetMetadata(s struct{}) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *SiteMutation) Metadata() (r struct{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldMetadata(ctx context.Context) (v struct{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *SiteMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[site.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *SiteMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[site.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *SiteMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, site.FieldMetadata)
}

// SetCreatedAt sets the "created_at" field.
func (m *SiteMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SiteMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SiteMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[site.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SiteMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[site.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SiteMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, site.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SiteMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SiteMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Site entity.
// If the Site object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SiteMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[site.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SiteMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[site.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SiteMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, site.FieldUpdatedAt)
}

// AddHostIDs adds the "hosts" edge to the Host entity by ids.
func (m *SiteMutation) AddHostIDs(ids ...uuid.UUID) {
	if m.hosts == nil {
		m.hosts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.hosts[ids[i]] = struct{}{}
	}
}

// ClearHosts clears the "hosts" edge to the Host entity.
func (m *SiteMutation) ClearHosts() {
	m.clearedhosts = true
}

// HostsCleared reports if the "hosts" edge to the Host entity was cleared.
func (m *SiteMutation) HostsCleared() bool {
	return m.clearedhosts
}

// RemoveHostIDs removes the "hosts" edge to the Host entity by IDs.
func (m *SiteMutation) RemoveHostIDs(ids ...uuid.UUID) {
	if m.removedhosts == nil {
		m.removedhosts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.hosts, ids[i])
		m.removedhosts[ids[i]] = struct{}{}
	}
}

// RemovedHosts returns the removed IDs of the "hosts" edge to the Host entity.
func (m *SiteMutation) RemovedHostsIDs() (ids []uuid.UUID) {
	for id := range m.removedhosts {
		ids = append(ids, id)
	}
	return
}

// HostsIDs returns the "hosts" edge IDs in the mutation.
func (m *SiteMutation) HostsIDs() (ids []uuid.UUID) {
	for id := range m.hosts {
		ids = append(ids, id)
	}
	return
}

// ResetHosts resets all changes to the "hosts" edge.
func (m *SiteMutation) ResetHosts() {
	m.hosts = nil
	m.clearedhosts = false
	m.removedhosts = nil
}

// ClearOrchestrator clears the "orchestrator" edge to the Orchestrator entity.
func (m *SiteMutation) ClearOrchestrator() {
	m.clearedorchestrator = true
	m.clearedFields[site.FieldOrchestratorID] = struct{}{}
}

// OrchestratorCleared reports if the "orchestrator" edge to the Orchestrator entity was cleared.
func (m *SiteMutation) OrchestratorCleared() bool {
	return m.OrchestratorIDCleared() || m.clearedorchestrator
}

// OrchestratorIDs returns the "orchestrator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrchestratorID instead. It exists only for internal usage by the builders.
func (m *SiteMutation) OrchestratorIDs() (ids []uuid.UUID) {
	if id := m.orchestrator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrchestrator resets all changes to the "orchestrator" edge.
func (m *SiteMutation) ResetOrchestrator() {
	m.orchestrator = nil
	m.clearedorchestrator = false
}

// Where appends a list predicates to the SiteMutation builder.
func (m *SiteMutation) Where(ps ...predicate.Site) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SiteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SiteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Site, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SiteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SiteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Site).
func (m *SiteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SiteMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.site_id != nil {
		fields = append(fields, site.FieldSiteID)
	}
	if m.name != nil {
		fields = append(fields, site.FieldName)
	}
	if m.description != nil {
		fields = append(fields, site.FieldDescription)
	}
	if m.location != nil {
		fields = append(fields, site.FieldLocation)
	}
	if m.orchestrator != nil {
		fields = append(fields, site.FieldOrchestratorID)
	}
	if m.metadata != nil {
		fields = append(fields, site.FieldMetadata)
	}
	if m.created_at != nil {
		fields = append(fields, site.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, site.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SiteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case site.FieldSiteID:
		return m.SiteID()
	case site.FieldName:
		return m.Name()
	case site.FieldDescription:
		return m.Description()
	case site.FieldLocation:
		return m.Location()
	case site.FieldOrchestratorID:
		return m.OrchestratorID()
	case site.FieldMetadata:
		return m.Metadata()
	case site.FieldCreatedAt:
		return m.CreatedAt()
	case site.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SiteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case site.FieldSiteID:
		return m.OldSiteID(ctx)
	case site.FieldName:
		return m.OldName(ctx)
	case site.FieldDescription:
		return m.OldDescription(ctx)
	case site.FieldLocation:
		return m.OldLocation(ctx)
	case site.FieldOrchestratorID:
		return m.OldOrchestratorID(ctx)
	case site.FieldMetadata:
		return m.OldMetadata(ctx)
	case site.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case site.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Site field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case site.FieldSiteID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSiteID(v)
		return nil
	case site.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case site.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case site.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case site.FieldOrchestratorID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrchestratorID(v)
		return nil
	case site.FieldMetadata:
		v, ok := value.(struct{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case site.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case site.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Site field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SiteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SiteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Site numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SiteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(site.FieldName) {
		fields = append(fields, site.FieldName)
	}
	if m.FieldCleared(site.FieldDescription) {
		fields = append(fields, site.FieldDescription)
	}
	if m.FieldCleared(site.FieldLocation) {
		fields = append(fields, site.FieldLocation)
	}
	if m.FieldCleared(site.FieldOrchestratorID) {
		fields = append(fields, site.FieldOrchestratorID)
	}
	if m.FieldCleared(site.FieldMetadata) {
		fields = append(fields, site.FieldMetadata)
	}
	if m.FieldCleared(site.FieldCreatedAt) {
		fields = append(fields, site.FieldCreatedAt)
	}
	if m.FieldCleared(site.FieldUpdatedAt) {
		fields = append(fields, site.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SiteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SiteMutation) ClearField(name string) error {
	switch name {
	case site.FieldName:
		m.ClearName()
		return nil
	case site.FieldDescription:
		m.ClearDescription()
		return nil
	case site.FieldLocation:
		m.ClearLocation()
		return nil
	case site.FieldOrchestratorID:
		m.ClearOrchestratorID()
		return nil
	case site.FieldMetadata:
		m.ClearMetadata()
		return nil
	case site.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case site.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Site nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SiteMutation) ResetField(name string) error {
	switch name {
	case site.FieldSiteID:
		m.ResetSiteID()
		return nil
	case site.FieldName:
		m.ResetName()
		return nil
	case site.FieldDescription:
		m.ResetDescription()
		return nil
	case site.FieldLocation:
		m.ResetLocation()
		return nil
	case site.FieldOrchestratorID:
		m.ResetOrchestratorID()
		return nil
	case site.FieldMetadata:
		m.ResetMetadata()
		return nil
	case site.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case site.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Site field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SiteMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.hosts != nil {
		edges = append(edges, site.EdgeHosts)
	}
	if m.orchestrator != nil {
		edges = append(edges, site.EdgeOrchestrator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SiteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case site.EdgeHosts:
		ids := make([]ent.Value, 0, len(m.hosts))
		for id := range m.hosts {
			ids = append(ids, id)
		}
		return ids
	case site.EdgeOrchestrator:
		if id := m.orchestrator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SiteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedhosts != nil {
		edges = append(edges, site.EdgeHosts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SiteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case site.EdgeHosts:
		ids := make([]ent.Value, 0, len(m.removedhosts))
		for id := range m.removedhosts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SiteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedhosts {
		edges = append(edges, site.EdgeHosts)
	}
	if m.clearedorchestrator {
		edges = append(edges, site.EdgeOrchestrator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SiteMutation) EdgeCleared(name string) bool {
	switch name {
	case site.EdgeHosts:
		return m.clearedhosts
	case site.EdgeOrchestrator:
		return m.clearedorchestrator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SiteMutation) ClearEdge(name string) error {
	switch name {
	case site.EdgeOrchestrator:
		m.ClearOrchestrator()
		return nil
	}
	return fmt.Errorf("unknown Site unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SiteMutation) ResetEdge(name string) error {
	switch name {
	case site.EdgeHosts:
		m.ResetHosts()
		return nil
	case site.EdgeOrchestrator:
		m.ResetOrchestrator()
		return nil
	}
	return fmt.Errorf("unknown Site edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
