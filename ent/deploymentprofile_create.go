// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/balaji-balu/margo-hello-world/ent/applicationdesc"
	"github.com/balaji-balu/margo-hello-world/ent/component"
	"github.com/balaji-balu/margo-hello-world/ent/deploymentprofile"
)

// DeploymentProfileCreate is the builder for creating a DeploymentProfile entity.
type DeploymentProfileCreate struct {
	config
	mutation *DeploymentProfileMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (_c *DeploymentProfileCreate) SetType(v string) *DeploymentProfileCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *DeploymentProfileCreate) SetNillableType(v *string) *DeploymentProfileCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *DeploymentProfileCreate) SetDescription(v string) *DeploymentProfileCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *DeploymentProfileCreate) SetNillableDescription(v *string) *DeploymentProfileCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetCPUCores sets the "cpu_cores" field.
func (_c *DeploymentProfileCreate) SetCPUCores(v float64) *DeploymentProfileCreate {
	_c.mutation.SetCPUCores(v)
	return _c
}

// SetNillableCPUCores sets the "cpu_cores" field if the given value is not nil.
func (_c *DeploymentProfileCreate) SetNillableCPUCores(v *float64) *DeploymentProfileCreate {
	if v != nil {
		_c.SetCPUCores(*v)
	}
	return _c
}

// SetMemory sets the "memory" field.
func (_c *DeploymentProfileCreate) SetMemory(v string) *DeploymentProfileCreate {
	_c.mutation.SetMemory(v)
	return _c
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (_c *DeploymentProfileCreate) SetNillableMemory(v *string) *DeploymentProfileCreate {
	if v != nil {
		_c.SetMemory(*v)
	}
	return _c
}

// SetStorage sets the "storage" field.
func (_c *DeploymentProfileCreate) SetStorage(v string) *DeploymentProfileCreate {
	_c.mutation.SetStorage(v)
	return _c
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (_c *DeploymentProfileCreate) SetNillableStorage(v *string) *DeploymentProfileCreate {
	if v != nil {
		_c.SetStorage(*v)
	}
	return _c
}

// SetCPUArchitectures sets the "cpu_architectures" field.
func (_c *DeploymentProfileCreate) SetCPUArchitectures(v []string) *DeploymentProfileCreate {
	_c.mutation.SetCPUArchitectures(v)
	return _c
}

// SetPeripherals sets the "peripherals" field.
func (_c *DeploymentProfileCreate) SetPeripherals(v []map[string]interface{}) *DeploymentProfileCreate {
	_c.mutation.SetPeripherals(v)
	return _c
}

// SetInterfaces sets the "interfaces" field.
func (_c *DeploymentProfileCreate) SetInterfaces(v []map[string]interface{}) *DeploymentProfileCreate {
	_c.mutation.SetInterfaces(v)
	return _c
}

// SetAppID sets the "app_id" field.
func (_c *DeploymentProfileCreate) SetAppID(v string) *DeploymentProfileCreate {
	_c.mutation.SetAppID(v)
	return _c
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (_c *DeploymentProfileCreate) SetNillableAppID(v *string) *DeploymentProfileCreate {
	if v != nil {
		_c.SetAppID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *DeploymentProfileCreate) SetID(v string) *DeploymentProfileCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (_c *DeploymentProfileCreate) AddComponentIDs(ids ...uint) *DeploymentProfileCreate {
	_c.mutation.AddComponentIDs(ids...)
	return _c
}

// AddComponents adds the "components" edges to the Component entity.
func (_c *DeploymentProfileCreate) AddComponents(v ...*Component) *DeploymentProfileCreate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddComponentIDs(ids...)
}

// SetApplicationDescID sets the "application_desc" edge to the ApplicationDesc entity by ID.
func (_c *DeploymentProfileCreate) SetApplicationDescID(id string) *DeploymentProfileCreate {
	_c.mutation.SetApplicationDescID(id)
	return _c
}

// SetNillableApplicationDescID sets the "application_desc" edge to the ApplicationDesc entity by ID if the given value is not nil.
func (_c *DeploymentProfileCreate) SetNillableApplicationDescID(id *string) *DeploymentProfileCreate {
	if id != nil {
		_c = _c.SetApplicationDescID(*id)
	}
	return _c
}

// SetApplicationDesc sets the "application_desc" edge to the ApplicationDesc entity.
func (_c *DeploymentProfileCreate) SetApplicationDesc(v *ApplicationDesc) *DeploymentProfileCreate {
	return _c.SetApplicationDescID(v.ID)
}

// Mutation returns the DeploymentProfileMutation object of the builder.
func (_c *DeploymentProfileCreate) Mutation() *DeploymentProfileMutation {
	return _c.mutation
}

// Save creates the DeploymentProfile in the database.
func (_c *DeploymentProfileCreate) Save(ctx context.Context) (*DeploymentProfile, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DeploymentProfileCreate) SaveX(ctx context.Context) *DeploymentProfile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DeploymentProfileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DeploymentProfileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DeploymentProfileCreate) check() error {
	return nil
}

func (_c *DeploymentProfileCreate) sqlSave(ctx context.Context) (*DeploymentProfile, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected DeploymentProfile.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DeploymentProfileCreate) createSpec() (*DeploymentProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &DeploymentProfile{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(deploymentprofile.Table, sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(deploymentprofile.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(deploymentprofile.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.CPUCores(); ok {
		_spec.SetField(deploymentprofile.FieldCPUCores, field.TypeFloat64, value)
		_node.CPUCores = value
	}
	if value, ok := _c.mutation.Memory(); ok {
		_spec.SetField(deploymentprofile.FieldMemory, field.TypeString, value)
		_node.Memory = value
	}
	if value, ok := _c.mutation.Storage(); ok {
		_spec.SetField(deploymentprofile.FieldStorage, field.TypeString, value)
		_node.Storage = value
	}
	if value, ok := _c.mutation.CPUArchitectures(); ok {
		_spec.SetField(deploymentprofile.FieldCPUArchitectures, field.TypeJSON, value)
		_node.CPUArchitectures = value
	}
	if value, ok := _c.mutation.Peripherals(); ok {
		_spec.SetField(deploymentprofile.FieldPeripherals, field.TypeJSON, value)
		_node.Peripherals = value
	}
	if value, ok := _c.mutation.Interfaces(); ok {
		_spec.SetField(deploymentprofile.FieldInterfaces, field.TypeJSON, value)
		_node.Interfaces = value
	}
	if nodes := _c.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentprofile.ComponentsTable,
			Columns: []string{deploymentprofile.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ApplicationDescIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.ApplicationDescTable,
			Columns: []string{deploymentprofile.ApplicationDescColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdesc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeploymentProfileCreateBulk is the builder for creating many DeploymentProfile entities in bulk.
type DeploymentProfileCreateBulk struct {
	config
	err      error
	builders []*DeploymentProfileCreate
}

// Save creates the DeploymentProfile entities in the database.
func (_c *DeploymentProfileCreateBulk) Save(ctx context.Context) ([]*DeploymentProfile, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*DeploymentProfile, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeploymentProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DeploymentProfileCreateBulk) SaveX(ctx context.Context) []*DeploymentProfile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DeploymentProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DeploymentProfileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
