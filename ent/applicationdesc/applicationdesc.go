// Code generated by ent, DO NOT EDIT.

package applicationdesc

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the applicationdesc type in the database.
	Label = "application_desc"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "app_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVendor holds the string denoting the vendor field in the database.
	FieldVendor = "vendor"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldArtifacturl holds the string denoting the artifacturl field in the database.
	FieldArtifacturl = "artifacturl"
	// FieldSite holds the string denoting the site field in the database.
	FieldSite = "site"
	// FieldTagLine holds the string denoting the tag_line field in the database.
	FieldTagLine = "tag_line"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldPublished holds the string denoting the published field in the database.
	FieldPublished = "published"
	// EdgeDeploymentProfiles holds the string denoting the deployment_profiles edge name in mutations.
	EdgeDeploymentProfiles = "deployment_profiles"
	// DeploymentProfileFieldID holds the string denoting the ID field of the DeploymentProfile.
	DeploymentProfileFieldID = "id"
	// Table holds the table name of the applicationdesc in the database.
	Table = "application_desc"
	// DeploymentProfilesTable is the table that holds the deployment_profiles relation/edge.
	DeploymentProfilesTable = "deployment_profile"
	// DeploymentProfilesInverseTable is the table name for the DeploymentProfile entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentprofile" package.
	DeploymentProfilesInverseTable = "deployment_profile"
	// DeploymentProfilesColumn is the table column denoting the deployment_profiles relation/edge.
	DeploymentProfilesColumn = "app_id"
)

// Columns holds all SQL columns for applicationdesc fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldVendor,
	FieldVersion,
	FieldCategory,
	FieldDescription,
	FieldIcon,
	FieldArtifacturl,
	FieldSite,
	FieldTagLine,
	FieldTags,
	FieldPublished,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ApplicationDesc queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVendor orders the results by the vendor field.
func ByVendor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendor, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByArtifacturl orders the results by the artifacturl field.
func ByArtifacturl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtifacturl, opts...).ToFunc()
}

// BySite orders the results by the site field.
func BySite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSite, opts...).ToFunc()
}

// ByTagLine orders the results by the tag_line field.
func ByTagLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTagLine, opts...).ToFunc()
}

// ByPublished orders the results by the published field.
func ByPublished(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublished, opts...).ToFunc()
}

// ByDeploymentProfilesCount orders the results by deployment_profiles count.
func ByDeploymentProfilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeploymentProfilesStep(), opts...)
	}
}

// ByDeploymentProfiles orders the results by deployment_profiles terms.
func ByDeploymentProfiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentProfilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeploymentProfilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentProfilesInverseTable, DeploymentProfileFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeploymentProfilesTable, DeploymentProfilesColumn),
	)
}
