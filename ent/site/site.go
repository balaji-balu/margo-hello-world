// Code generated by ent, DO NOT EDIT.

package site

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the site type in the database.
	Label = "site"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSiteID holds the string denoting the site_id field in the database.
	FieldSiteID = "site_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldOrchestratorID holds the string denoting the orchestrator_id field in the database.
	FieldOrchestratorID = "orchestrator_id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeHosts holds the string denoting the hosts edge name in mutations.
	EdgeHosts = "hosts"
	// EdgeOrchestrator holds the string denoting the orchestrator edge name in mutations.
	EdgeOrchestrator = "orchestrator"
	// Table holds the table name of the site in the database.
	Table = "site"
	// HostsTable is the table that holds the hosts relation/edge.
	HostsTable = "host"
	// HostsInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostsInverseTable = "host"
	// HostsColumn is the table column denoting the hosts relation/edge.
	HostsColumn = "site_id"
	// OrchestratorTable is the table that holds the orchestrator relation/edge.
	OrchestratorTable = "site"
	// OrchestratorInverseTable is the table name for the Orchestrator entity.
	// It exists in this package in order to avoid circular dependency with the "orchestrator" package.
	OrchestratorInverseTable = "orchestrator"
	// OrchestratorColumn is the table column denoting the orchestrator relation/edge.
	OrchestratorColumn = "orchestrator_id"
)

// Columns holds all SQL columns for site fields.
var Columns = []string{
	FieldID,
	FieldSiteID,
	FieldName,
	FieldDescription,
	FieldLocation,
	FieldOrchestratorID,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Site queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySiteID orders the results by the site_id field.
func BySiteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSiteID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByOrchestratorID orders the results by the orchestrator_id field.
func ByOrchestratorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrchestratorID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByHostsCount orders the results by hosts count.
func ByHostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostsStep(), opts...)
	}
}

// ByHosts orders the results by hosts terms.
func ByHosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrchestratorField orders the results by orchestrator field.
func ByOrchestratorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrchestratorStep(), sql.OrderByField(field, opts...))
	}
}
func newHostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HostsTable, HostsColumn),
	)
}
func newOrchestratorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrchestratorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrchestratorTable, OrchestratorColumn),
	)
}
