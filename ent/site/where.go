// Code generated by ent, DO NOT EDIT.

package site

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/balaji/hello/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldLTE(FieldID, id))
}

// SiteID applies equality check predicate on the "site_id" field. It's identical to SiteIDEQ.
func SiteID(v string) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldSiteID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldDescription, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldLocation, v))
}

// OrchestratorID applies equality check predicate on the "orchestrator_id" field. It's identical to OrchestratorIDEQ.
func OrchestratorID(v uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldOrchestratorID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldUpdatedAt, v))
}

// SiteIDEQ applies the EQ predicate on the "site_id" field.
func SiteIDEQ(v string) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldSiteID, v))
}

// SiteIDNEQ applies the NEQ predicate on the "site_id" field.
func SiteIDNEQ(v string) predicate.Site {
	return predicate.Site(sql.FieldNEQ(FieldSiteID, v))
}

// SiteIDIn applies the In predicate on the "site_id" field.
func SiteIDIn(vs ...string) predicate.Site {
	return predicate.Site(sql.FieldIn(FieldSiteID, vs...))
}

// SiteIDNotIn applies the NotIn predicate on the "site_id" field.
func SiteIDNotIn(vs ...string) predicate.Site {
	return predicate.Site(sql.FieldNotIn(FieldSiteID, vs...))
}

// SiteIDGT applies the GT predicate on the "site_id" field.
func SiteIDGT(v string) predicate.Site {
	return predicate.Site(sql.FieldGT(FieldSiteID, v))
}

// SiteIDGTE applies the GTE predicate on the "site_id" field.
func SiteIDGTE(v string) predicate.Site {
	return predicate.Site(sql.FieldGTE(FieldSiteID, v))
}

// SiteIDLT applies the LT predicate on the "site_id" field.
func SiteIDLT(v string) predicate.Site {
	return predicate.Site(sql.FieldLT(FieldSiteID, v))
}

// SiteIDLTE applies the LTE predicate on the "site_id" field.
func SiteIDLTE(v string) predicate.Site {
	return predicate.Site(sql.FieldLTE(FieldSiteID, v))
}

// SiteIDContains applies the Contains predicate on the "site_id" field.
func SiteIDContains(v string) predicate.Site {
	return predicate.Site(sql.FieldContains(FieldSiteID, v))
}

// SiteIDHasPrefix applies the HasPrefix predicate on the "site_id" field.
func SiteIDHasPrefix(v string) predicate.Site {
	return predicate.Site(sql.FieldHasPrefix(FieldSiteID, v))
}

// SiteIDHasSuffix applies the HasSuffix predicate on the "site_id" field.
func SiteIDHasSuffix(v string) predicate.Site {
	return predicate.Site(sql.FieldHasSuffix(FieldSiteID, v))
}

// SiteIDEqualFold applies the EqualFold predicate on the "site_id" field.
func SiteIDEqualFold(v string) predicate.Site {
	return predicate.Site(sql.FieldEqualFold(FieldSiteID, v))
}

// SiteIDContainsFold applies the ContainsFold predicate on the "site_id" field.
func SiteIDContainsFold(v string) predicate.Site {
	return predicate.Site(sql.FieldContainsFold(FieldSiteID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Site {
	return predicate.Site(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Site {
	return predicate.Site(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Site {
	return predicate.Site(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Site {
	return predicate.Site(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Site {
	return predicate.Site(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Site {
	return predicate.Site(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Site {
	return predicate.Site(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Site {
	return predicate.Site(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Site {
	return predicate.Site(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Site {
	return predicate.Site(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Site {
	return predicate.Site(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Site {
	return predicate.Site(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Site {
	return predicate.Site(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Site {
	return predicate.Site(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Site {
	return predicate.Site(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Site {
	return predicate.Site(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Site {
	return predicate.Site(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Site {
	return predicate.Site(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Site {
	return predicate.Site(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Site {
	return predicate.Site(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Site {
	return predicate.Site(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Site {
	return predicate.Site(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Site {
	return predicate.Site(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Site {
	return predicate.Site(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Site {
	return predicate.Site(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Site {
	return predicate.Site(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Site {
	return predicate.Site(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Site {
	return predicate.Site(sql.FieldContainsFold(FieldDescription, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Site {
	return predicate.Site(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Site {
	return predicate.Site(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Site {
	return predicate.Site(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Site {
	return predicate.Site(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Site {
	return predicate.Site(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Site {
	return predicate.Site(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Site {
	return predicate.Site(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Site {
	return predicate.Site(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Site {
	return predicate.Site(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Site {
	return predicate.Site(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Site {
	return predicate.Site(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Site {
	return predicate.Site(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Site {
	return predicate.Site(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Site {
	return predicate.Site(sql.FieldContainsFold(FieldLocation, v))
}

// OrchestratorIDEQ applies the EQ predicate on the "orchestrator_id" field.
func OrchestratorIDEQ(v uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldOrchestratorID, v))
}

// OrchestratorIDNEQ applies the NEQ predicate on the "orchestrator_id" field.
func OrchestratorIDNEQ(v uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldNEQ(FieldOrchestratorID, v))
}

// OrchestratorIDIn applies the In predicate on the "orchestrator_id" field.
func OrchestratorIDIn(vs ...uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldIn(FieldOrchestratorID, vs...))
}

// OrchestratorIDNotIn applies the NotIn predicate on the "orchestrator_id" field.
func OrchestratorIDNotIn(vs ...uuid.UUID) predicate.Site {
	return predicate.Site(sql.FieldNotIn(FieldOrchestratorID, vs...))
}

// OrchestratorIDIsNil applies the IsNil predicate on the "orchestrator_id" field.
func OrchestratorIDIsNil() predicate.Site {
	return predicate.Site(sql.FieldIsNull(FieldOrchestratorID))
}

// OrchestratorIDNotNil applies the NotNil predicate on the "orchestrator_id" field.
func OrchestratorIDNotNil() predicate.Site {
	return predicate.Site(sql.FieldNotNull(FieldOrchestratorID))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Site {
	return predicate.Site(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Site {
	return predicate.Site(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Site {
	return predicate.Site(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Site {
	return predicate.Site(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Site {
	return predicate.Site(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Site {
	return predicate.Site(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Site {
	return predicate.Site(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Site {
	return predicate.Site(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Site {
	return predicate.Site(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Site {
	return predicate.Site(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Site {
	return predicate.Site(sql.FieldNotNull(FieldUpdatedAt))
}

// HasHosts applies the HasEdge predicate on the "hosts" edge.
func HasHosts() predicate.Site {
	return predicate.Site(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HostsTable, HostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostsWith applies the HasEdge predicate on the "hosts" edge with a given conditions (other predicates).
func HasHostsWith(preds ...predicate.Host) predicate.Site {
	return predicate.Site(func(s *sql.Selector) {
		step := newHostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrchestrator applies the HasEdge predicate on the "orchestrator" edge.
func HasOrchestrator() predicate.Site {
	return predicate.Site(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrchestratorTable, OrchestratorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrchestratorWith applies the HasEdge predicate on the "orchestrator" edge with a given conditions (other predicates).
func HasOrchestratorWith(preds ...predicate.Orchestrator) predicate.Site {
	return predicate.Site(func(s *sql.Selector) {
		step := newOrchestratorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Site) predicate.Site {
	return predicate.Site(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Site) predicate.Site {
	return predicate.Site(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Site) predicate.Site {
	return predicate.Site(sql.NotPredicates(p))
}
