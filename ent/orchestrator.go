// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/balaji/hello/ent/orchestrator"
	"github.com/google/uuid"
)

// Orchestrator is the model entity for the Orchestrator schema.
type Orchestrator struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// APIEndpoint holds the value of the "api_endpoint" field.
	APIEndpoint string `json:"api_endpoint,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrchestratorQuery when eager-loading is set.
	Edges        OrchestratorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrchestratorEdges holds the relations/edges for other nodes in the graph.
type OrchestratorEdges struct {
	// Sites holds the value of the sites edge.
	Sites []*Site `json:"sites,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SitesOrErr returns the Sites value or an error if the edge
// was not loaded in eager-loading.
func (e OrchestratorEdges) SitesOrErr() ([]*Site, error) {
	if e.loadedTypes[0] {
		return e.Sites, nil
	}
	return nil, &NotLoadedError{edge: "sites"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Orchestrator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orchestrator.FieldName, orchestrator.FieldType, orchestrator.FieldRegion, orchestrator.FieldAPIEndpoint:
			values[i] = new(sql.NullString)
		case orchestrator.FieldCreatedAt, orchestrator.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case orchestrator.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Orchestrator fields.
func (_m *Orchestrator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orchestrator.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case orchestrator.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case orchestrator.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case orchestrator.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				_m.Region = value.String
			}
		case orchestrator.FieldAPIEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_endpoint", values[i])
			} else if value.Valid {
				_m.APIEndpoint = value.String
			}
		case orchestrator.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case orchestrator.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Orchestrator.
// This includes values selected through modifiers, order, etc.
func (_m *Orchestrator) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySites queries the "sites" edge of the Orchestrator entity.
func (_m *Orchestrator) QuerySites() *SiteQuery {
	return NewOrchestratorClient(_m.config).QuerySites(_m)
}

// Update returns a builder for updating this Orchestrator.
// Note that you need to call Orchestrator.Unwrap() before calling this method if this Orchestrator
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Orchestrator) Update() *OrchestratorUpdateOne {
	return NewOrchestratorClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Orchestrator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Orchestrator) Unwrap() *Orchestrator {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Orchestrator is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Orchestrator) String() string {
	var builder strings.Builder
	builder.WriteString("Orchestrator(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(_m.Region)
	builder.WriteString(", ")
	builder.WriteString("api_endpoint=")
	builder.WriteString(_m.APIEndpoint)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Orchestrators is a parsable slice of Orchestrator.
type Orchestrators []*Orchestrator
