// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ApplicationDescColumns holds the columns for the "application_desc" table.
	ApplicationDescColumns = []*schema.Column{
		{Name: "app_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "vendor", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "category", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "icon", Type: field.TypeString, Nullable: true},
		{Name: "artifacturl", Type: field.TypeString, Nullable: true},
		{Name: "site", Type: field.TypeString, Nullable: true},
		{Name: "tag_line", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "published", Type: field.TypeString, Nullable: true},
	}
	// ApplicationDescTable holds the schema information for the "application_desc" table.
	ApplicationDescTable = &schema.Table{
		Name:       "application_desc",
		Columns:    ApplicationDescColumns,
		PrimaryKey: []*schema.Column{ApplicationDescColumns[0]},
	}
	// ComponentColumns holds the columns for the "component" table.
	ComponentColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "properties", Type: field.TypeJSON, Nullable: true},
		{Name: "deployment_profile_id", Type: field.TypeString, Nullable: true},
	}
	// ComponentTable holds the schema information for the "component" table.
	ComponentTable = &schema.Table{
		Name:       "component",
		Columns:    ComponentColumns,
		PrimaryKey: []*schema.Column{ComponentColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "component_deployment_profile_components",
				Columns:    []*schema.Column{ComponentColumns[3]},
				RefColumns: []*schema.Column{DeploymentProfileColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DeploymentProfileColumns holds the columns for the "deployment_profile" table.
	DeploymentProfileColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "cpu_cores", Type: field.TypeFloat64, Nullable: true},
		{Name: "memory", Type: field.TypeString, Nullable: true},
		{Name: "storage", Type: field.TypeString, Nullable: true},
		{Name: "cpu_architectures", Type: field.TypeJSON, Nullable: true},
		{Name: "peripherals", Type: field.TypeJSON, Nullable: true},
		{Name: "interfaces", Type: field.TypeJSON, Nullable: true},
		{Name: "app_id", Type: field.TypeString, Nullable: true},
	}
	// DeploymentProfileTable holds the schema information for the "deployment_profile" table.
	DeploymentProfileTable = &schema.Table{
		Name:       "deployment_profile",
		Columns:    DeploymentProfileColumns,
		PrimaryKey: []*schema.Column{DeploymentProfileColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "deployment_profile_application_desc_deployment_profiles",
				Columns:    []*schema.Column{DeploymentProfileColumns[9]},
				RefColumns: []*schema.Column{ApplicationDescColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HostColumns holds the columns for the "host" table.
	HostColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "host_id", Type: field.TypeString, Unique: true},
		{Name: "hostname", Type: field.TypeString, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "edge_url", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "last_heartbeat", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "site_id", Type: field.TypeUUID, Nullable: true},
	}
	// HostTable holds the schema information for the "host" table.
	HostTable = &schema.Table{
		Name:       "host",
		Columns:    HostColumns,
		PrimaryKey: []*schema.Column{HostColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "host_site_hosts",
				Columns:    []*schema.Column{HostColumns[10]},
				RefColumns: []*schema.Column{SiteColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrchestratorColumns holds the columns for the "orchestrator" table.
	OrchestratorColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "region", Type: field.TypeString, Nullable: true},
		{Name: "api_endpoint", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// OrchestratorTable holds the schema information for the "orchestrator" table.
	OrchestratorTable = &schema.Table{
		Name:       "orchestrator",
		Columns:    OrchestratorColumns,
		PrimaryKey: []*schema.Column{OrchestratorColumns[0]},
	}
	// SiteColumns holds the columns for the "site" table.
	SiteColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "site_id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "orchestrator_id", Type: field.TypeUUID, Nullable: true},
	}
	// SiteTable holds the schema information for the "site" table.
	SiteTable = &schema.Table{
		Name:       "site",
		Columns:    SiteColumns,
		PrimaryKey: []*schema.Column{SiteColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "site_orchestrator_sites",
				Columns:    []*schema.Column{SiteColumns[8]},
				RefColumns: []*schema.Column{OrchestratorColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ApplicationDescTable,
		ComponentTable,
		DeploymentProfileTable,
		HostTable,
		OrchestratorTable,
		SiteTable,
		UsersTable,
	}
)

func init() {
	ApplicationDescTable.Annotation = &entsql.Annotation{
		Table: "application_desc",
	}
	ComponentTable.ForeignKeys[0].RefTable = DeploymentProfileTable
	ComponentTable.Annotation = &entsql.Annotation{
		Table: "component",
	}
	DeploymentProfileTable.ForeignKeys[0].RefTable = ApplicationDescTable
	DeploymentProfileTable.Annotation = &entsql.Annotation{
		Table: "deployment_profile",
	}
	HostTable.ForeignKeys[0].RefTable = SiteTable
	HostTable.Annotation = &entsql.Annotation{
		Table: "host",
	}
	OrchestratorTable.Annotation = &entsql.Annotation{
		Table: "orchestrator",
	}
	SiteTable.ForeignKeys[0].RefTable = OrchestratorTable
	SiteTable.Annotation = &entsql.Annotation{
		Table: "site",
	}
}
