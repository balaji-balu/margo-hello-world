// Code generated by ent, DO NOT EDIT.

package orchestrator

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orchestrator type in the database.
	Label = "orchestrator"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldAPIEndpoint holds the string denoting the api_endpoint field in the database.
	FieldAPIEndpoint = "api_endpoint"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSites holds the string denoting the sites edge name in mutations.
	EdgeSites = "sites"
	// Table holds the table name of the orchestrator in the database.
	Table = "orchestrator"
	// SitesTable is the table that holds the sites relation/edge.
	SitesTable = "site"
	// SitesInverseTable is the table name for the Site entity.
	// It exists in this package in order to avoid circular dependency with the "site" package.
	SitesInverseTable = "site"
	// SitesColumn is the table column denoting the sites relation/edge.
	SitesColumn = "orchestrator_id"
)

// Columns holds all SQL columns for orchestrator fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldRegion,
	FieldAPIEndpoint,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Orchestrator queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByRegion orders the results by the region field.
func ByRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegion, opts...).ToFunc()
}

// ByAPIEndpoint orders the results by the api_endpoint field.
func ByAPIEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIEndpoint, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySitesCount orders the results by sites count.
func BySitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSitesStep(), opts...)
	}
}

// BySites orders the results by sites terms.
func BySites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SitesTable, SitesColumn),
	)
}
