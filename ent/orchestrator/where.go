// Code generated by ent, DO NOT EDIT.

package orchestrator

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/balaji/hello/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldType, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldRegion, v))
}

// APIEndpoint applies equality check predicate on the "api_endpoint" field. It's identical to APIEndpointEQ.
func APIEndpoint(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldAPIEndpoint, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldContainsFold(FieldType, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionIsNil applies the IsNil predicate on the "region" field.
func RegionIsNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIsNull(FieldRegion))
}

// RegionNotNil applies the NotNil predicate on the "region" field.
func RegionNotNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotNull(FieldRegion))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldContainsFold(FieldRegion, v))
}

// APIEndpointEQ applies the EQ predicate on the "api_endpoint" field.
func APIEndpointEQ(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldAPIEndpoint, v))
}

// APIEndpointNEQ applies the NEQ predicate on the "api_endpoint" field.
func APIEndpointNEQ(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNEQ(FieldAPIEndpoint, v))
}

// APIEndpointIn applies the In predicate on the "api_endpoint" field.
func APIEndpointIn(vs ...string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIn(FieldAPIEndpoint, vs...))
}

// APIEndpointNotIn applies the NotIn predicate on the "api_endpoint" field.
func APIEndpointNotIn(vs ...string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotIn(FieldAPIEndpoint, vs...))
}

// APIEndpointGT applies the GT predicate on the "api_endpoint" field.
func APIEndpointGT(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGT(FieldAPIEndpoint, v))
}

// APIEndpointGTE applies the GTE predicate on the "api_endpoint" field.
func APIEndpointGTE(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGTE(FieldAPIEndpoint, v))
}

// APIEndpointLT applies the LT predicate on the "api_endpoint" field.
func APIEndpointLT(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLT(FieldAPIEndpoint, v))
}

// APIEndpointLTE applies the LTE predicate on the "api_endpoint" field.
func APIEndpointLTE(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLTE(FieldAPIEndpoint, v))
}

// APIEndpointContains applies the Contains predicate on the "api_endpoint" field.
func APIEndpointContains(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldContains(FieldAPIEndpoint, v))
}

// APIEndpointHasPrefix applies the HasPrefix predicate on the "api_endpoint" field.
func APIEndpointHasPrefix(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldHasPrefix(FieldAPIEndpoint, v))
}

// APIEndpointHasSuffix applies the HasSuffix predicate on the "api_endpoint" field.
func APIEndpointHasSuffix(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldHasSuffix(FieldAPIEndpoint, v))
}

// APIEndpointIsNil applies the IsNil predicate on the "api_endpoint" field.
func APIEndpointIsNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIsNull(FieldAPIEndpoint))
}

// APIEndpointNotNil applies the NotNil predicate on the "api_endpoint" field.
func APIEndpointNotNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotNull(FieldAPIEndpoint))
}

// APIEndpointEqualFold applies the EqualFold predicate on the "api_endpoint" field.
func APIEndpointEqualFold(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEqualFold(FieldAPIEndpoint, v))
}

// APIEndpointContainsFold applies the ContainsFold predicate on the "api_endpoint" field.
func APIEndpointContainsFold(v string) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldContainsFold(FieldAPIEndpoint, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Orchestrator {
	return predicate.Orchestrator(sql.FieldNotNull(FieldUpdatedAt))
}

// HasSites applies the HasEdge predicate on the "sites" edge.
func HasSites() predicate.Orchestrator {
	return predicate.Orchestrator(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SitesTable, SitesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSitesWith applies the HasEdge predicate on the "sites" edge with a given conditions (other predicates).
func HasSitesWith(preds ...predicate.Site) predicate.Orchestrator {
	return predicate.Orchestrator(func(s *sql.Selector) {
		step := newSitesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Orchestrator) predicate.Orchestrator {
	return predicate.Orchestrator(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Orchestrator) predicate.Orchestrator {
	return predicate.Orchestrator(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Orchestrator) predicate.Orchestrator {
	return predicate.Orchestrator(sql.NotPredicates(p))
}
