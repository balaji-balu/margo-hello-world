// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/balaji/hello/ent/applicationdesc"
)

// ApplicationDesc is the model entity for the ApplicationDesc schema.
type ApplicationDesc struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Vendor holds the value of the "vendor" field.
	Vendor string `json:"vendor,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Artifacturl holds the value of the "artifacturl" field.
	Artifacturl string `json:"artifacturl,omitempty"`
	// Site holds the value of the "site" field.
	Site string `json:"site,omitempty"`
	// TagLine holds the value of the "tag_line" field.
	TagLine string `json:"tag_line,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Published holds the value of the "published" field.
	Published string `json:"published,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicationDescQuery when eager-loading is set.
	Edges        ApplicationDescEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApplicationDescEdges holds the relations/edges for other nodes in the graph.
type ApplicationDescEdges struct {
	// DeploymentProfiles holds the value of the deployment_profiles edge.
	DeploymentProfiles []*DeploymentProfile `json:"deployment_profiles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeploymentProfilesOrErr returns the DeploymentProfiles value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicationDescEdges) DeploymentProfilesOrErr() ([]*DeploymentProfile, error) {
	if e.loadedTypes[0] {
		return e.DeploymentProfiles, nil
	}
	return nil, &NotLoadedError{edge: "deployment_profiles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicationDesc) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicationdesc.FieldTags:
			values[i] = new([]byte)
		case applicationdesc.FieldID, applicationdesc.FieldName, applicationdesc.FieldVendor, applicationdesc.FieldVersion, applicationdesc.FieldCategory, applicationdesc.FieldDescription, applicationdesc.FieldIcon, applicationdesc.FieldArtifacturl, applicationdesc.FieldSite, applicationdesc.FieldTagLine, applicationdesc.FieldPublished:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicationDesc fields.
func (_m *ApplicationDesc) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicationdesc.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case applicationdesc.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case applicationdesc.FieldVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor", values[i])
			} else if value.Valid {
				_m.Vendor = value.String
			}
		case applicationdesc.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = value.String
			}
		case applicationdesc.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = value.String
			}
		case applicationdesc.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case applicationdesc.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				_m.Icon = value.String
			}
		case applicationdesc.FieldArtifacturl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artifacturl", values[i])
			} else if value.Valid {
				_m.Artifacturl = value.String
			}
		case applicationdesc.FieldSite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site", values[i])
			} else if value.Valid {
				_m.Site = value.String
			}
		case applicationdesc.FieldTagLine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag_line", values[i])
			} else if value.Valid {
				_m.TagLine = value.String
			}
		case applicationdesc.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case applicationdesc.FieldPublished:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field published", values[i])
			} else if value.Valid {
				_m.Published = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApplicationDesc.
// This includes values selected through modifiers, order, etc.
func (_m *ApplicationDesc) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDeploymentProfiles queries the "deployment_profiles" edge of the ApplicationDesc entity.
func (_m *ApplicationDesc) QueryDeploymentProfiles() *DeploymentProfileQuery {
	return NewApplicationDescClient(_m.config).QueryDeploymentProfiles(_m)
}

// Update returns a builder for updating this ApplicationDesc.
// Note that you need to call ApplicationDesc.Unwrap() before calling this method if this ApplicationDesc
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ApplicationDesc) Update() *ApplicationDescUpdateOne {
	return NewApplicationDescClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ApplicationDesc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ApplicationDesc) Unwrap() *ApplicationDesc {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplicationDesc is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ApplicationDesc) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicationDesc(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("vendor=")
	builder.WriteString(_m.Vendor)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(_m.Version)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(_m.Category)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(_m.Icon)
	builder.WriteString(", ")
	builder.WriteString("artifacturl=")
	builder.WriteString(_m.Artifacturl)
	builder.WriteString(", ")
	builder.WriteString("site=")
	builder.WriteString(_m.Site)
	builder.WriteString(", ")
	builder.WriteString("tag_line=")
	builder.WriteString(_m.TagLine)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("published=")
	builder.WriteString(_m.Published)
	builder.WriteByte(')')
	return builder.String()
}

// ApplicationDescs is a parsable slice of ApplicationDesc.
type ApplicationDescs []*ApplicationDesc
