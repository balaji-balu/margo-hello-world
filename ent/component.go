// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/balaji/hello/ent/component"
	"github.com/balaji/hello/ent/deploymentprofile"
	"github.com/balaji/hello/pkg/application"
)

// Component is the model entity for the Component schema.
type Component struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// DeploymentProfileID holds the value of the "deployment_profile_id" field.
	DeploymentProfileID string `json:"deployment_profile_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Properties holds the value of the "properties" field.
	Properties application.ComponentProperties `json:"properties,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ComponentQuery when eager-loading is set.
	Edges        ComponentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ComponentEdges holds the relations/edges for other nodes in the graph.
type ComponentEdges struct {
	// DeploymentProfile holds the value of the deployment_profile edge.
	DeploymentProfile *DeploymentProfile `json:"deployment_profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeploymentProfileOrErr returns the DeploymentProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ComponentEdges) DeploymentProfileOrErr() (*DeploymentProfile, error) {
	if e.DeploymentProfile != nil {
		return e.DeploymentProfile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: deploymentprofile.Label}
	}
	return nil, &NotLoadedError{edge: "deployment_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Component) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case component.FieldProperties:
			values[i] = new([]byte)
		case component.FieldID:
			values[i] = new(sql.NullInt64)
		case component.FieldDeploymentProfileID, component.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Component fields.
func (_m *Component) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case component.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint(value.Int64)
		case component.FieldDeploymentProfileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_profile_id", values[i])
			} else if value.Valid {
				_m.DeploymentProfileID = value.String
			}
		case component.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case component.FieldProperties:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field properties", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Properties); err != nil {
					return fmt.Errorf("unmarshal field properties: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Component.
// This includes values selected through modifiers, order, etc.
func (_m *Component) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDeploymentProfile queries the "deployment_profile" edge of the Component entity.
func (_m *Component) QueryDeploymentProfile() *DeploymentProfileQuery {
	return NewComponentClient(_m.config).QueryDeploymentProfile(_m)
}

// Update returns a builder for updating this Component.
// Note that you need to call Component.Unwrap() before calling this method if this Component
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Component) Update() *ComponentUpdateOne {
	return NewComponentClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Component entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Component) Unwrap() *Component {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Component is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Component) String() string {
	var builder strings.Builder
	builder.WriteString("Component(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("deployment_profile_id=")
	builder.WriteString(_m.DeploymentProfileID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("properties=")
	builder.WriteString(fmt.Sprintf("%v", _m.Properties))
	builder.WriteByte(')')
	return builder.String()
}

// Components is a parsable slice of Component.
type Components []*Component
