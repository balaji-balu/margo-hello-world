// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/balaji-balu/margo-hello-world/ent/applicationdesc"
	"github.com/balaji-balu/margo-hello-world/ent/component"
	"github.com/balaji-balu/margo-hello-world/ent/deploymentprofile"
	"github.com/balaji-balu/margo-hello-world/ent/predicate"
)

// DeploymentProfileUpdate is the builder for updating DeploymentProfile entities.
type DeploymentProfileUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentProfileMutation
}

// Where appends a list predicates to the DeploymentProfileUpdate builder.
func (_u *DeploymentProfileUpdate) Where(ps ...predicate.DeploymentProfile) *DeploymentProfileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetType sets the "type" field.
func (_u *DeploymentProfileUpdate) SetType(v string) *DeploymentProfileUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *DeploymentProfileUpdate) SetNillableType(v *string) *DeploymentProfileUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *DeploymentProfileUpdate) ClearType() *DeploymentProfileUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetDescription sets the "description" field.
func (_u *DeploymentProfileUpdate) SetDescription(v string) *DeploymentProfileUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DeploymentProfileUpdate) SetNillableDescription(v *string) *DeploymentProfileUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DeploymentProfileUpdate) ClearDescription() *DeploymentProfileUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCPUCores sets the "cpu_cores" field.
func (_u *DeploymentProfileUpdate) SetCPUCores(v float64) *DeploymentProfileUpdate {
	_u.mutation.ResetCPUCores()
	_u.mutation.SetCPUCores(v)
	return _u
}

// SetNillableCPUCores sets the "cpu_cores" field if the given value is not nil.
func (_u *DeploymentProfileUpdate) SetNillableCPUCores(v *float64) *DeploymentProfileUpdate {
	if v != nil {
		_u.SetCPUCores(*v)
	}
	return _u
}

// AddCPUCores adds value to the "cpu_cores" field.
func (_u *DeploymentProfileUpdate) AddCPUCores(v float64) *DeploymentProfileUpdate {
	_u.mutation.AddCPUCores(v)
	return _u
}

// ClearCPUCores clears the value of the "cpu_cores" field.
func (_u *DeploymentProfileUpdate) ClearCPUCores() *DeploymentProfileUpdate {
	_u.mutation.ClearCPUCores()
	return _u
}

// SetMemory sets the "memory" field.
func (_u *DeploymentProfileUpdate) SetMemory(v string) *DeploymentProfileUpdate {
	_u.mutation.SetMemory(v)
	return _u
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (_u *DeploymentProfileUpdate) SetNillableMemory(v *string) *DeploymentProfileUpdate {
	if v != nil {
		_u.SetMemory(*v)
	}
	return _u
}

// ClearMemory clears the value of the "memory" field.
func (_u *DeploymentProfileUpdate) ClearMemory() *DeploymentProfileUpdate {
	_u.mutation.ClearMemory()
	return _u
}

// SetStorage sets the "storage" field.
func (_u *DeploymentProfileUpdate) SetStorage(v string) *DeploymentProfileUpdate {
	_u.mutation.SetStorage(v)
	return _u
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (_u *DeploymentProfileUpdate) SetNillableStorage(v *string) *DeploymentProfileUpdate {
	if v != nil {
		_u.SetStorage(*v)
	}
	return _u
}

// ClearStorage clears the value of the "storage" field.
func (_u *DeploymentProfileUpdate) ClearStorage() *DeploymentProfileUpdate {
	_u.mutation.ClearStorage()
	return _u
}

// SetCPUArchitectures sets the "cpu_architectures" field.
func (_u *DeploymentProfileUpdate) SetCPUArchitectures(v []string) *DeploymentProfileUpdate {
	_u.mutation.SetCPUArchitectures(v)
	return _u
}

// AppendCPUArchitectures appends value to the "cpu_architectures" field.
func (_u *DeploymentProfileUpdate) AppendCPUArchitectures(v []string) *DeploymentProfileUpdate {
	_u.mutation.AppendCPUArchitectures(v)
	return _u
}

// ClearCPUArchitectures clears the value of the "cpu_architectures" field.
func (_u *DeploymentProfileUpdate) ClearCPUArchitectures() *DeploymentProfileUpdate {
	_u.mutation.ClearCPUArchitectures()
	return _u
}

// SetPeripherals sets the "peripherals" field.
func (_u *DeploymentProfileUpdate) SetPeripherals(v []map[string]interface{}) *DeploymentProfileUpdate {
	_u.mutation.SetPeripherals(v)
	return _u
}

// AppendPeripherals appends value to the "peripherals" field.
func (_u *DeploymentProfileUpdate) AppendPeripherals(v []map[string]interface{}) *DeploymentProfileUpdate {
	_u.mutation.AppendPeripherals(v)
	return _u
}

// ClearPeripherals clears the value of the "peripherals" field.
func (_u *DeploymentProfileUpdate) ClearPeripherals() *DeploymentProfileUpdate {
	_u.mutation.ClearPeripherals()
	return _u
}

// SetInterfaces sets the "interfaces" field.
func (_u *DeploymentProfileUpdate) SetInterfaces(v []map[string]interface{}) *DeploymentProfileUpdate {
	_u.mutation.SetInterfaces(v)
	return _u
}

// AppendInterfaces appends value to the "interfaces" field.
func (_u *DeploymentProfileUpdate) AppendInterfaces(v []map[string]interface{}) *DeploymentProfileUpdate {
	_u.mutation.AppendInterfaces(v)
	return _u
}

// ClearInterfaces clears the value of the "interfaces" field.
func (_u *DeploymentProfileUpdate) ClearInterfaces() *DeploymentProfileUpdate {
	_u.mutation.ClearInterfaces()
	return _u
}

// SetAppID sets the "app_id" field.
func (_u *DeploymentProfileUpdate) SetAppID(v string) *DeploymentProfileUpdate {
	_u.mutation.SetAppID(v)
	return _u
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (_u *DeploymentProfileUpdate) SetNillableAppID(v *string) *DeploymentProfileUpdate {
	if v != nil {
		_u.SetAppID(*v)
	}
	return _u
}

// ClearAppID clears the value of the "app_id" field.
func (_u *DeploymentProfileUpdate) ClearAppID() *DeploymentProfileUpdate {
	_u.mutation.ClearAppID()
	return _u
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (_u *DeploymentProfileUpdate) AddComponentIDs(ids ...uint) *DeploymentProfileUpdate {
	_u.mutation.AddComponentIDs(ids...)
	return _u
}

// AddComponents adds the "components" edges to the Component entity.
func (_u *DeploymentProfileUpdate) AddComponents(v ...*Component) *DeploymentProfileUpdate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddComponentIDs(ids...)
}

// SetApplicationDescID sets the "application_desc" edge to the ApplicationDesc entity by ID.
func (_u *DeploymentProfileUpdate) SetApplicationDescID(id string) *DeploymentProfileUpdate {
	_u.mutation.SetApplicationDescID(id)
	return _u
}

// SetNillableApplicationDescID sets the "application_desc" edge to the ApplicationDesc entity by ID if the given value is not nil.
func (_u *DeploymentProfileUpdate) SetNillableApplicationDescID(id *string) *DeploymentProfileUpdate {
	if id != nil {
		_u = _u.SetApplicationDescID(*id)
	}
	return _u
}

// SetApplicationDesc sets the "application_desc" edge to the ApplicationDesc entity.
func (_u *DeploymentProfileUpdate) SetApplicationDesc(v *ApplicationDesc) *DeploymentProfileUpdate {
	return _u.SetApplicationDescID(v.ID)
}

// Mutation returns the DeploymentProfileMutation object of the builder.
func (_u *DeploymentProfileUpdate) Mutation() *DeploymentProfileMutation {
	return _u.mutation
}

// ClearComponents clears all "components" edges to the Component entity.
func (_u *DeploymentProfileUpdate) ClearComponents() *DeploymentProfileUpdate {
	_u.mutation.ClearComponents()
	return _u
}

// RemoveComponentIDs removes the "components" edge to Component entities by IDs.
func (_u *DeploymentProfileUpdate) RemoveComponentIDs(ids ...uint) *DeploymentProfileUpdate {
	_u.mutation.RemoveComponentIDs(ids...)
	return _u
}

// RemoveComponents removes "components" edges to Component entities.
func (_u *DeploymentProfileUpdate) RemoveComponents(v ...*Component) *DeploymentProfileUpdate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveComponentIDs(ids...)
}

// ClearApplicationDesc clears the "application_desc" edge to the ApplicationDesc entity.
func (_u *DeploymentProfileUpdate) ClearApplicationDesc() *DeploymentProfileUpdate {
	_u.mutation.ClearApplicationDesc()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DeploymentProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeploymentProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DeploymentProfileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeploymentProfileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *DeploymentProfileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(deploymentprofile.Table, deploymentprofile.Columns, sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(deploymentprofile.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(deploymentprofile.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(deploymentprofile.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(deploymentprofile.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CPUCores(); ok {
		_spec.SetField(deploymentprofile.FieldCPUCores, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCPUCores(); ok {
		_spec.AddField(deploymentprofile.FieldCPUCores, field.TypeFloat64, value)
	}
	if _u.mutation.CPUCoresCleared() {
		_spec.ClearField(deploymentprofile.FieldCPUCores, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Memory(); ok {
		_spec.SetField(deploymentprofile.FieldMemory, field.TypeString, value)
	}
	if _u.mutation.MemoryCleared() {
		_spec.ClearField(deploymentprofile.FieldMemory, field.TypeString)
	}
	if value, ok := _u.mutation.Storage(); ok {
		_spec.SetField(deploymentprofile.FieldStorage, field.TypeString, value)
	}
	if _u.mutation.StorageCleared() {
		_spec.ClearField(deploymentprofile.FieldStorage, field.TypeString)
	}
	if value, ok := _u.mutation.CPUArchitectures(); ok {
		_spec.SetField(deploymentprofile.FieldCPUArchitectures, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCPUArchitectures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deploymentprofile.FieldCPUArchitectures, value)
		})
	}
	if _u.mutation.CPUArchitecturesCleared() {
		_spec.ClearField(deploymentprofile.FieldCPUArchitectures, field.TypeJSON)
	}
	if value, ok := _u.mutation.Peripherals(); ok {
		_spec.SetField(deploymentprofile.FieldPeripherals, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPeripherals(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deploymentprofile.FieldPeripherals, value)
		})
	}
	if _u.mutation.PeripheralsCleared() {
		_spec.ClearField(deploymentprofile.FieldPeripherals, field.TypeJSON)
	}
	if value, ok := _u.mutation.Interfaces(); ok {
		_spec.SetField(deploymentprofile.FieldInterfaces, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedInterfaces(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deploymentprofile.FieldInterfaces, value)
		})
	}
	if _u.mutation.InterfacesCleared() {
		_spec.ClearField(deploymentprofile.FieldInterfaces, field.TypeJSON)
	}
	if _u.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentprofile.ComponentsTable,
			Columns: []string{deploymentprofile.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !_u.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentprofile.ComponentsTable,
			Columns: []string{deploymentprofile.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentprofile.ComponentsTable,
			Columns: []string{deploymentprofile.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApplicationDescCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.ApplicationDescTable,
			Columns: []string{deploymentprofile.ApplicationDescColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdesc.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationDescIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.ApplicationDescTable,
			Columns: []string{deploymentprofile.ApplicationDescColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdesc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DeploymentProfileUpdateOne is the builder for updating a single DeploymentProfile entity.
type DeploymentProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentProfileMutation
}

// SetType sets the "type" field.
func (_u *DeploymentProfileUpdateOne) SetType(v string) *DeploymentProfileUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *DeploymentProfileUpdateOne) SetNillableType(v *string) *DeploymentProfileUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *DeploymentProfileUpdateOne) ClearType() *DeploymentProfileUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetDescription sets the "description" field.
func (_u *DeploymentProfileUpdateOne) SetDescription(v string) *DeploymentProfileUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DeploymentProfileUpdateOne) SetNillableDescription(v *string) *DeploymentProfileUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DeploymentProfileUpdateOne) ClearDescription() *DeploymentProfileUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCPUCores sets the "cpu_cores" field.
func (_u *DeploymentProfileUpdateOne) SetCPUCores(v float64) *DeploymentProfileUpdateOne {
	_u.mutation.ResetCPUCores()
	_u.mutation.SetCPUCores(v)
	return _u
}

// SetNillableCPUCores sets the "cpu_cores" field if the given value is not nil.
func (_u *DeploymentProfileUpdateOne) SetNillableCPUCores(v *float64) *DeploymentProfileUpdateOne {
	if v != nil {
		_u.SetCPUCores(*v)
	}
	return _u
}

// AddCPUCores adds value to the "cpu_cores" field.
func (_u *DeploymentProfileUpdateOne) AddCPUCores(v float64) *DeploymentProfileUpdateOne {
	_u.mutation.AddCPUCores(v)
	return _u
}

// ClearCPUCores clears the value of the "cpu_cores" field.
func (_u *DeploymentProfileUpdateOne) ClearCPUCores() *DeploymentProfileUpdateOne {
	_u.mutation.ClearCPUCores()
	return _u
}

// SetMemory sets the "memory" field.
func (_u *DeploymentProfileUpdateOne) SetMemory(v string) *DeploymentProfileUpdateOne {
	_u.mutation.SetMemory(v)
	return _u
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (_u *DeploymentProfileUpdateOne) SetNillableMemory(v *string) *DeploymentProfileUpdateOne {
	if v != nil {
		_u.SetMemory(*v)
	}
	return _u
}

// ClearMemory clears the value of the "memory" field.
func (_u *DeploymentProfileUpdateOne) ClearMemory() *DeploymentProfileUpdateOne {
	_u.mutation.ClearMemory()
	return _u
}

// SetStorage sets the "storage" field.
func (_u *DeploymentProfileUpdateOne) SetStorage(v string) *DeploymentProfileUpdateOne {
	_u.mutation.SetStorage(v)
	return _u
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (_u *DeploymentProfileUpdateOne) SetNillableStorage(v *string) *DeploymentProfileUpdateOne {
	if v != nil {
		_u.SetStorage(*v)
	}
	return _u
}

// ClearStorage clears the value of the "storage" field.
func (_u *DeploymentProfileUpdateOne) ClearStorage() *DeploymentProfileUpdateOne {
	_u.mutation.ClearStorage()
	return _u
}

// SetCPUArchitectures sets the "cpu_architectures" field.
func (_u *DeploymentProfileUpdateOne) SetCPUArchitectures(v []string) *DeploymentProfileUpdateOne {
	_u.mutation.SetCPUArchitectures(v)
	return _u
}

// AppendCPUArchitectures appends value to the "cpu_architectures" field.
func (_u *DeploymentProfileUpdateOne) AppendCPUArchitectures(v []string) *DeploymentProfileUpdateOne {
	_u.mutation.AppendCPUArchitectures(v)
	return _u
}

// ClearCPUArchitectures clears the value of the "cpu_architectures" field.
func (_u *DeploymentProfileUpdateOne) ClearCPUArchitectures() *DeploymentProfileUpdateOne {
	_u.mutation.ClearCPUArchitectures()
	return _u
}

// SetPeripherals sets the "peripherals" field.
func (_u *DeploymentProfileUpdateOne) SetPeripherals(v []map[string]interface{}) *DeploymentProfileUpdateOne {
	_u.mutation.SetPeripherals(v)
	return _u
}

// AppendPeripherals appends value to the "peripherals" field.
func (_u *DeploymentProfileUpdateOne) AppendPeripherals(v []map[string]interface{}) *DeploymentProfileUpdateOne {
	_u.mutation.AppendPeripherals(v)
	return _u
}

// ClearPeripherals clears the value of the "peripherals" field.
func (_u *DeploymentProfileUpdateOne) ClearPeripherals() *DeploymentProfileUpdateOne {
	_u.mutation.ClearPeripherals()
	return _u
}

// SetInterfaces sets the "interfaces" field.
func (_u *DeploymentProfileUpdateOne) SetInterfaces(v []map[string]interface{}) *DeploymentProfileUpdateOne {
	_u.mutation.SetInterfaces(v)
	return _u
}

// AppendInterfaces appends value to the "interfaces" field.
func (_u *DeploymentProfileUpdateOne) AppendInterfaces(v []map[string]interface{}) *DeploymentProfileUpdateOne {
	_u.mutation.AppendInterfaces(v)
	return _u
}

// ClearInterfaces clears the value of the "interfaces" field.
func (_u *DeploymentProfileUpdateOne) ClearInterfaces() *DeploymentProfileUpdateOne {
	_u.mutation.ClearInterfaces()
	return _u
}

// SetAppID sets the "app_id" field.
func (_u *DeploymentProfileUpdateOne) SetAppID(v string) *DeploymentProfileUpdateOne {
	_u.mutation.SetAppID(v)
	return _u
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (_u *DeploymentProfileUpdateOne) SetNillableAppID(v *string) *DeploymentProfileUpdateOne {
	if v != nil {
		_u.SetAppID(*v)
	}
	return _u
}

// ClearAppID clears the value of the "app_id" field.
func (_u *DeploymentProfileUpdateOne) ClearAppID() *DeploymentProfileUpdateOne {
	_u.mutation.ClearAppID()
	return _u
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (_u *DeploymentProfileUpdateOne) AddComponentIDs(ids ...uint) *DeploymentProfileUpdateOne {
	_u.mutation.AddComponentIDs(ids...)
	return _u
}

// AddComponents adds the "components" edges to the Component entity.
func (_u *DeploymentProfileUpdateOne) AddComponents(v ...*Component) *DeploymentProfileUpdateOne {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddComponentIDs(ids...)
}

// SetApplicationDescID sets the "application_desc" edge to the ApplicationDesc entity by ID.
func (_u *DeploymentProfileUpdateOne) SetApplicationDescID(id string) *DeploymentProfileUpdateOne {
	_u.mutation.SetApplicationDescID(id)
	return _u
}

// SetNillableApplicationDescID sets the "application_desc" edge to the ApplicationDesc entity by ID if the given value is not nil.
func (_u *DeploymentProfileUpdateOne) SetNillableApplicationDescID(id *string) *DeploymentProfileUpdateOne {
	if id != nil {
		_u = _u.SetApplicationDescID(*id)
	}
	return _u
}

// SetApplicationDesc sets the "application_desc" edge to the ApplicationDesc entity.
func (_u *DeploymentProfileUpdateOne) SetApplicationDesc(v *ApplicationDesc) *DeploymentProfileUpdateOne {
	return _u.SetApplicationDescID(v.ID)
}

// Mutation returns the DeploymentProfileMutation object of the builder.
func (_u *DeploymentProfileUpdateOne) Mutation() *DeploymentProfileMutation {
	return _u.mutation
}

// ClearComponents clears all "components" edges to the Component entity.
func (_u *DeploymentProfileUpdateOne) ClearComponents() *DeploymentProfileUpdateOne {
	_u.mutation.ClearComponents()
	return _u
}

// RemoveComponentIDs removes the "components" edge to Component entities by IDs.
func (_u *DeploymentProfileUpdateOne) RemoveComponentIDs(ids ...uint) *DeploymentProfileUpdateOne {
	_u.mutation.RemoveComponentIDs(ids...)
	return _u
}

// RemoveComponents removes "components" edges to Component entities.
func (_u *DeploymentProfileUpdateOne) RemoveComponents(v ...*Component) *DeploymentProfileUpdateOne {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveComponentIDs(ids...)
}

// ClearApplicationDesc clears the "application_desc" edge to the ApplicationDesc entity.
func (_u *DeploymentProfileUpdateOne) ClearApplicationDesc() *DeploymentProfileUpdateOne {
	_u.mutation.ClearApplicationDesc()
	return _u
}

// Where appends a list predicates to the DeploymentProfileUpdate builder.
func (_u *DeploymentProfileUpdateOne) Where(ps ...predicate.DeploymentProfile) *DeploymentProfileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DeploymentProfileUpdateOne) Select(field string, fields ...string) *DeploymentProfileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DeploymentProfile entity.
func (_u *DeploymentProfileUpdateOne) Save(ctx context.Context) (*DeploymentProfile, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeploymentProfileUpdateOne) SaveX(ctx context.Context) *DeploymentProfile {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DeploymentProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeploymentProfileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *DeploymentProfileUpdateOne) sqlSave(ctx context.Context) (_node *DeploymentProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(deploymentprofile.Table, deploymentprofile.Columns, sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeploymentProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentprofile.FieldID)
		for _, f := range fields {
			if !deploymentprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deploymentprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(deploymentprofile.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(deploymentprofile.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(deploymentprofile.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(deploymentprofile.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CPUCores(); ok {
		_spec.SetField(deploymentprofile.FieldCPUCores, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCPUCores(); ok {
		_spec.AddField(deploymentprofile.FieldCPUCores, field.TypeFloat64, value)
	}
	if _u.mutation.CPUCoresCleared() {
		_spec.ClearField(deploymentprofile.FieldCPUCores, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Memory(); ok {
		_spec.SetField(deploymentprofile.FieldMemory, field.TypeString, value)
	}
	if _u.mutation.MemoryCleared() {
		_spec.ClearField(deploymentprofile.FieldMemory, field.TypeString)
	}
	if value, ok := _u.mutation.Storage(); ok {
		_spec.SetField(deploymentprofile.FieldStorage, field.TypeString, value)
	}
	if _u.mutation.StorageCleared() {
		_spec.ClearField(deploymentprofile.FieldStorage, field.TypeString)
	}
	if value, ok := _u.mutation.CPUArchitectures(); ok {
		_spec.SetField(deploymentprofile.FieldCPUArchitectures, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCPUArchitectures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deploymentprofile.FieldCPUArchitectures, value)
		})
	}
	if _u.mutation.CPUArchitecturesCleared() {
		_spec.ClearField(deploymentprofile.FieldCPUArchitectures, field.TypeJSON)
	}
	if value, ok := _u.mutation.Peripherals(); ok {
		_spec.SetField(deploymentprofile.FieldPeripherals, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPeripherals(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deploymentprofile.FieldPeripherals, value)
		})
	}
	if _u.mutation.PeripheralsCleared() {
		_spec.ClearField(deploymentprofile.FieldPeripherals, field.TypeJSON)
	}
	if value, ok := _u.mutation.Interfaces(); ok {
		_spec.SetField(deploymentprofile.FieldInterfaces, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedInterfaces(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deploymentprofile.FieldInterfaces, value)
		})
	}
	if _u.mutation.InterfacesCleared() {
		_spec.ClearField(deploymentprofile.FieldInterfaces, field.TypeJSON)
	}
	if _u.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentprofile.ComponentsTable,
			Columns: []string{deploymentprofile.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !_u.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentprofile.ComponentsTable,
			Columns: []string{deploymentprofile.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentprofile.ComponentsTable,
			Columns: []string{deploymentprofile.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApplicationDescCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.ApplicationDescTable,
			Columns: []string{deploymentprofile.ApplicationDescColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdesc.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplicationDescIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.ApplicationDescTable,
			Columns: []string{deploymentprofile.ApplicationDescColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdesc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeploymentProfile{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
