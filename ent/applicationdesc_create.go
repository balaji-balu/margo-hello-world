// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/balaji-balu/margo-hello-world/ent/applicationdesc"
	"github.com/balaji-balu/margo-hello-world/ent/deploymentprofile"
)

// ApplicationDescCreate is the builder for creating a ApplicationDesc entity.
type ApplicationDescCreate struct {
	config
	mutation *ApplicationDescMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *ApplicationDescCreate) SetName(v string) *ApplicationDescCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillableName(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetVendor sets the "vendor" field.
func (_c *ApplicationDescCreate) SetVendor(v string) *ApplicationDescCreate {
	_c.mutation.SetVendor(v)
	return _c
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillableVendor(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetVendor(*v)
	}
	return _c
}

// SetVersion sets the "version" field.
func (_c *ApplicationDescCreate) SetVersion(v string) *ApplicationDescCreate {
	_c.mutation.SetVersion(v)
	return _c
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillableVersion(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetVersion(*v)
	}
	return _c
}

// SetCategory sets the "category" field.
func (_c *ApplicationDescCreate) SetCategory(v string) *ApplicationDescCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillableCategory(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetCategory(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *ApplicationDescCreate) SetDescription(v string) *ApplicationDescCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillableDescription(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetIcon sets the "icon" field.
func (_c *ApplicationDescCreate) SetIcon(v string) *ApplicationDescCreate {
	_c.mutation.SetIcon(v)
	return _c
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillableIcon(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetIcon(*v)
	}
	return _c
}

// SetArtifacturl sets the "artifacturl" field.
func (_c *ApplicationDescCreate) SetArtifacturl(v string) *ApplicationDescCreate {
	_c.mutation.SetArtifacturl(v)
	return _c
}

// SetNillableArtifacturl sets the "artifacturl" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillableArtifacturl(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetArtifacturl(*v)
	}
	return _c
}

// SetSite sets the "site" field.
func (_c *ApplicationDescCreate) SetSite(v string) *ApplicationDescCreate {
	_c.mutation.SetSite(v)
	return _c
}

// SetNillableSite sets the "site" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillableSite(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetSite(*v)
	}
	return _c
}

// SetTagLine sets the "tag_line" field.
func (_c *ApplicationDescCreate) SetTagLine(v string) *ApplicationDescCreate {
	_c.mutation.SetTagLine(v)
	return _c
}

// SetNillableTagLine sets the "tag_line" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillableTagLine(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetTagLine(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *ApplicationDescCreate) SetTags(v []string) *ApplicationDescCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetPublished sets the "published" field.
func (_c *ApplicationDescCreate) SetPublished(v string) *ApplicationDescCreate {
	_c.mutation.SetPublished(v)
	return _c
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (_c *ApplicationDescCreate) SetNillablePublished(v *string) *ApplicationDescCreate {
	if v != nil {
		_c.SetPublished(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ApplicationDescCreate) SetID(v string) *ApplicationDescCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (_c *ApplicationDescCreate) AddDeploymentProfileIDs(ids ...string) *ApplicationDescCreate {
	_c.mutation.AddDeploymentProfileIDs(ids...)
	return _c
}

// AddDeploymentProfiles adds the "deployment_profiles" edges to the DeploymentProfile entity.
func (_c *ApplicationDescCreate) AddDeploymentProfiles(v ...*DeploymentProfile) *ApplicationDescCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDeploymentProfileIDs(ids...)
}

// Mutation returns the ApplicationDescMutation object of the builder.
func (_c *ApplicationDescCreate) Mutation() *ApplicationDescMutation {
	return _c.mutation
}

// Save creates the ApplicationDesc in the database.
func (_c *ApplicationDescCreate) Save(ctx context.Context) (*ApplicationDesc, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ApplicationDescCreate) SaveX(ctx context.Context) *ApplicationDesc {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ApplicationDescCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ApplicationDescCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ApplicationDescCreate) check() error {
	return nil
}

func (_c *ApplicationDescCreate) sqlSave(ctx context.Context) (*ApplicationDesc, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ApplicationDesc.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ApplicationDescCreate) createSpec() (*ApplicationDesc, *sqlgraph.CreateSpec) {
	var (
		_node = &ApplicationDesc{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(applicationdesc.Table, sqlgraph.NewFieldSpec(applicationdesc.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(applicationdesc.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Vendor(); ok {
		_spec.SetField(applicationdesc.FieldVendor, field.TypeString, value)
		_node.Vendor = value
	}
	if value, ok := _c.mutation.Version(); ok {
		_spec.SetField(applicationdesc.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(applicationdesc.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(applicationdesc.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Icon(); ok {
		_spec.SetField(applicationdesc.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := _c.mutation.Artifacturl(); ok {
		_spec.SetField(applicationdesc.FieldArtifacturl, field.TypeString, value)
		_node.Artifacturl = value
	}
	if value, ok := _c.mutation.Site(); ok {
		_spec.SetField(applicationdesc.FieldSite, field.TypeString, value)
		_node.Site = value
	}
	if value, ok := _c.mutation.TagLine(); ok {
		_spec.SetField(applicationdesc.FieldTagLine, field.TypeString, value)
		_node.TagLine = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(applicationdesc.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Published(); ok {
		_spec.SetField(applicationdesc.FieldPublished, field.TypeString, value)
		_node.Published = value
	}
	if nodes := _c.mutation.DeploymentProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationdesc.DeploymentProfilesTable,
			Columns: []string{applicationdesc.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicationDescCreateBulk is the builder for creating many ApplicationDesc entities in bulk.
type ApplicationDescCreateBulk struct {
	config
	err      error
	builders []*ApplicationDescCreate
}

// Save creates the ApplicationDesc entities in the database.
func (_c *ApplicationDescCreateBulk) Save(ctx context.Context) ([]*ApplicationDesc, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ApplicationDesc, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicationDescMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ApplicationDescCreateBulk) SaveX(ctx context.Context) []*ApplicationDesc {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ApplicationDescCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ApplicationDescCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
