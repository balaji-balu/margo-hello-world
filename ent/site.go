// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/balaji/hello/ent/orchestrator"
	"github.com/balaji/hello/ent/site"
	"github.com/google/uuid"
)

// Site is the model entity for the Site schema.
type Site struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SiteID holds the value of the "site_id" field.
	SiteID string `json:"site_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// OrchestratorID holds the value of the "orchestrator_id" field.
	OrchestratorID uuid.UUID `json:"orchestrator_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata struct{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SiteQuery when eager-loading is set.
	Edges        SiteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SiteEdges holds the relations/edges for other nodes in the graph.
type SiteEdges struct {
	// Hosts holds the value of the hosts edge.
	Hosts []*Host `json:"hosts,omitempty"`
	// Orchestrator holds the value of the orchestrator edge.
	Orchestrator *Orchestrator `json:"orchestrator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HostsOrErr returns the Hosts value or an error if the edge
// was not loaded in eager-loading.
func (e SiteEdges) HostsOrErr() ([]*Host, error) {
	if e.loadedTypes[0] {
		return e.Hosts, nil
	}
	return nil, &NotLoadedError{edge: "hosts"}
}

// OrchestratorOrErr returns the Orchestrator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SiteEdges) OrchestratorOrErr() (*Orchestrator, error) {
	if e.Orchestrator != nil {
		return e.Orchestrator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: orchestrator.Label}
	}
	return nil, &NotLoadedError{edge: "orchestrator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Site) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case site.FieldMetadata:
			values[i] = new([]byte)
		case site.FieldSiteID, site.FieldName, site.FieldDescription, site.FieldLocation:
			values[i] = new(sql.NullString)
		case site.FieldCreatedAt, site.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case site.FieldID, site.FieldOrchestratorID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Site fields.
func (_m *Site) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case site.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case site.FieldSiteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_id", values[i])
			} else if value.Valid {
				_m.SiteID = value.String
			}
		case site.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case site.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case site.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				_m.Location = value.String
			}
		case site.FieldOrchestratorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field orchestrator_id", values[i])
			} else if value != nil {
				_m.OrchestratorID = *value
			}
		case site.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case site.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case site.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Site.
// This includes values selected through modifiers, order, etc.
func (_m *Site) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryHosts queries the "hosts" edge of the Site entity.
func (_m *Site) QueryHosts() *HostQuery {
	return NewSiteClient(_m.config).QueryHosts(_m)
}

// QueryOrchestrator queries the "orchestrator" edge of the Site entity.
func (_m *Site) QueryOrchestrator() *OrchestratorQuery {
	return NewSiteClient(_m.config).QueryOrchestrator(_m)
}

// Update returns a builder for updating this Site.
// Note that you need to call Site.Unwrap() before calling this method if this Site
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Site) Update() *SiteUpdateOne {
	return NewSiteClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Site entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Site) Unwrap() *Site {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Site is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Site) String() string {
	var builder strings.Builder
	builder.WriteString("Site(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("site_id=")
	builder.WriteString(_m.SiteID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(_m.Location)
	builder.WriteString(", ")
	builder.WriteString("orchestrator_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.OrchestratorID))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Sites is a parsable slice of Site.
type Sites []*Site
