// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/balaji-balu/margo-hello-world/ent/host"
	"github.com/balaji-balu/margo-hello-world/ent/predicate"
	"github.com/balaji-balu/margo-hello-world/ent/site"
	"github.com/google/uuid"
)

// HostUpdate is the builder for updating Host entities.
type HostUpdate struct {
	config
	hooks    []Hook
	mutation *HostMutation
}

// Where appends a list predicates to the HostUpdate builder.
func (_u *HostUpdate) Where(ps ...predicate.Host) *HostUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetHostID sets the "host_id" field.
func (_u *HostUpdate) SetHostID(v string) *HostUpdate {
	_u.mutation.SetHostID(v)
	return _u
}

// SetNillableHostID sets the "host_id" field if the given value is not nil.
func (_u *HostUpdate) SetNillableHostID(v *string) *HostUpdate {
	if v != nil {
		_u.SetHostID(*v)
	}
	return _u
}

// SetSiteID sets the "site_id" field.
func (_u *HostUpdate) SetSiteID(v uuid.UUID) *HostUpdate {
	_u.mutation.SetSiteID(v)
	return _u
}

// SetNillableSiteID sets the "site_id" field if the given value is not nil.
func (_u *HostUpdate) SetNillableSiteID(v *uuid.UUID) *HostUpdate {
	if v != nil {
		_u.SetSiteID(*v)
	}
	return _u
}

// ClearSiteID clears the value of the "site_id" field.
func (_u *HostUpdate) ClearSiteID() *HostUpdate {
	_u.mutation.ClearSiteID()
	return _u
}

// SetHostname sets the "hostname" field.
func (_u *HostUpdate) SetHostname(v string) *HostUpdate {
	_u.mutation.SetHostname(v)
	return _u
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (_u *HostUpdate) SetNillableHostname(v *string) *HostUpdate {
	if v != nil {
		_u.SetHostname(*v)
	}
	return _u
}

// ClearHostname clears the value of the "hostname" field.
func (_u *HostUpdate) ClearHostname() *HostUpdate {
	_u.mutation.ClearHostname()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *HostUpdate) SetIPAddress(v string) *HostUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *HostUpdate) SetNillableIPAddress(v *string) *HostUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *HostUpdate) ClearIPAddress() *HostUpdate {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetEdgeURL sets the "edge_url" field.
func (_u *HostUpdate) SetEdgeURL(v string) *HostUpdate {
	_u.mutation.SetEdgeURL(v)
	return _u
}

// SetNillableEdgeURL sets the "edge_url" field if the given value is not nil.
func (_u *HostUpdate) SetNillableEdgeURL(v *string) *HostUpdate {
	if v != nil {
		_u.SetEdgeURL(*v)
	}
	return _u
}

// ClearEdgeURL clears the value of the "edge_url" field.
func (_u *HostUpdate) ClearEdgeURL() *HostUpdate {
	_u.mutation.ClearEdgeURL()
	return _u
}

// SetStatus sets the "status" field.
func (_u *HostUpdate) SetStatus(v string) *HostUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *HostUpdate) SetNillableStatus(v *string) *HostUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *HostUpdate) ClearStatus() *HostUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (_u *HostUpdate) SetLastHeartbeat(v time.Time) *HostUpdate {
	_u.mutation.SetLastHeartbeat(v)
	return _u
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (_u *HostUpdate) SetNillableLastHeartbeat(v *time.Time) *HostUpdate {
	if v != nil {
		_u.SetLastHeartbeat(*v)
	}
	return _u
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (_u *HostUpdate) ClearLastHeartbeat() *HostUpdate {
	_u.mutation.ClearLastHeartbeat()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *HostUpdate) SetMetadata(v struct{}) *HostUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *HostUpdate) SetNillableMetadata(v *struct{}) *HostUpdate {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *HostUpdate) ClearMetadata() *HostUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *HostUpdate) SetCreatedAt(v time.Time) *HostUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *HostUpdate) SetNillableCreatedAt(v *time.Time) *HostUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *HostUpdate) ClearCreatedAt() *HostUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostUpdate) SetUpdatedAt(v time.Time) *HostUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostUpdate) SetNillableUpdatedAt(v *time.Time) *HostUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *HostUpdate) ClearUpdatedAt() *HostUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetSite sets the "site" edge to the Site entity.
func (_u *HostUpdate) SetSite(v *Site) *HostUpdate {
	return _u.SetSiteID(v.ID)
}

// Mutation returns the HostMutation object of the builder.
func (_u *HostUpdate) Mutation() *HostMutation {
	return _u.mutation
}

// ClearSite clears the "site" edge to the Site entity.
func (_u *HostUpdate) ClearSite() *HostUpdate {
	_u.mutation.ClearSite()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *HostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *HostUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *HostUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.HostID(); ok {
		_spec.SetField(host.FieldHostID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Hostname(); ok {
		_spec.SetField(host.FieldHostname, field.TypeString, value)
	}
	if _u.mutation.HostnameCleared() {
		_spec.ClearField(host.FieldHostname, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(host.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(host.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.EdgeURL(); ok {
		_spec.SetField(host.FieldEdgeURL, field.TypeString, value)
	}
	if _u.mutation.EdgeURLCleared() {
		_spec.ClearField(host.FieldEdgeURL, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(host.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(host.FieldStatus, field.TypeString)
	}
	if value, ok := _u.mutation.LastHeartbeat(); ok {
		_spec.SetField(host.FieldLastHeartbeat, field.TypeTime, value)
	}
	if _u.mutation.LastHeartbeatCleared() {
		_spec.ClearField(host.FieldLastHeartbeat, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(host.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(host.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(host.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(host.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(host.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(host.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.SiteTable,
			Columns: []string{host.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.SiteTable,
			Columns: []string{host.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// HostUpdateOne is the builder for updating a single Host entity.
type HostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostMutation
}

// SetHostID sets the "host_id" field.
func (_u *HostUpdateOne) SetHostID(v string) *HostUpdateOne {
	_u.mutation.SetHostID(v)
	return _u
}

// SetNillableHostID sets the "host_id" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableHostID(v *string) *HostUpdateOne {
	if v != nil {
		_u.SetHostID(*v)
	}
	return _u
}

// SetSiteID sets the "site_id" field.
func (_u *HostUpdateOne) SetSiteID(v uuid.UUID) *HostUpdateOne {
	_u.mutation.SetSiteID(v)
	return _u
}

// SetNillableSiteID sets the "site_id" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableSiteID(v *uuid.UUID) *HostUpdateOne {
	if v != nil {
		_u.SetSiteID(*v)
	}
	return _u
}

// ClearSiteID clears the value of the "site_id" field.
func (_u *HostUpdateOne) ClearSiteID() *HostUpdateOne {
	_u.mutation.ClearSiteID()
	return _u
}

// SetHostname sets the "hostname" field.
func (_u *HostUpdateOne) SetHostname(v string) *HostUpdateOne {
	_u.mutation.SetHostname(v)
	return _u
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableHostname(v *string) *HostUpdateOne {
	if v != nil {
		_u.SetHostname(*v)
	}
	return _u
}

// ClearHostname clears the value of the "hostname" field.
func (_u *HostUpdateOne) ClearHostname() *HostUpdateOne {
	_u.mutation.ClearHostname()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *HostUpdateOne) SetIPAddress(v string) *HostUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableIPAddress(v *string) *HostUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *HostUpdateOne) ClearIPAddress() *HostUpdateOne {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetEdgeURL sets the "edge_url" field.
func (_u *HostUpdateOne) SetEdgeURL(v string) *HostUpdateOne {
	_u.mutation.SetEdgeURL(v)
	return _u
}

// SetNillableEdgeURL sets the "edge_url" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableEdgeURL(v *string) *HostUpdateOne {
	if v != nil {
		_u.SetEdgeURL(*v)
	}
	return _u
}

// ClearEdgeURL clears the value of the "edge_url" field.
func (_u *HostUpdateOne) ClearEdgeURL() *HostUpdateOne {
	_u.mutation.ClearEdgeURL()
	return _u
}

// SetStatus sets the "status" field.
func (_u *HostUpdateOne) SetStatus(v string) *HostUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableStatus(v *string) *HostUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *HostUpdateOne) ClearStatus() *HostUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (_u *HostUpdateOne) SetLastHeartbeat(v time.Time) *HostUpdateOne {
	_u.mutation.SetLastHeartbeat(v)
	return _u
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableLastHeartbeat(v *time.Time) *HostUpdateOne {
	if v != nil {
		_u.SetLastHeartbeat(*v)
	}
	return _u
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (_u *HostUpdateOne) ClearLastHeartbeat() *HostUpdateOne {
	_u.mutation.ClearLastHeartbeat()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *HostUpdateOne) SetMetadata(v struct{}) *HostUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableMetadata(v *struct{}) *HostUpdateOne {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *HostUpdateOne) ClearMetadata() *HostUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *HostUpdateOne) SetCreatedAt(v time.Time) *HostUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableCreatedAt(v *time.Time) *HostUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *HostUpdateOne) ClearCreatedAt() *HostUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostUpdateOne) SetUpdatedAt(v time.Time) *HostUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostUpdateOne) SetNillableUpdatedAt(v *time.Time) *HostUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *HostUpdateOne) ClearUpdatedAt() *HostUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetSite sets the "site" edge to the Site entity.
func (_u *HostUpdateOne) SetSite(v *Site) *HostUpdateOne {
	return _u.SetSiteID(v.ID)
}

// Mutation returns the HostMutation object of the builder.
func (_u *HostUpdateOne) Mutation() *HostMutation {
	return _u.mutation
}

// ClearSite clears the "site" edge to the Site entity.
func (_u *HostUpdateOne) ClearSite() *HostUpdateOne {
	_u.mutation.ClearSite()
	return _u
}

// Where appends a list predicates to the HostUpdate builder.
func (_u *HostUpdateOne) Where(ps ...predicate.Host) *HostUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *HostUpdateOne) Select(field string, fields ...string) *HostUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Host entity.
func (_u *HostUpdateOne) Save(ctx context.Context) (*Host, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostUpdateOne) SaveX(ctx context.Context) *Host {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *HostUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *HostUpdateOne) sqlSave(ctx context.Context) (_node *Host, err error) {
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Host.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, host.FieldID)
		for _, f := range fields {
			if !host.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != host.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.HostID(); ok {
		_spec.SetField(host.FieldHostID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Hostname(); ok {
		_spec.SetField(host.FieldHostname, field.TypeString, value)
	}
	if _u.mutation.HostnameCleared() {
		_spec.ClearField(host.FieldHostname, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(host.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(host.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.EdgeURL(); ok {
		_spec.SetField(host.FieldEdgeURL, field.TypeString, value)
	}
	if _u.mutation.EdgeURLCleared() {
		_spec.ClearField(host.FieldEdgeURL, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(host.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(host.FieldStatus, field.TypeString)
	}
	if value, ok := _u.mutation.LastHeartbeat(); ok {
		_spec.SetField(host.FieldLastHeartbeat, field.TypeTime, value)
	}
	if _u.mutation.LastHeartbeatCleared() {
		_spec.ClearField(host.FieldLastHeartbeat, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(host.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(host.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(host.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(host.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(host.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(host.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.SiteTable,
			Columns: []string{host.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.SiteTable,
			Columns: []string{host.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Host{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
