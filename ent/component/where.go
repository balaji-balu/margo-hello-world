// Code generated by ent, DO NOT EDIT.

package component

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/balaji/hello/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Component {
	return predicate.Component(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Component {
	return predicate.Component(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Component {
	return predicate.Component(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Component {
	return predicate.Component(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Component {
	return predicate.Component(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Component {
	return predicate.Component(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Component {
	return predicate.Component(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Component {
	return predicate.Component(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Component {
	return predicate.Component(sql.FieldLTE(FieldID, id))
}

// DeploymentProfileID applies equality check predicate on the "deployment_profile_id" field. It's identical to DeploymentProfileIDEQ.
func DeploymentProfileID(v string) predicate.Component {
	return predicate.Component(sql.FieldEQ(FieldDeploymentProfileID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Component {
	return predicate.Component(sql.FieldEQ(FieldName, v))
}

// DeploymentProfileIDEQ applies the EQ predicate on the "deployment_profile_id" field.
func DeploymentProfileIDEQ(v string) predicate.Component {
	return predicate.Component(sql.FieldEQ(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDNEQ applies the NEQ predicate on the "deployment_profile_id" field.
func DeploymentProfileIDNEQ(v string) predicate.Component {
	return predicate.Component(sql.FieldNEQ(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDIn applies the In predicate on the "deployment_profile_id" field.
func DeploymentProfileIDIn(vs ...string) predicate.Component {
	return predicate.Component(sql.FieldIn(FieldDeploymentProfileID, vs...))
}

// DeploymentProfileIDNotIn applies the NotIn predicate on the "deployment_profile_id" field.
func DeploymentProfileIDNotIn(vs ...string) predicate.Component {
	return predicate.Component(sql.FieldNotIn(FieldDeploymentProfileID, vs...))
}

// DeploymentProfileIDGT applies the GT predicate on the "deployment_profile_id" field.
func DeploymentProfileIDGT(v string) predicate.Component {
	return predicate.Component(sql.FieldGT(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDGTE applies the GTE predicate on the "deployment_profile_id" field.
func DeploymentProfileIDGTE(v string) predicate.Component {
	return predicate.Component(sql.FieldGTE(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDLT applies the LT predicate on the "deployment_profile_id" field.
func DeploymentProfileIDLT(v string) predicate.Component {
	return predicate.Component(sql.FieldLT(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDLTE applies the LTE predicate on the "deployment_profile_id" field.
func DeploymentProfileIDLTE(v string) predicate.Component {
	return predicate.Component(sql.FieldLTE(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDContains applies the Contains predicate on the "deployment_profile_id" field.
func DeploymentProfileIDContains(v string) predicate.Component {
	return predicate.Component(sql.FieldContains(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDHasPrefix applies the HasPrefix predicate on the "deployment_profile_id" field.
func DeploymentProfileIDHasPrefix(v string) predicate.Component {
	return predicate.Component(sql.FieldHasPrefix(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDHasSuffix applies the HasSuffix predicate on the "deployment_profile_id" field.
func DeploymentProfileIDHasSuffix(v string) predicate.Component {
	return predicate.Component(sql.FieldHasSuffix(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDIsNil applies the IsNil predicate on the "deployment_profile_id" field.
func DeploymentProfileIDIsNil() predicate.Component {
	return predicate.Component(sql.FieldIsNull(FieldDeploymentProfileID))
}

// DeploymentProfileIDNotNil applies the NotNil predicate on the "deployment_profile_id" field.
func DeploymentProfileIDNotNil() predicate.Component {
	return predicate.Component(sql.FieldNotNull(FieldDeploymentProfileID))
}

// DeploymentProfileIDEqualFold applies the EqualFold predicate on the "deployment_profile_id" field.
func DeploymentProfileIDEqualFold(v string) predicate.Component {
	return predicate.Component(sql.FieldEqualFold(FieldDeploymentProfileID, v))
}

// DeploymentProfileIDContainsFold applies the ContainsFold predicate on the "deployment_profile_id" field.
func DeploymentProfileIDContainsFold(v string) predicate.Component {
	return predicate.Component(sql.FieldContainsFold(FieldDeploymentProfileID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Component {
	return predicate.Component(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Component {
	return predicate.Component(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Component {
	return predicate.Component(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Component {
	return predicate.Component(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Component {
	return predicate.Component(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Component {
	return predicate.Component(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Component {
	return predicate.Component(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Component {
	return predicate.Component(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Component {
	return predicate.Component(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Component {
	return predicate.Component(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Component {
	return predicate.Component(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Component {
	return predicate.Component(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Component {
	return predicate.Component(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Component {
	return predicate.Component(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Component {
	return predicate.Component(sql.FieldContainsFold(FieldName, v))
}

// PropertiesIsNil applies the IsNil predicate on the "properties" field.
func PropertiesIsNil() predicate.Component {
	return predicate.Component(sql.FieldIsNull(FieldProperties))
}

// PropertiesNotNil applies the NotNil predicate on the "properties" field.
func PropertiesNotNil() predicate.Component {
	return predicate.Component(sql.FieldNotNull(FieldProperties))
}

// HasDeploymentProfile applies the HasEdge predicate on the "deployment_profile" edge.
func HasDeploymentProfile() predicate.Component {
	return predicate.Component(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeploymentProfileTable, DeploymentProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentProfileWith applies the HasEdge predicate on the "deployment_profile" edge with a given conditions (other predicates).
func HasDeploymentProfileWith(preds ...predicate.DeploymentProfile) predicate.Component {
	return predicate.Component(func(s *sql.Selector) {
		step := newDeploymentProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Component) predicate.Component {
	return predicate.Component(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Component) predicate.Component {
	return predicate.Component(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Component) predicate.Component {
	return predicate.Component(sql.NotPredicates(p))
}
