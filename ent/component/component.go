// Code generated by ent, DO NOT EDIT.

package component

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the component type in the database.
	Label = "component"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeploymentProfileID holds the string denoting the deployment_profile_id field in the database.
	FieldDeploymentProfileID = "deployment_profile_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProperties holds the string denoting the properties field in the database.
	FieldProperties = "properties"
	// EdgeDeploymentProfile holds the string denoting the deployment_profile edge name in mutations.
	EdgeDeploymentProfile = "deployment_profile"
	// Table holds the table name of the component in the database.
	Table = "component"
	// DeploymentProfileTable is the table that holds the deployment_profile relation/edge.
	DeploymentProfileTable = "component"
	// DeploymentProfileInverseTable is the table name for the DeploymentProfile entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentprofile" package.
	DeploymentProfileInverseTable = "deployment_profile"
	// DeploymentProfileColumn is the table column denoting the deployment_profile relation/edge.
	DeploymentProfileColumn = "deployment_profile_id"
)

// Columns holds all SQL columns for component fields.
var Columns = []string{
	FieldID,
	FieldDeploymentProfileID,
	FieldName,
	FieldProperties,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Component queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeploymentProfileID orders the results by the deployment_profile_id field.
func ByDeploymentProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentProfileID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDeploymentProfileField orders the results by deployment_profile field.
func ByDeploymentProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newDeploymentProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeploymentProfileTable, DeploymentProfileColumn),
	)
}
