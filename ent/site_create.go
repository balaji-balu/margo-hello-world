// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/balaji/hello/ent/host"
	"github.com/balaji/hello/ent/orchestrator"
	"github.com/balaji/hello/ent/site"
	"github.com/google/uuid"
)

// SiteCreate is the builder for creating a Site entity.
type SiteCreate struct {
	config
	mutation *SiteMutation
	hooks    []Hook
}

// SetSiteID sets the "site_id" field.
func (_c *SiteCreate) SetSiteID(v string) *SiteCreate {
	_c.mutation.SetSiteID(v)
	return _c
}

// SetName sets the "name" field.
func (_c *SiteCreate) SetName(v string) *SiteCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *SiteCreate) SetNillableName(v *string) *SiteCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *SiteCreate) SetDescription(v string) *SiteCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *SiteCreate) SetNillableDescription(v *string) *SiteCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetLocation sets the "location" field.
func (_c *SiteCreate) SetLocation(v string) *SiteCreate {
	_c.mutation.SetLocation(v)
	return _c
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_c *SiteCreate) SetNillableLocation(v *string) *SiteCreate {
	if v != nil {
		_c.SetLocation(*v)
	}
	return _c
}

// SetOrchestratorID sets the "orchestrator_id" field.
func (_c *SiteCreate) SetOrchestratorID(v uuid.UUID) *SiteCreate {
	_c.mutation.SetOrchestratorID(v)
	return _c
}

// SetNillableOrchestratorID sets the "orchestrator_id" field if the given value is not nil.
func (_c *SiteCreate) SetNillableOrchestratorID(v *uuid.UUID) *SiteCreate {
	if v != nil {
		_c.SetOrchestratorID(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *SiteCreate) SetMetadata(v struct{}) *SiteCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_c *SiteCreate) SetNillableMetadata(v *struct{}) *SiteCreate {
	if v != nil {
		_c.SetMetadata(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *SiteCreate) SetCreatedAt(v time.Time) *SiteCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SiteCreate) SetNillableCreatedAt(v *time.Time) *SiteCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *SiteCreate) SetUpdatedAt(v time.Time) *SiteCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *SiteCreate) SetNillableUpdatedAt(v *time.Time) *SiteCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *SiteCreate) SetID(v uuid.UUID) *SiteCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (_c *SiteCreate) AddHostIDs(ids ...uuid.UUID) *SiteCreate {
	_c.mutation.AddHostIDs(ids...)
	return _c
}

// AddHosts adds the "hosts" edges to the Host entity.
func (_c *SiteCreate) AddHosts(v ...*Host) *SiteCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddHostIDs(ids...)
}

// SetOrchestrator sets the "orchestrator" edge to the Orchestrator entity.
func (_c *SiteCreate) SetOrchestrator(v *Orchestrator) *SiteCreate {
	return _c.SetOrchestratorID(v.ID)
}

// Mutation returns the SiteMutation object of the builder.
func (_c *SiteCreate) Mutation() *SiteMutation {
	return _c.mutation
}

// Save creates the Site in the database.
func (_c *SiteCreate) Save(ctx context.Context) (*Site, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SiteCreate) SaveX(ctx context.Context) *Site {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SiteCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SiteCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SiteCreate) check() error {
	if _, ok := _c.mutation.SiteID(); !ok {
		return &ValidationError{Name: "site_id", err: errors.New(`ent: missing required field "Site.site_id"`)}
	}
	return nil
}

func (_c *SiteCreate) sqlSave(ctx context.Context) (*Site, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SiteCreate) createSpec() (*Site, *sqlgraph.CreateSpec) {
	var (
		_node = &Site{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(site.Table, sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.SiteID(); ok {
		_spec.SetField(site.FieldSiteID, field.TypeString, value)
		_node.SiteID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(site.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(site.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Location(); ok {
		_spec.SetField(site.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(site.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(site.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(site.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.HostsTable,
			Columns: []string{site.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrchestratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   site.OrchestratorTable,
			Columns: []string{site.OrchestratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orchestrator.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrchestratorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SiteCreateBulk is the builder for creating many Site entities in bulk.
type SiteCreateBulk struct {
	config
	err      error
	builders []*SiteCreate
}

// Save creates the Site entities in the database.
func (_c *SiteCreateBulk) Save(ctx context.Context) ([]*Site, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Site, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SiteCreateBulk) SaveX(ctx context.Context) []*Site {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SiteCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SiteCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
