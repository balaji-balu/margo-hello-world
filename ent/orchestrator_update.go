// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/balaji-balu/margo-hello-world/ent/orchestrator"
	"github.com/balaji-balu/margo-hello-world/ent/predicate"
	"github.com/balaji-balu/margo-hello-world/ent/site"
	"github.com/google/uuid"
)

// OrchestratorUpdate is the builder for updating Orchestrator entities.
type OrchestratorUpdate struct {
	config
	hooks    []Hook
	mutation *OrchestratorMutation
}

// Where appends a list predicates to the OrchestratorUpdate builder.
func (_u *OrchestratorUpdate) Where(ps ...predicate.Orchestrator) *OrchestratorUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *OrchestratorUpdate) SetName(v string) *OrchestratorUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrchestratorUpdate) SetNillableName(v *string) *OrchestratorUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *OrchestratorUpdate) ClearName() *OrchestratorUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetType sets the "type" field.
func (_u *OrchestratorUpdate) SetType(v string) *OrchestratorUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OrchestratorUpdate) SetNillableType(v *string) *OrchestratorUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *OrchestratorUpdate) ClearType() *OrchestratorUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetRegion sets the "region" field.
func (_u *OrchestratorUpdate) SetRegion(v string) *OrchestratorUpdate {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *OrchestratorUpdate) SetNillableRegion(v *string) *OrchestratorUpdate {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// ClearRegion clears the value of the "region" field.
func (_u *OrchestratorUpdate) ClearRegion() *OrchestratorUpdate {
	_u.mutation.ClearRegion()
	return _u
}

// SetAPIEndpoint sets the "api_endpoint" field.
func (_u *OrchestratorUpdate) SetAPIEndpoint(v string) *OrchestratorUpdate {
	_u.mutation.SetAPIEndpoint(v)
	return _u
}

// SetNillableAPIEndpoint sets the "api_endpoint" field if the given value is not nil.
func (_u *OrchestratorUpdate) SetNillableAPIEndpoint(v *string) *OrchestratorUpdate {
	if v != nil {
		_u.SetAPIEndpoint(*v)
	}
	return _u
}

// ClearAPIEndpoint clears the value of the "api_endpoint" field.
func (_u *OrchestratorUpdate) ClearAPIEndpoint() *OrchestratorUpdate {
	_u.mutation.ClearAPIEndpoint()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *OrchestratorUpdate) SetCreatedAt(v time.Time) *OrchestratorUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *OrchestratorUpdate) SetNillableCreatedAt(v *time.Time) *OrchestratorUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *OrchestratorUpdate) ClearCreatedAt() *OrchestratorUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrchestratorUpdate) SetUpdatedAt(v time.Time) *OrchestratorUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OrchestratorUpdate) SetNillableUpdatedAt(v *time.Time) *OrchestratorUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrchestratorUpdate) ClearUpdatedAt() *OrchestratorUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// AddSiteIDs adds the "sites" edge to the Site entity by IDs.
func (_u *OrchestratorUpdate) AddSiteIDs(ids ...uuid.UUID) *OrchestratorUpdate {
	_u.mutation.AddSiteIDs(ids...)
	return _u
}

// AddSites adds the "sites" edges to the Site entity.
func (_u *OrchestratorUpdate) AddSites(v ...*Site) *OrchestratorUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSiteIDs(ids...)
}

// Mutation returns the OrchestratorMutation object of the builder.
func (_u *OrchestratorUpdate) Mutation() *OrchestratorMutation {
	return _u.mutation
}

// ClearSites clears all "sites" edges to the Site entity.
func (_u *OrchestratorUpdate) ClearSites() *OrchestratorUpdate {
	_u.mutation.ClearSites()
	return _u
}

// RemoveSiteIDs removes the "sites" edge to Site entities by IDs.
func (_u *OrchestratorUpdate) RemoveSiteIDs(ids ...uuid.UUID) *OrchestratorUpdate {
	_u.mutation.RemoveSiteIDs(ids...)
	return _u
}

// RemoveSites removes "sites" edges to Site entities.
func (_u *OrchestratorUpdate) RemoveSites(v ...*Site) *OrchestratorUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSiteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrchestratorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrchestratorUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrchestratorUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrchestratorUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *OrchestratorUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orchestrator.Table, orchestrator.Columns, sqlgraph.NewFieldSpec(orchestrator.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(orchestrator.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(orchestrator.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(orchestrator.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(orchestrator.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(orchestrator.FieldRegion, field.TypeString, value)
	}
	if _u.mutation.RegionCleared() {
		_spec.ClearField(orchestrator.FieldRegion, field.TypeString)
	}
	if value, ok := _u.mutation.APIEndpoint(); ok {
		_spec.SetField(orchestrator.FieldAPIEndpoint, field.TypeString, value)
	}
	if _u.mutation.APIEndpointCleared() {
		_spec.ClearField(orchestrator.FieldAPIEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(orchestrator.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orchestrator.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orchestrator.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orchestrator.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orchestrator.SitesTable,
			Columns: []string{orchestrator.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSitesIDs(); len(nodes) > 0 && !_u.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orchestrator.SitesTable,
			Columns: []string{orchestrator.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orchestrator.SitesTable,
			Columns: []string{orchestrator.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orchestrator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrchestratorUpdateOne is the builder for updating a single Orchestrator entity.
type OrchestratorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrchestratorMutation
}

// SetName sets the "name" field.
func (_u *OrchestratorUpdateOne) SetName(v string) *OrchestratorUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrchestratorUpdateOne) SetNillableName(v *string) *OrchestratorUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *OrchestratorUpdateOne) ClearName() *OrchestratorUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetType sets the "type" field.
func (_u *OrchestratorUpdateOne) SetType(v string) *OrchestratorUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OrchestratorUpdateOne) SetNillableType(v *string) *OrchestratorUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *OrchestratorUpdateOne) ClearType() *OrchestratorUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetRegion sets the "region" field.
func (_u *OrchestratorUpdateOne) SetRegion(v string) *OrchestratorUpdateOne {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *OrchestratorUpdateOne) SetNillableRegion(v *string) *OrchestratorUpdateOne {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// ClearRegion clears the value of the "region" field.
func (_u *OrchestratorUpdateOne) ClearRegion() *OrchestratorUpdateOne {
	_u.mutation.ClearRegion()
	return _u
}

// SetAPIEndpoint sets the "api_endpoint" field.
func (_u *OrchestratorUpdateOne) SetAPIEndpoint(v string) *OrchestratorUpdateOne {
	_u.mutation.SetAPIEndpoint(v)
	return _u
}

// SetNillableAPIEndpoint sets the "api_endpoint" field if the given value is not nil.
func (_u *OrchestratorUpdateOne) SetNillableAPIEndpoint(v *string) *OrchestratorUpdateOne {
	if v != nil {
		_u.SetAPIEndpoint(*v)
	}
	return _u
}

// ClearAPIEndpoint clears the value of the "api_endpoint" field.
func (_u *OrchestratorUpdateOne) ClearAPIEndpoint() *OrchestratorUpdateOne {
	_u.mutation.ClearAPIEndpoint()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *OrchestratorUpdateOne) SetCreatedAt(v time.Time) *OrchestratorUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *OrchestratorUpdateOne) SetNillableCreatedAt(v *time.Time) *OrchestratorUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *OrchestratorUpdateOne) ClearCreatedAt() *OrchestratorUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrchestratorUpdateOne) SetUpdatedAt(v time.Time) *OrchestratorUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OrchestratorUpdateOne) SetNillableUpdatedAt(v *time.Time) *OrchestratorUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrchestratorUpdateOne) ClearUpdatedAt() *OrchestratorUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// AddSiteIDs adds the "sites" edge to the Site entity by IDs.
func (_u *OrchestratorUpdateOne) AddSiteIDs(ids ...uuid.UUID) *OrchestratorUpdateOne {
	_u.mutation.AddSiteIDs(ids...)
	return _u
}

// AddSites adds the "sites" edges to the Site entity.
func (_u *OrchestratorUpdateOne) AddSites(v ...*Site) *OrchestratorUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSiteIDs(ids...)
}

// Mutation returns the OrchestratorMutation object of the builder.
func (_u *OrchestratorUpdateOne) Mutation() *OrchestratorMutation {
	return _u.mutation
}

// ClearSites clears all "sites" edges to the Site entity.
func (_u *OrchestratorUpdateOne) ClearSites() *OrchestratorUpdateOne {
	_u.mutation.ClearSites()
	return _u
}

// RemoveSiteIDs removes the "sites" edge to Site entities by IDs.
func (_u *OrchestratorUpdateOne) RemoveSiteIDs(ids ...uuid.UUID) *OrchestratorUpdateOne {
	_u.mutation.RemoveSiteIDs(ids...)
	return _u
}

// RemoveSites removes "sites" edges to Site entities.
func (_u *OrchestratorUpdateOne) RemoveSites(v ...*Site) *OrchestratorUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSiteIDs(ids...)
}

// Where appends a list predicates to the OrchestratorUpdate builder.
func (_u *OrchestratorUpdateOne) Where(ps ...predicate.Orchestrator) *OrchestratorUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrchestratorUpdateOne) Select(field string, fields ...string) *OrchestratorUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Orchestrator entity.
func (_u *OrchestratorUpdateOne) Save(ctx context.Context) (*Orchestrator, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrchestratorUpdateOne) SaveX(ctx context.Context) *Orchestrator {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrchestratorUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrchestratorUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *OrchestratorUpdateOne) sqlSave(ctx context.Context) (_node *Orchestrator, err error) {
	_spec := sqlgraph.NewUpdateSpec(orchestrator.Table, orchestrator.Columns, sqlgraph.NewFieldSpec(orchestrator.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Orchestrator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orchestrator.FieldID)
		for _, f := range fields {
			if !orchestrator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orchestrator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(orchestrator.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(orchestrator.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(orchestrator.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(orchestrator.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(orchestrator.FieldRegion, field.TypeString, value)
	}
	if _u.mutation.RegionCleared() {
		_spec.ClearField(orchestrator.FieldRegion, field.TypeString)
	}
	if value, ok := _u.mutation.APIEndpoint(); ok {
		_spec.SetField(orchestrator.FieldAPIEndpoint, field.TypeString, value)
	}
	if _u.mutation.APIEndpointCleared() {
		_spec.ClearField(orchestrator.FieldAPIEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(orchestrator.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orchestrator.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orchestrator.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orchestrator.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orchestrator.SitesTable,
			Columns: []string{orchestrator.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSitesIDs(); len(nodes) > 0 && !_u.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orchestrator.SitesTable,
			Columns: []string{orchestrator.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orchestrator.SitesTable,
			Columns: []string{orchestrator.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Orchestrator{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orchestrator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
