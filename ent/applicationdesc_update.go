// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/balaji-balu/margo-hello-world/ent/applicationdesc"
	"github.com/balaji-balu/margo-hello-world/ent/deploymentprofile"
	"github.com/balaji-balu/margo-hello-world/ent/predicate"
)

// ApplicationDescUpdate is the builder for updating ApplicationDesc entities.
type ApplicationDescUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationDescMutation
}

// Where appends a list predicates to the ApplicationDescUpdate builder.
func (_u *ApplicationDescUpdate) Where(ps ...predicate.ApplicationDesc) *ApplicationDescUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *ApplicationDescUpdate) SetName(v string) *ApplicationDescUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillableName(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *ApplicationDescUpdate) ClearName() *ApplicationDescUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetVendor sets the "vendor" field.
func (_u *ApplicationDescUpdate) SetVendor(v string) *ApplicationDescUpdate {
	_u.mutation.SetVendor(v)
	return _u
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillableVendor(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetVendor(*v)
	}
	return _u
}

// ClearVendor clears the value of the "vendor" field.
func (_u *ApplicationDescUpdate) ClearVendor() *ApplicationDescUpdate {
	_u.mutation.ClearVendor()
	return _u
}

// SetVersion sets the "version" field.
func (_u *ApplicationDescUpdate) SetVersion(v string) *ApplicationDescUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillableVersion(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *ApplicationDescUpdate) ClearVersion() *ApplicationDescUpdate {
	_u.mutation.ClearVersion()
	return _u
}

// SetCategory sets the "category" field.
func (_u *ApplicationDescUpdate) SetCategory(v string) *ApplicationDescUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillableCategory(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ApplicationDescUpdate) ClearCategory() *ApplicationDescUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ApplicationDescUpdate) SetDescription(v string) *ApplicationDescUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillableDescription(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ApplicationDescUpdate) ClearDescription() *ApplicationDescUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *ApplicationDescUpdate) SetIcon(v string) *ApplicationDescUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillableIcon(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *ApplicationDescUpdate) ClearIcon() *ApplicationDescUpdate {
	_u.mutation.ClearIcon()
	return _u
}

// SetArtifacturl sets the "artifacturl" field.
func (_u *ApplicationDescUpdate) SetArtifacturl(v string) *ApplicationDescUpdate {
	_u.mutation.SetArtifacturl(v)
	return _u
}

// SetNillableArtifacturl sets the "artifacturl" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillableArtifacturl(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetArtifacturl(*v)
	}
	return _u
}

// ClearArtifacturl clears the value of the "artifacturl" field.
func (_u *ApplicationDescUpdate) ClearArtifacturl() *ApplicationDescUpdate {
	_u.mutation.ClearArtifacturl()
	return _u
}

// SetSite sets the "site" field.
func (_u *ApplicationDescUpdate) SetSite(v string) *ApplicationDescUpdate {
	_u.mutation.SetSite(v)
	return _u
}

// SetNillableSite sets the "site" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillableSite(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetSite(*v)
	}
	return _u
}

// ClearSite clears the value of the "site" field.
func (_u *ApplicationDescUpdate) ClearSite() *ApplicationDescUpdate {
	_u.mutation.ClearSite()
	return _u
}

// SetTagLine sets the "tag_line" field.
func (_u *ApplicationDescUpdate) SetTagLine(v string) *ApplicationDescUpdate {
	_u.mutation.SetTagLine(v)
	return _u
}

// SetNillableTagLine sets the "tag_line" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillableTagLine(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetTagLine(*v)
	}
	return _u
}

// ClearTagLine clears the value of the "tag_line" field.
func (_u *ApplicationDescUpdate) ClearTagLine() *ApplicationDescUpdate {
	_u.mutation.ClearTagLine()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ApplicationDescUpdate) SetTags(v []string) *ApplicationDescUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ApplicationDescUpdate) AppendTags(v []string) *ApplicationDescUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ApplicationDescUpdate) ClearTags() *ApplicationDescUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetPublished sets the "published" field.
func (_u *ApplicationDescUpdate) SetPublished(v string) *ApplicationDescUpdate {
	_u.mutation.SetPublished(v)
	return _u
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (_u *ApplicationDescUpdate) SetNillablePublished(v *string) *ApplicationDescUpdate {
	if v != nil {
		_u.SetPublished(*v)
	}
	return _u
}

// ClearPublished clears the value of the "published" field.
func (_u *ApplicationDescUpdate) ClearPublished() *ApplicationDescUpdate {
	_u.mutation.ClearPublished()
	return _u
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (_u *ApplicationDescUpdate) AddDeploymentProfileIDs(ids ...string) *ApplicationDescUpdate {
	_u.mutation.AddDeploymentProfileIDs(ids...)
	return _u
}

// AddDeploymentProfiles adds the "deployment_profiles" edges to the DeploymentProfile entity.
func (_u *ApplicationDescUpdate) AddDeploymentProfiles(v ...*DeploymentProfile) *ApplicationDescUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDeploymentProfileIDs(ids...)
}

// Mutation returns the ApplicationDescMutation object of the builder.
func (_u *ApplicationDescUpdate) Mutation() *ApplicationDescMutation {
	return _u.mutation
}

// ClearDeploymentProfiles clears all "deployment_profiles" edges to the DeploymentProfile entity.
func (_u *ApplicationDescUpdate) ClearDeploymentProfiles() *ApplicationDescUpdate {
	_u.mutation.ClearDeploymentProfiles()
	return _u
}

// RemoveDeploymentProfileIDs removes the "deployment_profiles" edge to DeploymentProfile entities by IDs.
func (_u *ApplicationDescUpdate) RemoveDeploymentProfileIDs(ids ...string) *ApplicationDescUpdate {
	_u.mutation.RemoveDeploymentProfileIDs(ids...)
	return _u
}

// RemoveDeploymentProfiles removes "deployment_profiles" edges to DeploymentProfile entities.
func (_u *ApplicationDescUpdate) RemoveDeploymentProfiles(v ...*DeploymentProfile) *ApplicationDescUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDeploymentProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ApplicationDescUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ApplicationDescUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ApplicationDescUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ApplicationDescUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ApplicationDescUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(applicationdesc.Table, applicationdesc.Columns, sqlgraph.NewFieldSpec(applicationdesc.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(applicationdesc.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(applicationdesc.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Vendor(); ok {
		_spec.SetField(applicationdesc.FieldVendor, field.TypeString, value)
	}
	if _u.mutation.VendorCleared() {
		_spec.ClearField(applicationdesc.FieldVendor, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(applicationdesc.FieldVersion, field.TypeString, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(applicationdesc.FieldVersion, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(applicationdesc.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(applicationdesc.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(applicationdesc.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(applicationdesc.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(applicationdesc.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(applicationdesc.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Artifacturl(); ok {
		_spec.SetField(applicationdesc.FieldArtifacturl, field.TypeString, value)
	}
	if _u.mutation.ArtifacturlCleared() {
		_spec.ClearField(applicationdesc.FieldArtifacturl, field.TypeString)
	}
	if value, ok := _u.mutation.Site(); ok {
		_spec.SetField(applicationdesc.FieldSite, field.TypeString, value)
	}
	if _u.mutation.SiteCleared() {
		_spec.ClearField(applicationdesc.FieldSite, field.TypeString)
	}
	if value, ok := _u.mutation.TagLine(); ok {
		_spec.SetField(applicationdesc.FieldTagLine, field.TypeString, value)
	}
	if _u.mutation.TagLineCleared() {
		_spec.ClearField(applicationdesc.FieldTagLine, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(applicationdesc.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, applicationdesc.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(applicationdesc.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Published(); ok {
		_spec.SetField(applicationdesc.FieldPublished, field.TypeString, value)
	}
	if _u.mutation.PublishedCleared() {
		_spec.ClearField(applicationdesc.FieldPublished, field.TypeString)
	}
	if _u.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationdesc.DeploymentProfilesTable,
			Columns: []string{applicationdesc.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDeploymentProfilesIDs(); len(nodes) > 0 && !_u.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationdesc.DeploymentProfilesTable,
			Columns: []string{applicationdesc.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DeploymentProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationdesc.DeploymentProfilesTable,
			Columns: []string{applicationdesc.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationdesc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ApplicationDescUpdateOne is the builder for updating a single ApplicationDesc entity.
type ApplicationDescUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationDescMutation
}

// SetName sets the "name" field.
func (_u *ApplicationDescUpdateOne) SetName(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillableName(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *ApplicationDescUpdateOne) ClearName() *ApplicationDescUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetVendor sets the "vendor" field.
func (_u *ApplicationDescUpdateOne) SetVendor(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetVendor(v)
	return _u
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillableVendor(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetVendor(*v)
	}
	return _u
}

// ClearVendor clears the value of the "vendor" field.
func (_u *ApplicationDescUpdateOne) ClearVendor() *ApplicationDescUpdateOne {
	_u.mutation.ClearVendor()
	return _u
}

// SetVersion sets the "version" field.
func (_u *ApplicationDescUpdateOne) SetVersion(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillableVersion(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *ApplicationDescUpdateOne) ClearVersion() *ApplicationDescUpdateOne {
	_u.mutation.ClearVersion()
	return _u
}

// SetCategory sets the "category" field.
func (_u *ApplicationDescUpdateOne) SetCategory(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillableCategory(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ApplicationDescUpdateOne) ClearCategory() *ApplicationDescUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ApplicationDescUpdateOne) SetDescription(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillableDescription(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ApplicationDescUpdateOne) ClearDescription() *ApplicationDescUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *ApplicationDescUpdateOne) SetIcon(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillableIcon(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *ApplicationDescUpdateOne) ClearIcon() *ApplicationDescUpdateOne {
	_u.mutation.ClearIcon()
	return _u
}

// SetArtifacturl sets the "artifacturl" field.
func (_u *ApplicationDescUpdateOne) SetArtifacturl(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetArtifacturl(v)
	return _u
}

// SetNillableArtifacturl sets the "artifacturl" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillableArtifacturl(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetArtifacturl(*v)
	}
	return _u
}

// ClearArtifacturl clears the value of the "artifacturl" field.
func (_u *ApplicationDescUpdateOne) ClearArtifacturl() *ApplicationDescUpdateOne {
	_u.mutation.ClearArtifacturl()
	return _u
}

// SetSite sets the "site" field.
func (_u *ApplicationDescUpdateOne) SetSite(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetSite(v)
	return _u
}

// SetNillableSite sets the "site" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillableSite(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetSite(*v)
	}
	return _u
}

// ClearSite clears the value of the "site" field.
func (_u *ApplicationDescUpdateOne) ClearSite() *ApplicationDescUpdateOne {
	_u.mutation.ClearSite()
	return _u
}

// SetTagLine sets the "tag_line" field.
func (_u *ApplicationDescUpdateOne) SetTagLine(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetTagLine(v)
	return _u
}

// SetNillableTagLine sets the "tag_line" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillableTagLine(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetTagLine(*v)
	}
	return _u
}

// ClearTagLine clears the value of the "tag_line" field.
func (_u *ApplicationDescUpdateOne) ClearTagLine() *ApplicationDescUpdateOne {
	_u.mutation.ClearTagLine()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ApplicationDescUpdateOne) SetTags(v []string) *ApplicationDescUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ApplicationDescUpdateOne) AppendTags(v []string) *ApplicationDescUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ApplicationDescUpdateOne) ClearTags() *ApplicationDescUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetPublished sets the "published" field.
func (_u *ApplicationDescUpdateOne) SetPublished(v string) *ApplicationDescUpdateOne {
	_u.mutation.SetPublished(v)
	return _u
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (_u *ApplicationDescUpdateOne) SetNillablePublished(v *string) *ApplicationDescUpdateOne {
	if v != nil {
		_u.SetPublished(*v)
	}
	return _u
}

// ClearPublished clears the value of the "published" field.
func (_u *ApplicationDescUpdateOne) ClearPublished() *ApplicationDescUpdateOne {
	_u.mutation.ClearPublished()
	return _u
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (_u *ApplicationDescUpdateOne) AddDeploymentProfileIDs(ids ...string) *ApplicationDescUpdateOne {
	_u.mutation.AddDeploymentProfileIDs(ids...)
	return _u
}

// AddDeploymentProfiles adds the "deployment_profiles" edges to the DeploymentProfile entity.
func (_u *ApplicationDescUpdateOne) AddDeploymentProfiles(v ...*DeploymentProfile) *ApplicationDescUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDeploymentProfileIDs(ids...)
}

// Mutation returns the ApplicationDescMutation object of the builder.
func (_u *ApplicationDescUpdateOne) Mutation() *ApplicationDescMutation {
	return _u.mutation
}

// ClearDeploymentProfiles clears all "deployment_profiles" edges to the DeploymentProfile entity.
func (_u *ApplicationDescUpdateOne) ClearDeploymentProfiles() *ApplicationDescUpdateOne {
	_u.mutation.ClearDeploymentProfiles()
	return _u
}

// RemoveDeploymentProfileIDs removes the "deployment_profiles" edge to DeploymentProfile entities by IDs.
func (_u *ApplicationDescUpdateOne) RemoveDeploymentProfileIDs(ids ...string) *ApplicationDescUpdateOne {
	_u.mutation.RemoveDeploymentProfileIDs(ids...)
	return _u
}

// RemoveDeploymentProfiles removes "deployment_profiles" edges to DeploymentProfile entities.
func (_u *ApplicationDescUpdateOne) RemoveDeploymentProfiles(v ...*DeploymentProfile) *ApplicationDescUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDeploymentProfileIDs(ids...)
}

// Where appends a list predicates to the ApplicationDescUpdate builder.
func (_u *ApplicationDescUpdateOne) Where(ps ...predicate.ApplicationDesc) *ApplicationDescUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ApplicationDescUpdateOne) Select(field string, fields ...string) *ApplicationDescUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ApplicationDesc entity.
func (_u *ApplicationDescUpdateOne) Save(ctx context.Context) (*ApplicationDesc, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ApplicationDescUpdateOne) SaveX(ctx context.Context) *ApplicationDesc {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ApplicationDescUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ApplicationDescUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ApplicationDescUpdateOne) sqlSave(ctx context.Context) (_node *ApplicationDesc, err error) {
	_spec := sqlgraph.NewUpdateSpec(applicationdesc.Table, applicationdesc.Columns, sqlgraph.NewFieldSpec(applicationdesc.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApplicationDesc.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationdesc.FieldID)
		for _, f := range fields {
			if !applicationdesc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != applicationdesc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(applicationdesc.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(applicationdesc.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Vendor(); ok {
		_spec.SetField(applicationdesc.FieldVendor, field.TypeString, value)
	}
	if _u.mutation.VendorCleared() {
		_spec.ClearField(applicationdesc.FieldVendor, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(applicationdesc.FieldVersion, field.TypeString, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(applicationdesc.FieldVersion, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(applicationdesc.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(applicationdesc.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(applicationdesc.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(applicationdesc.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(applicationdesc.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(applicationdesc.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Artifacturl(); ok {
		_spec.SetField(applicationdesc.FieldArtifacturl, field.TypeString, value)
	}
	if _u.mutation.ArtifacturlCleared() {
		_spec.ClearField(applicationdesc.FieldArtifacturl, field.TypeString)
	}
	if value, ok := _u.mutation.Site(); ok {
		_spec.SetField(applicationdesc.FieldSite, field.TypeString, value)
	}
	if _u.mutation.SiteCleared() {
		_spec.ClearField(applicationdesc.FieldSite, field.TypeString)
	}
	if value, ok := _u.mutation.TagLine(); ok {
		_spec.SetField(applicationdesc.FieldTagLine, field.TypeString, value)
	}
	if _u.mutation.TagLineCleared() {
		_spec.ClearField(applicationdesc.FieldTagLine, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(applicationdesc.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, applicationdesc.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(applicationdesc.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Published(); ok {
		_spec.SetField(applicationdesc.FieldPublished, field.TypeString, value)
	}
	if _u.mutation.PublishedCleared() {
		_spec.ClearField(applicationdesc.FieldPublished, field.TypeString)
	}
	if _u.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationdesc.DeploymentProfilesTable,
			Columns: []string{applicationdesc.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDeploymentProfilesIDs(); len(nodes) > 0 && !_u.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationdesc.DeploymentProfilesTable,
			Columns: []string{applicationdesc.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DeploymentProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationdesc.DeploymentProfilesTable,
			Columns: []string{applicationdesc.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApplicationDesc{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationdesc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
