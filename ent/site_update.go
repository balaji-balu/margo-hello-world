// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/balaji-balu/margo-hello-world/ent/host"
	"github.com/balaji-balu/margo-hello-world/ent/orchestrator"
	"github.com/balaji-balu/margo-hello-world/ent/predicate"
	"github.com/balaji-balu/margo-hello-world/ent/site"
	"github.com/google/uuid"
)

// SiteUpdate is the builder for updating Site entities.
type SiteUpdate struct {
	config
	hooks    []Hook
	mutation *SiteMutation
}

// Where appends a list predicates to the SiteUpdate builder.
func (_u *SiteUpdate) Where(ps ...predicate.Site) *SiteUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSiteID sets the "site_id" field.
func (_u *SiteUpdate) SetSiteID(v string) *SiteUpdate {
	_u.mutation.SetSiteID(v)
	return _u
}

// SetNillableSiteID sets the "site_id" field if the given value is not nil.
func (_u *SiteUpdate) SetNillableSiteID(v *string) *SiteUpdate {
	if v != nil {
		_u.SetSiteID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SiteUpdate) SetName(v string) *SiteUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SiteUpdate) SetNillableName(v *string) *SiteUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *SiteUpdate) ClearName() *SiteUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetDescription sets the "description" field.
func (_u *SiteUpdate) SetDescription(v string) *SiteUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SiteUpdate) SetNillableDescription(v *string) *SiteUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SiteUpdate) ClearDescription() *SiteUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetLocation sets the "location" field.
func (_u *SiteUpdate) SetLocation(v string) *SiteUpdate {
	_u.mutation.SetLocation(v)
	return _u
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_u *SiteUpdate) SetNillableLocation(v *string) *SiteUpdate {
	if v != nil {
		_u.SetLocation(*v)
	}
	return _u
}

// ClearLocation clears the value of the "location" field.
func (_u *SiteUpdate) ClearLocation() *SiteUpdate {
	_u.mutation.ClearLocation()
	return _u
}

// SetOrchestratorID sets the "orchestrator_id" field.
func (_u *SiteUpdate) SetOrchestratorID(v uuid.UUID) *SiteUpdate {
	_u.mutation.SetOrchestratorID(v)
	return _u
}

// SetNillableOrchestratorID sets the "orchestrator_id" field if the given value is not nil.
func (_u *SiteUpdate) SetNillableOrchestratorID(v *uuid.UUID) *SiteUpdate {
	if v != nil {
		_u.SetOrchestratorID(*v)
	}
	return _u
}

// ClearOrchestratorID clears the value of the "orchestrator_id" field.
func (_u *SiteUpdate) ClearOrchestratorID() *SiteUpdate {
	_u.mutation.ClearOrchestratorID()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SiteUpdate) SetMetadata(v struct{}) *SiteUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *SiteUpdate) SetNillableMetadata(v *struct{}) *SiteUpdate {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SiteUpdate) ClearMetadata() *SiteUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SiteUpdate) SetCreatedAt(v time.Time) *SiteUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SiteUpdate) SetNillableCreatedAt(v *time.Time) *SiteUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *SiteUpdate) ClearCreatedAt() *SiteUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SiteUpdate) SetUpdatedAt(v time.Time) *SiteUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *SiteUpdate) SetNillableUpdatedAt(v *time.Time) *SiteUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SiteUpdate) ClearUpdatedAt() *SiteUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (_u *SiteUpdate) AddHostIDs(ids ...uuid.UUID) *SiteUpdate {
	_u.mutation.AddHostIDs(ids...)
	return _u
}

// AddHosts adds the "hosts" edges to the Host entity.
func (_u *SiteUpdate) AddHosts(v ...*Host) *SiteUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostIDs(ids...)
}

// SetOrchestrator sets the "orchestrator" edge to the Orchestrator entity.
func (_u *SiteUpdate) SetOrchestrator(v *Orchestrator) *SiteUpdate {
	return _u.SetOrchestratorID(v.ID)
}

// Mutation returns the SiteMutation object of the builder.
func (_u *SiteUpdate) Mutation() *SiteMutation {
	return _u.mutation
}

// ClearHosts clears all "hosts" edges to the Host entity.
func (_u *SiteUpdate) ClearHosts() *SiteUpdate {
	_u.mutation.ClearHosts()
	return _u
}

// RemoveHostIDs removes the "hosts" edge to Host entities by IDs.
func (_u *SiteUpdate) RemoveHostIDs(ids ...uuid.UUID) *SiteUpdate {
	_u.mutation.RemoveHostIDs(ids...)
	return _u
}

// RemoveHosts removes "hosts" edges to Host entities.
func (_u *SiteUpdate) RemoveHosts(v ...*Host) *SiteUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostIDs(ids...)
}

// ClearOrchestrator clears the "orchestrator" edge to the Orchestrator entity.
func (_u *SiteUpdate) ClearOrchestrator() *SiteUpdate {
	_u.mutation.ClearOrchestrator()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SiteUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SiteUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(site.Table, site.Columns, sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SiteID(); ok {
		_spec.SetField(site.FieldSiteID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(site.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(site.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(site.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(site.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(site.FieldLocation, field.TypeString, value)
	}
	if _u.mutation.LocationCleared() {
		_spec.ClearField(site.FieldLocation, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(site.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(site.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(site.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(site.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(site.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(site.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.HostsTable,
			Columns: []string{site.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostsIDs(); len(nodes) > 0 && !_u.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.HostsTable,
			Columns: []string{site.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.HostsTable,
			Columns: []string{site.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrchestratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   site.OrchestratorTable,
			Columns: []string{site.OrchestratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orchestrator.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrchestratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   site.OrchestratorTable,
			Columns: []string{site.OrchestratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orchestrator.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{site.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SiteUpdateOne is the builder for updating a single Site entity.
type SiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteMutation
}

// SetSiteID sets the "site_id" field.
func (_u *SiteUpdateOne) SetSiteID(v string) *SiteUpdateOne {
	_u.mutation.SetSiteID(v)
	return _u
}

// SetNillableSiteID sets the "site_id" field if the given value is not nil.
func (_u *SiteUpdateOne) SetNillableSiteID(v *string) *SiteUpdateOne {
	if v != nil {
		_u.SetSiteID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SiteUpdateOne) SetName(v string) *SiteUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SiteUpdateOne) SetNillableName(v *string) *SiteUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *SiteUpdateOne) ClearName() *SiteUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetDescription sets the "description" field.
func (_u *SiteUpdateOne) SetDescription(v string) *SiteUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SiteUpdateOne) SetNillableDescription(v *string) *SiteUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SiteUpdateOne) ClearDescription() *SiteUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetLocation sets the "location" field.
func (_u *SiteUpdateOne) SetLocation(v string) *SiteUpdateOne {
	_u.mutation.SetLocation(v)
	return _u
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_u *SiteUpdateOne) SetNillableLocation(v *string) *SiteUpdateOne {
	if v != nil {
		_u.SetLocation(*v)
	}
	return _u
}

// ClearLocation clears the value of the "location" field.
func (_u *SiteUpdateOne) ClearLocation() *SiteUpdateOne {
	_u.mutation.ClearLocation()
	return _u
}

// SetOrchestratorID sets the "orchestrator_id" field.
func (_u *SiteUpdateOne) SetOrchestratorID(v uuid.UUID) *SiteUpdateOne {
	_u.mutation.SetOrchestratorID(v)
	return _u
}

// SetNillableOrchestratorID sets the "orchestrator_id" field if the given value is not nil.
func (_u *SiteUpdateOne) SetNillableOrchestratorID(v *uuid.UUID) *SiteUpdateOne {
	if v != nil {
		_u.SetOrchestratorID(*v)
	}
	return _u
}

// ClearOrchestratorID clears the value of the "orchestrator_id" field.
func (_u *SiteUpdateOne) ClearOrchestratorID() *SiteUpdateOne {
	_u.mutation.ClearOrchestratorID()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SiteUpdateOne) SetMetadata(v struct{}) *SiteUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *SiteUpdateOne) SetNillableMetadata(v *struct{}) *SiteUpdateOne {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SiteUpdateOne) ClearMetadata() *SiteUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SiteUpdateOne) SetCreatedAt(v time.Time) *SiteUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SiteUpdateOne) SetNillableCreatedAt(v *time.Time) *SiteUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *SiteUpdateOne) ClearCreatedAt() *SiteUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SiteUpdateOne) SetUpdatedAt(v time.Time) *SiteUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *SiteUpdateOne) SetNillableUpdatedAt(v *time.Time) *SiteUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SiteUpdateOne) ClearUpdatedAt() *SiteUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (_u *SiteUpdateOne) AddHostIDs(ids ...uuid.UUID) *SiteUpdateOne {
	_u.mutation.AddHostIDs(ids...)
	return _u
}

// AddHosts adds the "hosts" edges to the Host entity.
func (_u *SiteUpdateOne) AddHosts(v ...*Host) *SiteUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostIDs(ids...)
}

// SetOrchestrator sets the "orchestrator" edge to the Orchestrator entity.
func (_u *SiteUpdateOne) SetOrchestrator(v *Orchestrator) *SiteUpdateOne {
	return _u.SetOrchestratorID(v.ID)
}

// Mutation returns the SiteMutation object of the builder.
func (_u *SiteUpdateOne) Mutation() *SiteMutation {
	return _u.mutation
}

// ClearHosts clears all "hosts" edges to the Host entity.
func (_u *SiteUpdateOne) ClearHosts() *SiteUpdateOne {
	_u.mutation.ClearHosts()
	return _u
}

// RemoveHostIDs removes the "hosts" edge to Host entities by IDs.
func (_u *SiteUpdateOne) RemoveHostIDs(ids ...uuid.UUID) *SiteUpdateOne {
	_u.mutation.RemoveHostIDs(ids...)
	return _u
}

// RemoveHosts removes "hosts" edges to Host entities.
func (_u *SiteUpdateOne) RemoveHosts(v ...*Host) *SiteUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostIDs(ids...)
}

// ClearOrchestrator clears the "orchestrator" edge to the Orchestrator entity.
func (_u *SiteUpdateOne) ClearOrchestrator() *SiteUpdateOne {
	_u.mutation.ClearOrchestrator()
	return _u
}

// Where appends a list predicates to the SiteUpdate builder.
func (_u *SiteUpdateOne) Where(ps ...predicate.Site) *SiteUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SiteUpdateOne) Select(field string, fields ...string) *SiteUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Site entity.
func (_u *SiteUpdateOne) Save(ctx context.Context) (*Site, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteUpdateOne) SaveX(ctx context.Context) *Site {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SiteUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SiteUpdateOne) sqlSave(ctx context.Context) (_node *Site, err error) {
	_spec := sqlgraph.NewUpdateSpec(site.Table, site.Columns, sqlgraph.NewFieldSpec(site.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Site.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, site.FieldID)
		for _, f := range fields {
			if !site.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != site.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SiteID(); ok {
		_spec.SetField(site.FieldSiteID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(site.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(site.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(site.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(site.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(site.FieldLocation, field.TypeString, value)
	}
	if _u.mutation.LocationCleared() {
		_spec.ClearField(site.FieldLocation, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(site.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(site.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(site.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(site.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(site.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(site.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.HostsTable,
			Columns: []string{site.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostsIDs(); len(nodes) > 0 && !_u.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.HostsTable,
			Columns: []string{site.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.HostsTable,
			Columns: []string{site.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrchestratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   site.OrchestratorTable,
			Columns: []string{site.OrchestratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orchestrator.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrchestratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   site.OrchestratorTable,
			Columns: []string{site.OrchestratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orchestrator.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Site{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{site.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
