// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/balaji/hello/ent/applicationdesc"
	"github.com/balaji/hello/ent/deploymentprofile"
)

// DeploymentProfile is the model entity for the DeploymentProfile schema.
type DeploymentProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CPUCores holds the value of the "cpu_cores" field.
	CPUCores float64 `json:"cpu_cores,omitempty"`
	// Memory holds the value of the "memory" field.
	Memory string `json:"memory,omitempty"`
	// Storage holds the value of the "storage" field.
	Storage string `json:"storage,omitempty"`
	// CPUArchitectures holds the value of the "cpu_architectures" field.
	CPUArchitectures []string `json:"cpu_architectures,omitempty"`
	// Peripherals holds the value of the "peripherals" field.
	Peripherals []map[string]interface{} `json:"peripherals,omitempty"`
	// Interfaces holds the value of the "interfaces" field.
	Interfaces []map[string]interface{} `json:"interfaces,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentProfileQuery when eager-loading is set.
	Edges        DeploymentProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeploymentProfileEdges holds the relations/edges for other nodes in the graph.
type DeploymentProfileEdges struct {
	// Components holds the value of the components edge.
	Components []*Component `json:"components,omitempty"`
	// ApplicationDesc holds the value of the application_desc edge.
	ApplicationDesc *ApplicationDesc `json:"application_desc,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ComponentsOrErr returns the Components value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentProfileEdges) ComponentsOrErr() ([]*Component, error) {
	if e.loadedTypes[0] {
		return e.Components, nil
	}
	return nil, &NotLoadedError{edge: "components"}
}

// ApplicationDescOrErr returns the ApplicationDesc value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentProfileEdges) ApplicationDescOrErr() (*ApplicationDesc, error) {
	if e.ApplicationDesc != nil {
		return e.ApplicationDesc, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: applicationdesc.Label}
	}
	return nil, &NotLoadedError{edge: "application_desc"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeploymentProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deploymentprofile.FieldCPUArchitectures, deploymentprofile.FieldPeripherals, deploymentprofile.FieldInterfaces:
			values[i] = new([]byte)
		case deploymentprofile.FieldCPUCores:
			values[i] = new(sql.NullFloat64)
		case deploymentprofile.FieldID, deploymentprofile.FieldType, deploymentprofile.FieldDescription, deploymentprofile.FieldMemory, deploymentprofile.FieldStorage, deploymentprofile.FieldAppID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeploymentProfile fields.
func (_m *DeploymentProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deploymentprofile.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case deploymentprofile.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case deploymentprofile.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case deploymentprofile.FieldCPUCores:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_cores", values[i])
			} else if value.Valid {
				_m.CPUCores = value.Float64
			}
		case deploymentprofile.FieldMemory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memory", values[i])
			} else if value.Valid {
				_m.Memory = value.String
			}
		case deploymentprofile.FieldStorage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage", values[i])
			} else if value.Valid {
				_m.Storage = value.String
			}
		case deploymentprofile.FieldCPUArchitectures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_architectures", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.CPUArchitectures); err != nil {
					return fmt.Errorf("unmarshal field cpu_architectures: %w", err)
				}
			}
		case deploymentprofile.FieldPeripherals:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field peripherals", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Peripherals); err != nil {
					return fmt.Errorf("unmarshal field peripherals: %w", err)
				}
			}
		case deploymentprofile.FieldInterfaces:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field interfaces", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Interfaces); err != nil {
					return fmt.Errorf("unmarshal field interfaces: %w", err)
				}
			}
		case deploymentprofile.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				_m.AppID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeploymentProfile.
// This includes values selected through modifiers, order, etc.
func (_m *DeploymentProfile) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryComponents queries the "components" edge of the DeploymentProfile entity.
func (_m *DeploymentProfile) QueryComponents() *ComponentQuery {
	return NewDeploymentProfileClient(_m.config).QueryComponents(_m)
}

// QueryApplicationDesc queries the "application_desc" edge of the DeploymentProfile entity.
func (_m *DeploymentProfile) QueryApplicationDesc() *ApplicationDescQuery {
	return NewDeploymentProfileClient(_m.config).QueryApplicationDesc(_m)
}

// Update returns a builder for updating this DeploymentProfile.
// Note that you need to call DeploymentProfile.Unwrap() before calling this method if this DeploymentProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *DeploymentProfile) Update() *DeploymentProfileUpdateOne {
	return NewDeploymentProfileClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the DeploymentProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *DeploymentProfile) Unwrap() *DeploymentProfile {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeploymentProfile is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *DeploymentProfile) String() string {
	var builder strings.Builder
	builder.WriteString("DeploymentProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("cpu_cores=")
	builder.WriteString(fmt.Sprintf("%v", _m.CPUCores))
	builder.WriteString(", ")
	builder.WriteString("memory=")
	builder.WriteString(_m.Memory)
	builder.WriteString(", ")
	builder.WriteString("storage=")
	builder.WriteString(_m.Storage)
	builder.WriteString(", ")
	builder.WriteString("cpu_architectures=")
	builder.WriteString(fmt.Sprintf("%v", _m.CPUArchitectures))
	builder.WriteString(", ")
	builder.WriteString("peripherals=")
	builder.WriteString(fmt.Sprintf("%v", _m.Peripherals))
	builder.WriteString(", ")
	builder.WriteString("interfaces=")
	builder.WriteString(fmt.Sprintf("%v", _m.Interfaces))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(_m.AppID)
	builder.WriteByte(')')
	return builder.String()
}

// DeploymentProfiles is a parsable slice of DeploymentProfile.
type DeploymentProfiles []*DeploymentProfile
