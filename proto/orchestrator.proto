syntax = "proto3";

package orchestrator;

option go_package = "./proto_generated";

message ContainerSpec {
  string image = 1;
  repeated string command = 2;
}

message ServiceSpec {
  string name = 1;
  ContainerSpec container = 2;
}

message NodeSpec {
  string id = 1;
  repeated ServiceSpec services = 2;
}

message Fleet {
  string name = 1;
  repeated NodeSpec nodes = 2;
}

message DeployRequest {
  string deployment_id = 1; // optional; generated by CO if empty
  Fleet fleet = 2;
}

message DeployResponse {
  string deployment_id = 1;
  string message = 2;
}

enum Status {
  UNKNOWN = 0;
  PENDING = 1;
  RUNNING = 2;
  SUCCEEDED = 3;
  FAILED = 4;
}

message ServiceStatus {
  string node_id = 1;
  string service_name = 2;
  Status status = 3;
  string message = 4;
}

message StatusReport {
  string deployment_id = 1;
  repeated ServiceStatus statuses = 2;
}

service CentralOrchestrator {
  // CO receives a deploy request from user/test client and forwards to LO(s)
  rpc Deploy(DeployRequest) returns (DeployResponse);
  // CO can receive aggregated status updates from LO
  rpc ReportStatus(StatusReport) returns (DeployResponse);
}

service LocalOrchestrator {
  // LO receives deployment from CO
  rpc ReceiveDeploy(DeployRequest) returns (DeployResponse);
  // LO receives status reports from EN
  rpc ReportFromEdge(StatusReport) returns (DeployResponse);
}

service EdgeNode {
  // EN receives per-node deployment (subset) from LO
  rpc ApplyDeploy(DeployRequest) returns (DeployResponse);
}